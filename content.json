{"posts":[{"title":"ASCII码对应关系","text":"版权声明 图片来源于百度百科 Tips 大小写转换 ±32 A-Z &lt; a-z 字母范围：65-90，97-122 数字范围：48-57 “A”为65；“a”为97；“0”为 48 ASCII 可输出 %d（字符的 ASCII 码的十进制数），也可输出 %c（对应的字符）。","link":"/ascii/"},{"title":"C语言 之 格式化输出","text":"前两天上课的时候，老师让输出个九九乘法表。 但是实际输出会觉得怪怪的，没对齐，尝试下对齐吧。 这样也不是不行是吧，哈哈。 123456789printf(&quot;1x1=1&quot;);printf(&quot;2x1=2 2x2= 4&quot;);printf(&quot;3x1=3 3x2= 6 3x3= 9&quot;);printf(&quot;4x1=4 4x2= 8 4x3=12 4x4=16&quot;);printf(&quot;5x1=5 5x2=10 5x3=15 5x4=20 5x5=25&quot;);printf(&quot;6x1=6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=36&quot;);printf(&quot;7x1=7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=49&quot;);printf(&quot;8x1=8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=64&quot;);printf(&quot;9x1=9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81&quot;); 没对齐的版本123456789101112#include &lt;stdio.h&gt;int main(){ int i,j; for(i = 1; i &lt;= 9; i++) { for(j = 1; j &lt;= i; j++) { printf(&quot;%dx%d=%d &quot;, i, j, i*j); } printf(&quot;\\n&quot;); } return 0;} 对占位符格式化输出就用乘法表作为例子， 输出的是 Int（%d）， 需要对一位数的结果进行扩展，让它能够对齐下面的两位数数字。 格式化输出格式：% (-/0) [位宽 n] . [精度 m] d 格式中我增加了空格，方便阅读，实际代码中不能有空格哦。 解释一下： 位宽 n：输出的内容占命令行的 n 个字符宽度，比如：[4]（n=1），[ 4]（n=2） 精度m：小数点后保留几位（貌似默认是 6 好像），比如 printf(&quot;%.2f&quot;, 3.1415); 输出的是3.14 -/0：这一部分是对自定义格式的一个补充。 ‘-‘：靠左输出（方括号并非输出内容，只是方便看到空格哈） printf(&quot;%-2d, 1&quot;); 输出的是：[1 ] printf(&quot;%2d, 1&quot;); 输出的是：[ 1] ‘0’：左侧补0⃣️ printf(&quot;%02d, 1&quot;); 输出的是：01 -/0 只能用一个，其中（靠左输出’-‘）的优先级更高，所以 printf(&quot;%-02d&quot;, 1); 输出的是 [1 ] %d 就没有必要设置精度了哈，三个格式化可以独立使用，但是要设置精度的话记得加上 Dot（.） 哦！ 比如： %-2d %05d %.3f %-5.2f … 可以在电脑上试试看这些的输出，更好地理解下。 改进后的版本 靠右对齐： 123456789101112#include &lt;stdio.h&gt;int main(){ int i,j; for(i = 1; i &lt;= 9; i++) { for(j = 1; j &lt;= i; j++) { printf(&quot;%dx%d=%2d &quot;, i, j, i*j); } printf(&quot;\\n&quot;); } return 0;} 输出结果 1x1= 12x1= 2 2x2= 43x1= 3 3x2= 6 3x3= 94x1= 4 4x2= 8 4x3=12 4x4=165x1= 5 5x2=10 5x3=15 5x4=20 5x5=256x1= 6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=367x1= 7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=498x1= 8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=649x1= 9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81 补零版本： 123456789101112#include &lt;stdio.h&gt;int main(){ int i,j; for(i = 1; i &lt;= 9; i++) { for(j = 1; j &lt;= i; j++) { printf(&quot;%dx%d=%02d &quot;, i, j, i*j); } printf(&quot;\\n&quot;); } return 0;} 输出结果 1x1=012x1=02 2x2=043x1=03 3x2=06 3x3=094x1=04 4x2=08 4x3=12 4x4=165x1=05 5x2=10 5x3=15 5x4=20 5x5=256x1=06 6x2=12 6x3=18 6x4=24 6x5=30 6x6=367x1=07 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=498x1=08 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=649x1=09 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81 靠左对齐： 123456789101112#include &lt;stdio.h&gt;int main(){ int i,j; for(i = 1; i &lt;= 9; i++) { for(j = 1; j &lt;= i; j++) { printf(&quot;%dx%d=%-2d &quot;, i, j, i*j); } printf(&quot;\\n&quot;); } return 0;} 输出结果 1x1=12x1=2 2x2=43x1=3 3x2=6 3x3=94x1=4 4x2=8 4x3=12 4x4=165x1=5 5x2=10 5x3=15 5x4=20 5x5=256x1=6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=367x1=7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=498x1=8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=649x1=9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81","link":"/formatted-output-in-c-programming-language/"},{"title":"新手表居然就卡bug？watchOS 9 太拉了...","text":"此问题已在 watchOS 9.0.2 中修复。 如图 高高兴兴地开箱 你还可以：在B站观看 麦克风开始抽风刚刚激活，就… 又陆陆续续失灵了几次，重启都能解决… 发了条微博：麦克风失灵 评论来看，也有问题… 在论坛里也找到了一样的问题：iwatch s8 麦克风高频率拾音故障 吐槽下，iWatch是什么东西…懂，但是没有这个名字 复现问题 &amp;&amp; 反馈问题觉得像是软件的 bug 打了个 400 电话，让我重新配对， 肯定是没效果的啦！ 但是， 我感觉像是噪声app的环境音量检测出 bug 了，关掉之后，确实缓解了。 解决了，但是没有完全解决。 好在， 又发现了一个不用重启的解决方案， 放充电器上充会儿电就好了。 解决方案目前为止有三种解决方案，再来梳理一下： 重启 Apple Watch（只能短暂解决，后续还可能会出现相同的问题，需要再次重启） 关闭噪声app中的环境音量测量（在watch设置-噪声中） 出现该问题时，将手表放到充电器上充电5分钟，可以恢复 其中，第一种只能短暂地解决该问题，第二种能缓解该问题，第三种也只能作为一种补救措施。 我的建议是：第二第三种搭配使用。 苹果那边已经反馈过去了，正在等待 watchOS 9.0.1或者 watchOS 9.1解决这个问题。 奇怪的是， 用第二种关闭了环境音量检测后，仍然可以在健康app里查看到环境噪声分贝的信息， 而且数据还是手表提供的 真垃圾！ 后续貌似苹果确认了 确认了这个问题的存在， 但是不知道能不能找到问题的原因， 这决定了最终能不能修复这个bug。 2022.10.11 watchOS 9.0.2 更新日志中写道：修复了部分 Apple Watch Series 8 和 Ultra 用户的麦克风音频中断的问题 经过测试，重新打开“环境音量检测”后一整天都没再出现此问题了","link":"/apple-watch-series-8-mic-failed/"},{"title":"就爱在网上BB？IP直接拿捏你","text":"发生在高中同学身上的真实事件。 这年头还有人喜欢在互联网上平白无故地造谣的嘛？ 还是一个高中的， 表面看看还真不觉得… 实际上做着下三滥的事情。 一会儿立信一会儿🐔大。 害。 一些经过言归正传。 先简单捋一下经过哈。 在用小号跟她“了解”情况过后，也要到了QQ，应该是小号，确定了两名“嫌疑人”， 分别在衫达（嘉善校区）和上海建桥学院， 但是也没有找到别的证据能很好的判断是谁。 好就好在一个开学了一个没开，两所学校的大致距离（一公里的那个圈）相差蛮远的。 脑中浮现出一个想法，IP能定位吗？ 答案是，可以，而且还蛮准。 所需准备 一个合理的理由（要点开才能获取到IP然后上传，对吧？） 后端结构化数据存储服务器（用来存接收到的IP） 一个域名（用来配置服务器，免费的就行） 一些JS的基础（要写一个网页的嘛～） 后端存储服务器之前做博客的时候用过Leancloud做评论系统， 后续这个新博客的评论系统也将基于 Leancloud。 这次用的是Leancloud国际版。 至于为什么是国际版后面会说。 IP获取用的是搜狐开放的script嵌入。 1&lt;script src=&quot;https://pv.sohu.com/cityjson?ie=utf-8&quot;&gt;&lt;/script&gt; 1var ip_address = returnCitySN[&quot;cip&quot;] 数据上传这部分在 Leancloud 的技术文档里写的很明白， 我这个需求其实就是把获取到的IP地址字符串上传到 Leancloud 结构化存储中， 稍微改下实例代码就行。 具体不多赘述，想要了解的可以看技术文档。 至于为什么要用国际版 因为国内版本强制要求添加 API 域名并且需要备案 时间紧迫 也不想搞这些东西 申请一个免费的简单用下就好国际版不需要提供 serverURL 但是国内网络上传会 403，所以申请了个域名，配置好以后国内外都能用，也不需要备案了 免费域名在 Freenom。 一切就绪 坐等IP网页发过去，被对面点开， 过了会儿显示连接错误， 你以为是真的连接错误吗？格局小了 我代码里写的就是错误🤣， 我这里显示他点开了4次。 IP、设备类型 也完美接收过来了。 让我看看你在哪拿到IP就是要找位置咯？ 在这查询下IP的大致位置 大致精度在1公里左右， 那么 是谁也就一目了然了。 写在最后这属于是多年来的技术经验的一次大考，之前做个人博客的时候有幸接触到了这些，这次才比较顺利。 最好的结果就是能找到这个在网络上伪装他人发布谣言的傻zi（B） 真的，给他测试的时候真的很开心，做出来了，精度可以，努力不白费。 也希望这个伪装别人造谣的人在私立大学里好好反省吧，看接下来学校怎么对她处理了，哈哈 顺便记录下时间点： 9.27 第一次发现在贴吧造谣 9.28 被我查到 IP 定位，依然很拽，晚上还在贴吧BB（也是这一天受害者向他们学校发送了邮件举报） 9.29 早上10点左右开始关闭贴吧私信，QQ删除好友并设置不可搜索，微信号更改并设置不可搜索 9.30 贴吧更新头像：差不多得了。 哈哈，画上圆满的句号。","link":"/ip-locate/"},{"title":"JsDelivr不灵了？淦！","text":"还记得几年前做博客的时候， 图片上传到 GitHub 上， 用 JsDelivr 拉取 GitHub 上的静态资源， 速度嘎嘎快， 但是最近发现， 静态资源貌似都被重定向到 githubusercontent 上去了， 可是，官网上却写着： DNS 被污染GitHub 上的 issue： Jsdelivr has been block again in China. Some places are polluted by DNS and are resolved to the IP of websites such as Facebook, Twitter, etc. Although other places can be resolved to the correct IP, they are reset by GWF during the TLS handshake and still inaccessible.But fortunately, fastly.jsdelivr.net is not polluted at present. 至于原因， 估计是某些人把非法的东西挂到 GitHub 上面去分享， 用 JsDelivr 去正常访问， 钻空子别发现了 哈哈。 不过好在 DNS 污染已经被解决，但是在大陆地区也增加了许多限制了，来保证不会再次被污染。 有什么影响？DNS解析现在已经恢复正常， 但是国内的 ICP 应该是不可能恢复了， JsDelivr 也不再提供 中国大陆地区 的 GitHub 静态资源的加速，（JS CSS 类文件除外） 所以博客内的图片也只能从 GitHub 拉取了， 导致网站加载时间可能会略长。 6月份的时候国内静态资源已经不给访问了 中国仅此一家合法的公共 CDN 就这么被限制了。 ICP也被吊销了。 淦！！ 怎么办呢？ 我也在寻找更优的解决方案来加速页面加载。 后续可能考虑从 GitHub 转到国内的 Gitee","link":"/jsdelivr-can-no-longer-accelerate-static-resources/"},{"title":"macOS 开发 -- URL 访问权限持久化（基于 Sandbox）","text":"好久不见，最近有在好好学习哈哈， 今天来分享下基于 Sandbox 的 URL 访问权限持久化的方案。 写这篇文章的起因是： 简单浏览了下 Tencent/lemon-cleaner 的部分源码， 发现他们用 Apple Script 调用 Finder 操作文件， 这样很好地避免了权限问题，但是研究一番发现，没那么简单…. Bookmark 大法这是我自己项目里使用的方法， 好处在于文件操作很自然， 不会让用户觉得自己的数据可以被随便乱翻（事实也确实是这样的） 将 App Sandbox –&gt; File Access 内的 User Selected File 改为 Read/Write 在项目的 entitlements 文件中添加这样一项 com.apple.security.files.bookmarks.app-scope，设为 YES 使用 NSOpenPannel / NSSavePannel 选择需要访问的文件（夹） 在 SwiftUI 中直接用 .fileImporter 之类的 modifer 就行 这样就拿到了用户选择的 URL 啦，因为是用户选择的，目前这个 URL 是有权访问的 注意，是目前，重启 app 就不行了 因此我们需要把权限持久化。 保存 URL 的 bookmark 1@AppStorage(&quot;bookmark&quot;) private var bookmark: Data? 12345do { bookmark = try url.bookmarkData(options: .withSecurityScope)} catch { print(error.localizedDescription) } （app 重启后）再次访问此 URL 1234567guard let bookmark else { return }var isStale = falselet url = try URL(resolvingBookmarkData: bookmark, options: .withSecurityScope, relativeTo: nil, bookmarkDataIsStale: &amp;isStale)url.startAccessingSecurityScopedResource()// Do some file-related works like move, duplicate, etc.// try? FileManager.default.moveItem(at: a, to: b)url.stopAccessingSecurityScopedResource() start 和 stop 一定要成对！！ 这里属于是访问系统敏感数据，如果不及时 stop 的话系统可能会对 app 的权限做限制， 因此不能滥用，这就是 Sandbox 为什么安全、让人放心的原因了。 url.startAccessingSecurityScopedResource() 也会返回一个布尔值，告诉你你是否真的可以这里的数据了，如果为 true 才能算成功。 Apple Script 大法Apple Script 实际上是代替用户操作的一种脚本，本质上是代替了手动的操作而已，因此这里可以操作所有文件了，在沙盒环境下当然是不会默认允许的。 如果启用了 Hardened Runtime，要先在里面启用 Apple Events，否则无法弹出请求框。 非 Sandbox如果在 非 Sandbox 环境下，只需要配置 Privacy - AppleEvents Sending Usage Description 告诉用户你执行的脚本的功能是干啥的就行。 然后就可以任意调用 applications了，例如，调用 Finder 来 move 文件之类的。 别慌！即使是非 Sandbox 也会有一步“自动化”授权的！ Sandbox在 Sandbox 环境下就会有限制了，不会让你能直接访问所有的 applications ，因为这可能会有潜在的恶意行为。 你还是得配置 Privacy - AppleEvents Sending Usage Description 告诉用户你执行的脚本的功能是干啥的， 你在需要使用对应的 applications 之前需要去 entitlements 里提前声明。（用到几个写几个） 1234&lt;key&gt;com.apple.security.temporary-exception.apple-events&lt;/key&gt;&lt;array&gt; &lt;string&gt;com.apple.Finder&lt;/string&gt;&lt;/array&gt; 这样你就可以在 app 中使用 NSAppleScript 执行脚本了。 否则，会报错 -600 因为是模拟用户操作的脚本，因此在移动文件、删除文件的时候都会有系统提示音哦～ 结尾目前我的项目中还是使用了 Bookmark 大法，更加简单，不会让用户觉得危险。 主要是 Apple Script 那些弹窗就蛮吓人了…","link":"/sandbox-url-persistence/"},{"title":"记录下 MarkdownView 的性能优化","text":"我的开源项目 MarkdownView 的 0.2.0 版本 终于发布了！ 改版本带来了性能上的巨大进步： Performance Rendering is now at least 3x faster on ALL DEVICES. Real-time previewing is now much much smoother. Scrolling is much quicker and smoother with no frame drop. Memory usage has been reduced by 30% 借此机会，记录下我的优化思路。 前期表现 启动、初次渲染耗时长 渲染完成后上下滚动的时候掉帧严重（使用懒加载模式） 渲染完成后上下滚动的时候内存占用量太大了（关闭了懒加载模式） 用作“实时预览”的时候会卡，导致输入体验很糟糕 综合以上表现，新功能部分也已经定型了，所以决定好好优化下性能， 至少在我这台 2019 款的 MacBook Pro 上不要有明显的卡顿吧… 渲染性能优化定位问题我想先来介绍下 MarkdownView 的整套渲染流程， 如图所示： 本来以为是在最后整合的时候 Layout 反复运算导致速度慢， 最后我用我第一篇博客测试了下，启动渲染居然需要 20s， 属于是完全卡住的感觉，在 Xcode 中能看到 CPU 占用持续在 100% 左右， 最后定位到 分词模块 耗费了大量 CPU 时间， 这就是优化的重点了！！ 问题分析分词模块的作用是保证文本都能以很短的形式呈现， 用于实现合理的自动换行， 但是分词模块依赖 Natural Language 框架进行分词， 本质上就是机器学习的分词，需要时间来完成， 同时所有的代码都是 同步执行（sync） 的， 上一个结束了才会执行下一个， 段落一多，大量的时间都被浪费在一段段分词了。 解决思路 异步执行（async）所有的分词操作，这样可以让所有段落的分词同时开始 文本渲染使用单独的 TextView 来渲染，默认显示空白等待分词结束后自动排版 还是用我的第一篇博客作为测试，加载速度从 20s 缩短到了 1s，内存占用也下降了 20%。 这也是我为什么会在新版中弃用 懒加载 (Lazy Loading) 的主要原因。 实时预览性能优化定位问题这里的问题具体表现在当我连续输入文本的时候， CPU占用高，并且伴随 输入框 也很卡顿。 问题分析接着上面的思路， 每次有微小变动的时候，MarkdownView 都会重新走整套流程， 本以为是异步处理得过于频繁导致卡顿， 于是就用Combine做了debounce处理，在输入间隙执行重新渲染， 问题没有解决， 而且，中文输入就没有问题， 重新考虑了下 渲染流程 和 SwiftUI 刷新机制， 每次有变动的时候，都要重新进入解析流程， 英文不论是多打一个字母或是删除一个字母，都会重解析， 中文输入拼音时本质上还没有让文本改变，不会重解析， 只有拼音转成文本之后，统一进行一次重解析， So， 在英文状态下，过于频繁的重解析是导致卡顿的“罪魁祸首”。 解决思路 对于一开始的文本输入做 debounce 处理，在输入间隙执行重解析、重渲染。 这样一来，在连续输入字符的时候不会每一次都执行重新解析和渲染， 只有在我输入时的停顿处，才会刷新整个文档，执行一次重渲染， 这样既保证了预览的实时性，也提升了整体性能。 做了debounce延迟，怎么保证预览的实时性？在真正地连续快速输入的情况下，是不会去看预览的 但凡少许停顿了下（0.3s），MarkdownView就已经自动刷新完成了 避免了在快速输入时，频繁地做无用的刷新 总结在开发过程中，需要注意： 对于一些比较耗时的部分（比如：下载、大量机器学习预测…）使用异步（async）来完成， 在 UI 出现问题时，关注下 UI 是如何刷新的， 看看是不是有过多繁杂的任务， 重新思考下现实中的逻辑，可以试着降低他们的优先级， 浓缩一下就是：主线程（main thread）不要有过多连续繁杂且无用的运算！！","link":"/markdownview-performance-optimization/"}],"tags":[{"name":"C语言","slug":"C语言","link":"/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"写代码","slug":"写代码","link":"/tags/%E5%86%99%E4%BB%A3%E7%A0%81/"},{"name":"bug","slug":"bug","link":"/tags/bug/"},{"name":"watchOS","slug":"watchOS","link":"/tags/watchOS/"},{"name":"Apple Watch","slug":"Apple-Watch","link":"/tags/Apple-Watch/"},{"name":"IP定位","slug":"IP定位","link":"/tags/IP%E5%AE%9A%E4%BD%8D/"},{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"JS","slug":"JS","link":"/tags/JS/"},{"name":"Leancloud","slug":"Leancloud","link":"/tags/Leancloud/"},{"name":"CDN","slug":"CDN","link":"/tags/CDN/"},{"name":"Sandbox","slug":"Sandbox","link":"/tags/Sandbox/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"Swift","slug":"Swift","link":"/tags/Swift/"},{"name":"代码调优","slug":"代码调优","link":"/tags/%E4%BB%A3%E7%A0%81%E8%B0%83%E4%BC%98/"}],"categories":[{"name":"学个习","slug":"学个习","link":"/categories/%E5%AD%A6%E4%B8%AA%E4%B9%A0/"},{"name":"吐个槽","slug":"吐个槽","link":"/categories/%E5%90%90%E4%B8%AA%E6%A7%BD/"},{"name":"瞎折腾","slug":"瞎折腾","link":"/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"},{"name":"撸代码","slug":"撸代码","link":"/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"}],"pages":[{"title":"关于我","text":"我是iKun全民制作人们大家好，我是练习时长两年半的个人练习生 —— ikun 喜欢唱、跳、rap、篮球（music~) 🐔你太美～ 哈哈，我是真 iKun，别被气孕哦～ 言归正传。 认真的我是一名大学生，就读于SUEP。 很高兴你能来访问我的博客！！ 在这里，我会分享自己的日常、瞎折腾的经历等等… 爱好是数码、科技、写些代码啥的 博客时间线这是我第二次使用博客，之前因为学业关系和域名到期就删库跑路了， 最近又想着做做博客记录下发生的事情，反正觉得自己需要一些反思和总结， 或许以后能用到呢～ 还是选了自己喜欢的 hexo/icarus 主题， 后续也会对这个主题进行一些改造，让网页体验更好 不打游戏我对游戏没有兴趣。 爱撸代码高考完放假代码写到爽！ 高考完基于 apple/swift-markdown 做了个 SwiftUI 的组件 开源地址在这：LiYanan2004/MarkdownView 欢迎大家来点点 Star 哦！！","link":"/about.html"},{"title":"","text":"404 - 啊哦，出错了 你所访问的资源不存在，该资源可能被修改了路径或被删除 网站仍在建设中！ 有一篇文章的链接有变动： 就爱在网上BB？IP直接拿捏你 你可以尝试下列方法： 检查链接 已知的问题 给我反馈 对于手动输入链接的读者：请先自行检查链接是否正确，有无拼写错误等… 对于点击按钮跳转的读者：请进入下一板块。 相册：/photos 有一篇文章的链接有变动： 就爱在网上BB？IP直接拿捏你 先检查前几项是否能够解决问题，别直接就反馈哦！😂 如果都不行请复制该页面的链接 给我反馈。 请一定要按照模版写，不然就作废。 正在持续改进中：2022.10.11 博客内的图片改为直链，之前的貌似还是不行，哎.. 2022.10.5 增加本页面的「最近更新」板块 修改了字体、样式、脚本的 CDN，就是说 网页加载变快了 博客内的图片改用 jsDelivr 镜像站！（GitHub issue里的大佬给的！） 2022.10.4 修复 cdn 导致的国内资源加载失败问题（#相关文章） 新增本页面","link":"/404.html"},{"title":"留言板","text":"来都来了，说两句呗😁","link":"/messages.html"}]}