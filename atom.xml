<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiYanan2004 - 我的博客</title>
  
  <subtitle>@LiYanan2004</subtitle>
  <link href="https://liyanan2004.github.io/atom.xml" rel="self"/>
  
  <link href="https://liyanan2004.github.io/"/>
  <updated>2023-01-12T15:00:40.419Z</updated>
  <id>https://liyanan2004.github.io/</id>
  
  <author>
    <name>LiYanan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录一次  官方召回计划的维修</title>
    <link href="https://liyanan2004.github.io/macbook-pro-keyboard-repair/"/>
    <id>https://liyanan2004.github.io/macbook-pro-keyboard-repair/</id>
    <published>2023-01-12T14:45:59.741Z</published>
    <updated>2023-01-12T15:00:40.419Z</updated>
    
    <content type="html"><![CDATA[<p>还记得几年前苹果推出一项<a href="https://support.apple.com/zh-cn/keyboard-service-program-for-mac-notebooks">召回计划</a>，</p><p>所有使用了蝶式键盘的 MacBook 出现键盘问题都可以免费换键盘，</p><p>当时买电脑的时候买了 Apple Care+ </p><p>本想换块新电池，结果死活卡在 80% - 82%，</p><p>当时店员就跟我说让我留意键盘问题，保修时间是<strong>4年</strong></p><span id="more"></span><h2 id="具体表现"><a href="#具体表现" class="headerlink" title="具体表现"></a>具体表现</h2><p>键盘的 N 按下去没反应，需要大力出奇迹才能打出字母，</p><blockquote><p>按照惯例，第一时间录下视频作为证据</p><p>这种问题很有可能会在第二天自动恢复，我这里就是，所以要留下证据，非常重要‼️</p></blockquote><h2 id="预约维修"><a href="#预约维修" class="headerlink" title="预约维修"></a>预约维修</h2><p>第一次出现问题时没太在意，就录了个视频也就没管，</p><p>好巧不巧，前几天晚上又遇到了，赶紧预约了第二天的天才吧。</p><h2 id="跟天才吧的天才交流"><a href="#跟天才吧的天才交流" class="headerlink" title="跟天才吧的天才交流"></a>跟天才吧的天才交流</h2><p>当天早上，问题又“自动修复”了😂，所以说录视频很重要‼️，</p><p>天才吧里的天才按了很久也没能成功复现，但是也没有因此说电脑没问题（不像某品牌那么傲慢），</p><p>最后是把 N 键拆开之后直接触碰触点复现了一个我从来没有遇到的问题😂</p><p><strong>我遇到的问题是：按下去没反应</strong></p><p><strong>他测试出来的是：按下去之后反应两下😂</strong></p><p><img src="/img/macbook-pro-keyboard-repair/diagnose.png" alt="不愧是天才"></p><p>既然这样，那就维修呗，<strong>更换了整个键盘总成和上壳套件</strong>。</p><blockquote><p>包括 键盘、Touch Bar、Touch ID、触控板、掌托一直到USB-C的外壳 以及 电池。</p></blockquote><p>约等于 <strong>换了半台新电脑</strong>，</p><p>后面就是签个字，跑个诊断，就欧了～</p><p><img src="/img/macbook-pro-keyboard-repair/price.png"></p><blockquote><p>我的整个更换的周期是1天半。</p><p>新换的套件都带 90 天保修。</p><p>也总算是给我换到电池了！满血复活！！</p></blockquote><h2 id="谈谈售后"><a href="#谈谈售后" class="headerlink" title="谈谈售后"></a>谈谈售后</h2><p>售后的目的就是让消费者放心的去使用自己购买的产品，</p><p>如果你有潜在的质量问题，给予客户这样的召回保修是很有必要的，</p><p>之前我的 Apple Pencil 出现了插在 iPad 上反向充电（越充越少）的问题，</p><p>在现场不能复现，但是我录了视频，确实有这样的问题，他们也依然给我做了更换，</p><p>就觉得苹果在这方面做的特别好，真真切切的帮助客户尝试解决问题（更换之后也确实是没再出现过这个情况了），</p><p>但是这绝对不是意味着可以这样子去骗保，这是我的底线。</p><p>最近也在各大平台上也看到了华为拒保 Pocket S 屏幕质量问题的案例，</p><p>很多人明明没有认为损坏，就是一点点掉漆都被认定为人为损坏拒保了，</p><p><del>只能说，割韭菜割的真爽…</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;还记得几年前苹果推出一项&lt;a href=&quot;https://support.apple.com/zh-cn/keyboard-service-program-for-mac-notebooks&quot;&gt;召回计划&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;所有使用了蝶式键盘的 MacBook 出现键盘问题都可以免费换键盘，&lt;/p&gt;
&lt;p&gt;当时买电脑的时候买了 Apple Care+ &lt;/p&gt;
&lt;p&gt;本想换块新电池，结果死活卡在 80% - 82%，&lt;/p&gt;
&lt;p&gt;当时店员就跟我说让我留意键盘问题，保修时间是&lt;strong&gt;4年&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Apple Store" scheme="https://liyanan2004.github.io/tags/Apple-Store/"/>
    
    <category term="Macbook Pro" scheme="https://liyanan2004.github.io/tags/Macbook-Pro/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 中的 Conditional Scene</title>
    <link href="https://liyanan2004.github.io/swiftui-conditional-scene/"/>
    <id>https://liyanan2004.github.io/swiftui-conditional-scene/</id>
    <published>2023-01-01T07:03:17.787Z</published>
    <updated>2023-01-01T07:05:27.761Z</updated>
    
    <content type="html"><![CDATA[<p>在 SwiftUI 中，有时需要对新的 API 做隔离来保证兼容老的系统。</p><p>在 View 中很好解决，但是在 Scene 中，你可能会看到这样的错误提示。</p><article class="message is-danger">                <div class="message-body">            <p>Closure containing control flow statement cannot be used with result builder ‘SceneBuilder’</p>        </div>    </article><span id="more"></span><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>解决方法就是把需要用条件判断给出不同的 Scene 的部分单独写成一个函数，</p><p>返回 <code>some Scene</code>，同时不要使用 <code>@SceneBuilder</code></p><blockquote><p><code>body</code> 中默认使用 <code>@SceneBuilder</code> 来支持多个 Scene</p><p>在 if-condition 中返回的可能是两个不同类型的 Scene，但是函数的返回值是<br>不透明的 <code>some Scene</code>，因此只要返回的内容是符合 Scene 协议的就可以。</p><p>可以参考我在 <a href="https://stackoverflow.com/a/74973406/20326422">stackoverflow</a> 上的回答</p></blockquote><p>最后，上代码！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">YourApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line">        <span class="comment">// macOS</span></span><br><span class="line">        conditionalWindowScene().windowStyle(.hiddenTitleBar)</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line">        <span class="comment">// Other Platform</span></span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line">    <span class="comment">/// Extract your conditional scene to avoid using `@SceneBuilder`</span></span><br><span class="line">    <span class="comment">/// In `body`, SwiftUI will always use `@SceneBuilder` to build multiple Scene.</span></span><br><span class="line">    <span class="comment">/// Because the result type is `some Scene`,</span></span><br><span class="line">    <span class="comment">/// you just need to return a type that conforms to `Scene` Protocol.</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">conditionalWindowScene</span>() -&gt; <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">macOS</span> <span class="number">13.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">            <span class="comment">/// `Window` Scene is only available on macOS 13.0+</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">Window</span>(<span class="string">&quot;App&quot;</span>, id: <span class="string">&quot;MAIN&quot;</span>) &#123;</span><br><span class="line">                <span class="type">ContentView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/// Otherwise, using `WindowGroup`</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">WindowGroup</span> &#123;</span><br><span class="line">                <span class="type">ContentView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 SwiftUI 中，有时需要对新的 API 做隔离来保证兼容老的系统。&lt;/p&gt;
&lt;p&gt;在 View 中很好解决，但是在 Scene 中，你可能会看到这样的错误提示。&lt;/p&gt;
&lt;article class=&quot;message is-danger&quot;&gt;
        
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;p&gt;Closure containing control flow statement cannot be used with result builder ‘SceneBuilder’&lt;/p&gt;

        &lt;/div&gt;
    &lt;/article&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>探索 Swift Concurrency (1)</title>
    <link href="https://liyanan2004.github.io/swift-concurrency/"/>
    <id>https://liyanan2004.github.io/swift-concurrency/</id>
    <published>2022-12-13T09:53:49.148Z</published>
    <updated>2022-12-13T14:05:58.258Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 并发是 WWDC 21 上的一个重磅改进，提供了 <code>async/await</code> 的语法，</p><p>让代码结构更加流程化，更加便于理解和调试。</p><p>官方指南：<a href="https://developer.apple.com/news/?id=o140tv24">开始使用 Swift 并发</a></p><p><img src="https://developer.apple.com/assets/elements/icons/swift/swift-64x64_2x.png"></p><span id="more"></span><h2 id="actor"><a href="#actor" class="headerlink" title="actor"></a>actor</h2><blockquote><p>WWDC Sessions：</p><p><a href="https://developer.apple.com/wwdc22/110351">利用  Swift 并发消除数据争用</a></p><p><a href="https://developer.apple.com/wwdc21/10133">利用 Swift Actor 保护可变状态</a></p></blockquote><p>actor 和 class 很相似，都是 Ref Type。</p><p>但是 Actor 保证了内部数据的唯一性，即一次只有一个函数能调用，</p><p><strong>如果有多个函数同时调用该属性，则需要排队</strong>。</p><p>保证了在并发环境下的数据竞争 (Data Races)。</p><p>其用法与 struct&#x2F;class 一致。</p><h2 id="Main-Actor"><a href="#Main-Actor" class="headerlink" title="Main Actor"></a>Main Actor</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10133">利用 Swift Actor 保护可变状态</a></p></blockquote><p>简单理解就是：主线程。</p><p>所有的 UI Updates 都需要在 Main Actor 环境下完成。</p><p>有以下几种写法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span> &#123; <span class="meta">@MainActor</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// UI Updates</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">updateUI</span>() &#123;</span><br><span class="line">    <span class="comment">// UI Updates</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span> &#123; </span><br><span class="line">    <span class="keyword">await</span> <span class="type">MainActor</span>.run &#123;</span><br><span class="line">        <span class="comment">// UI Updates</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> show <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetch</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data <span class="operator">=</span> <span class="operator">...</span></span><br><span class="line">        updateUI() <span class="comment">// Run on the MainActor because the whole class is in MainActor.</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUI</span>() &#123;</span><br><span class="line">        <span class="comment">// UI Updates</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-let"><a href="#async-let" class="headerlink" title="async let"></a>async let</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p></blockquote><p><code>async let</code> 可以让多个操作一起执行，到真正需要使用的时候再 <code>await</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fetchImage</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Fetching Image</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMetaData</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Fetching Meta Data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">let</span> image <span class="operator">=</span> fetchImage() <span class="comment">// Start fetching while the CPU is free.</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">let</span> metaData <span class="operator">=</span> fetchMetaData() <span class="comment">// The same as image.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Do other work...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the image and backup.</span></span><br><span class="line">display(<span class="keyword">await</span> image)</span><br><span class="line">backup(<span class="keyword">await</span> metaData) <span class="comment">// This is just an example...haha</span></span><br></pre></td></tr></table></figure><p>这个例子中，如果只用 <code>await</code>，image 和 metaData 会依次获取，在获取期间程序挂起 (Suspended)，不会继续向下执行。</p><p><strong>如果 image 的获取比较慢，那么就会卡在这里。</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fetchImage</span>() <span class="keyword">async</span> &#123; &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMetaData</span>() <span class="keyword">async</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> image <span class="operator">=</span> <span class="keyword">await</span> fetchImage() <span class="comment">// It&#x27;s stuck here.😅</span></span><br><span class="line"><span class="keyword">let</span> metaData <span class="operator">=</span> <span class="keyword">await</span> fetchMetaData() <span class="comment">// As well as here.😅</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Do other work...</span></span><br><span class="line"><span class="comment">// Because we were stuck before, so we waste a large amount of time.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the image and backup.</span></span><br><span class="line">display(image)</span><br><span class="line">backup(metaData) <span class="comment">// This is just an example...haha</span></span><br></pre></td></tr></table></figure><h2 id="Task-Group"><a href="#Task-Group" class="headerlink" title="Task Group"></a>Task Group</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p></blockquote><p>多个任务并发执行的时候可以使用 Task Group</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Throwing Task Group</span></span><br><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">Void</span>.<span class="keyword">self</span>) &#123; group <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> <span class="keyword">self</span>.tasks &#123;</span><br><span class="line">            group.addTask &#123;</span><br><span class="line">                <span class="keyword">try</span> <span class="keyword">await</span> <span class="operator">...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Non-Throwing Task Group</span></span><br><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">await</span> withTaskGroup(of: <span class="type">Void</span>.<span class="keyword">self</span>) &#123; group <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> <span class="keyword">self</span>.tasks &#123;</span><br><span class="line">            group.addTask &#123;</span><br><span class="line">                <span class="keyword">await</span> <span class="operator">...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TaskGroup</code> 常用在一组数据的处理，例如：获取所有商品的缩略图…</p><p>由于有很多 tasks 同时执行，因此就会有潜在的 Data Races</p><p>我们不能直接对外部的变量赋值（这是一个编译时检查错误）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> integers <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Throwing Task Group</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">foo</span>() &#123;</span><br><span class="line">    <span class="type">Task</span>.detached &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">Int</span>.<span class="keyword">self</span>) &#123; group <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">                group.addTask &#123;</span><br><span class="line">                   <span class="comment">// Return some values here.</span></span><br><span class="line">                    <span class="keyword">return</span> (<span class="number">0</span><span class="operator">...</span><span class="number">100</span>).randomElement()<span class="operator">!</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Read values from the group.</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> value <span class="keyword">in</span> group &#123;</span><br><span class="line">                <span class="keyword">self</span>.integers.append(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Non-Throwing Task Group</strong> 方法一致，这里就不再演示了。</p><blockquote><p>这里使用 <code>Task.detached</code> 是为了防止受到 Context 的影响，</p><p>例如：下载所有商品的缩略图应在其他线程上完成，而非主线程。</p><p>往下看就知道我在说什么了。</p></blockquote><h2 id="Task-vs-Task-detached"><a href="#Task-vs-Task-detached" class="headerlink" title="Task vs. Task.detached"></a>Task vs. Task.detached</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p><p>相关文章：<a href="https://www.hackingwithswift.com/quick-start/concurrency/whats-the-difference-between-a-task-and-a-detached-task">What’s the difference between a task and a detached task?</a></p></blockquote><p>Task 提供了一种 async 的环境来执行异步操作。</p><blockquote><p><strong>Task</strong>: Runs the given nonthrowing operation asynchronously as part of a new top-level task <strong>on behalf of the current actor</strong>.</p><p><strong>Task.detached</strong>: Runs the given throwing operation asynchronously as part of a <strong>new top-level</strong> task.</p></blockquote><p>Task 会继承当前的 Context 和 Priority，</p><p>Honestly，这句话我理解了很久，Priority好理解，但是 Context 是什么？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskManager1</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">doWorks</span>() &#123;</span><br><span class="line">        <span class="type">Task</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Execute on main thread: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Task</span>.detached &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;Execute on main thread: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskManager2</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">doWorks</span>() &#123;</span><br><span class="line">        <span class="type">Task</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Execute on main thread: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>诸如线程之类的属性就是所谓的 Context。</p><p>也就是说上层的运行环境会被继承到 Task 中来，如果不想要这种继承，使用 <code>Task.detached</code></p><p>需要注意的是，使用 <code>Task.detached</code> 需要显式捕获 <code>self</code>，即 <code>self.variable</code></p><h2 id="Task-ObservableObject"><a href="#Task-ObservableObject" class="headerlink" title="Task + ObservableObject"></a>Task + ObservableObject</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p><p>相关文章：<a href="https://www.hackingwithswift.com/quick-start/concurrency/whats-the-difference-between-a-task-and-a-detached-task">What’s the difference between a task and a detached task?</a></p></blockquote><p>在 SwiftUI 中，很多情况下我们会使用 <code>@ObservedObject</code> 或者 <code>@StateObject</code> 来管理 ViewModel</p><p>这时候，该视图就会在 <code>MainActor</code> 下执行。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 1: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Task</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 2: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，你会发现控制台中 Task 1 和 Task 2 仍然会按次序执行。</p><p>这是因为 <code>@ObservedObject</code> 或者 <code>@StateObject</code> 限制了视图运行在 MainActor 上，</p><p>所有的更新都发生在主线程，而 Task 会继承 Context，因此这时候可以使用 <code>Task.detached</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 1: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 2: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都换成 <code>Task.detached</code> 之后，Task 1&#x2F;2 就是一起执行了，也不会都挤在主线程上跑了。</p><h2 id="nonisolated"><a href="#nonisolated" class="headerlink" title="nonisolated"></a>nonisolated</h2><blockquote><p>相关文章：<a href="https://www.hackingwithswift.com/quick-start/concurrency/how-to-make-parts-of-an-actor-nonisolated">How to make parts of an actor nonisolated</a></p></blockquote><p>还记得最开始的 <strong><a href="#actor">actor</a></strong> 吧，</p><p>多个函数调用它的时候只有其中一个能执行，其余的等待上一个执行完成再进入，</p><p>这被称为隔离，很有效地避免了 Data Races</p><p>但是并非 actor 中所有的函数、属性都需要被隔离开。</p><ul><li>对 actor 扩展 Hashable 协议时，<code>hash(into hasher: inout Hasher)</code> 不支持 <code>async/await</code></li></ul><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10133?time=855">利用 Swift Actor 保护可变状态</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">MyHashableActor</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> staticValue <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> variable <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">MyHashableActor</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">MyHashableActor</span>, <span class="params">rhs</span>: <span class="type">MyHashableActor</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// Comforms to Equatable</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">nonisolated</span> <span class="keyword">func</span> <span class="title function_">hash</span>(<span class="params">into</span> <span class="params">hasher</span>: <span class="keyword">inout</span> <span class="type">Hasher</span>) &#123;</span><br><span class="line">        hasher.combine(staticValue)</span><br><span class="line">        hasher.combine(variable) <span class="comment">// 🙅</span></span><br><span class="line">     <span class="comment">// This is an error because variable is mutable</span></span><br><span class="line">      <span class="comment">// and the `hash(into hasher: inout Hasher)` is nonisolated.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>actor 内部的函数的其中一部分可以并发执行，充分利用多核性能。</li></ul><blockquote><p>WWDC Session： <a href="https://developer.apple.com/wwdc22/110350?time=1053">Swift 并发的可视化与优化</a> </p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">Compressor</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> state <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Since the function is nonisolated </span></span><br><span class="line">    <span class="comment">// and we still need to update the state,</span></span><br><span class="line">    <span class="comment">// so, the `compressFile()` funtion is marked `async`.</span></span><br><span class="line">    <span class="comment">// Now, the programme will only be blocked when updating the state.</span></span><br><span class="line">    <span class="keyword">nonisolated</span> <span class="keyword">func</span> <span class="title function_">compressFile</span>(<span class="keyword">_</span> <span class="params">file</span>: <span class="type">File</span>) <span class="keyword">async</span> -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> updateState() <span class="comment">// Blocked here to avoid Data races.</span></span><br><span class="line">        <span class="keyword">let</span> data <span class="operator">=</span> compress(file) <span class="comment">// This operation can be ran simultaneously.</span></span><br><span class="line">        <span class="keyword">await</span> updateState() <span class="comment">// Also blocked here to avoid Data races.</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateState</span>() &#123; state.toggle() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> compressor <span class="operator">=</span> <span class="type">Compressor</span>()</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files &#123;</span><br><span class="line">    <span class="type">Task</span>.detached &#123;</span><br><span class="line">        <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">await</span> <span class="keyword">self</span>.compressor.compressFile(file)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">compress</span>(<span class="keyword">_</span> <span class="params">file</span>: <span class="type">File</span>) -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">    <span class="comment">// Compress file.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行逻辑（个人理解）"><a href="#执行逻辑（个人理解）" class="headerlink" title="执行逻辑（个人理解）"></a>执行逻辑（个人理解）</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10254">Swift 并发功能：幕后故事</a></p></blockquote><ol><li><code>@MainActor</code> 中的 Task<ul><li>Task 中的操作均由 <strong>主线程</strong> 完成，继承 <code>MainActor</code></li><li>遇到 <code>await</code> 时， 程序被挂起，待执行的代码被迁移到其他线程（根据 priority 依次执行），主线程释放，供其他需要在主线程运行的代码继续。</li><li><code>await</code> 结果可用之后，仍呆在原地，等待主线程空闲，之后回到主线程，恢复之前的状态继续向下执行。</li></ul></li><li>非 <code>@MainActor</code> 中的 Task<ul><li>Task 中的操作均会在 <strong>其他线程</strong> 中完成，继承上层的 Context</li><li>后两点与上一条基本一致</li></ul></li><li><code>Task.detached</code> <ul><li>会创建一个新的线程来完成操作。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Swift 并发是 WWDC 21 上的一个重磅改进，提供了 &lt;code&gt;async/await&lt;/code&gt; 的语法，&lt;/p&gt;
&lt;p&gt;让代码结构更加流程化，更加便于理解和调试。&lt;/p&gt;
&lt;p&gt;官方指南：&lt;a href=&quot;https://developer.apple.com/news/?id=o140tv24&quot;&gt;开始使用 Swift 并发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/assets/elements/icons/swift/swift-64x64_2x.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="Concurrency" scheme="https://liyanan2004.github.io/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Google Chromium Encryption Structure</title>
    <link href="https://liyanan2004.github.io/chromium-encryption-structure/"/>
    <id>https://liyanan2004.github.io/chromium-encryption-structure/</id>
    <published>2022-12-06T05:13:26.262Z</published>
    <updated>2022-12-06T05:22:13.291Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-warning">                <div class="message-body">            <p>来源：<a href="https://gist.github.com/creachadair/937179894a24571ce9860e2475a2d2ec">GitHub</a>，仅供学习使用。</p>        </div>    </article><p>Google Chrome stores browser cookies in an SQLite database.  The database has two tables, <code>meta</code> containing format and version metadata, and <code>cookies</code> with the contents of the cookies. The <code>cookies</code> table uses this schema:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- To reproduce: sqlite path/to/Cookies .schema</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cookies (</span><br><span class="line">   creation_utc     <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- microseconds since epoch</span></span><br><span class="line">   host_key         TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- domain</span></span><br><span class="line">   name             TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">value</span>            TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   path             TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   expires_utc      <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- microseconds since epoch</span></span><br><span class="line">   is_secure        <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   is_httponly      <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   last_access_utc  <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   has_expires      <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">1</span>,</span><br><span class="line">   is_persistent    <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">1</span>,</span><br><span class="line">   priority         <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">1</span>,</span><br><span class="line">   encrypted_value  <span class="type">BLOB</span>              <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   samesite         <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">-1</span>,</span><br><span class="line">   source_scheme    <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">   <span class="keyword">UNIQUE</span> (host_key, name, path)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Timestamps"><a href="#Timestamps" class="headerlink" title="Timestamps"></a>Timestamps</h2><p>The <code>expires_utc</code> and <code>creation_utc</code> fields contain timestamps given as integer numbers of microseconds elapsed since midnight 01-Jan-1601 UTC in the proleptic calendar. The Unix epoch is 11644473600 seconds after this moment.</p><h2 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h2><p>The <code>value</code> and <code>encrypted_value</code> fields are used to store cookie values. In practice, one or the other is populated, but not both.</p><table><thead><tr><th><code>value</code></th><th><code>encrypted_value</code></th><th>Description</th></tr></thead><tbody><tr><td>empty</td><td>non-empty</td><td>Value is encrypted</td></tr><tr><td>non-empty</td><td>empty</td><td>Value is unencrypted</td></tr><tr><td>empty</td><td>empty</td><td>Value is unencrypted</td></tr><tr><td>non-empty</td><td>non-empty</td><td>(not observed)</td></tr></tbody></table><h2 id="Storage-Format"><a href="#Storage-Format" class="headerlink" title="Storage Format"></a>Storage Format</h2><p>An encrypted value consists of a data packet that is encrypted with AES-128 in CBC mode. The encrypted data packet has the following format:</p><table><thead><tr><th>Bytes</th><th>Content</th><th>Description</th></tr></thead><tbody><tr><td>3</td><td>“v10” (0x76 0x31 0x30)</td><td>Version tag (unencrypted)</td></tr><tr><td>n</td><td>value</td><td>Payload (encrypted)</td></tr><tr><td>p</td><td>padding</td><td>Padding (encrypted), 1–16 bytes</td></tr></tbody></table><p>The encrypted portion of the packet (n+ p) contains a multiple of 16 bytes. If n is a multiple of 16, p &#x3D; 16; otherwise 1 ≤ p ≤ 15.</p><h3 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h3><p>Before encryption, p bytes of padding are added to the plaintext value to ensure a multiple of 16 bytes. At least one byte of padding is always added, so if the value is already a multiple of 16 bytes, p&#x3D;16 additional are added. Each padding byte has the value p, so if p&#x3D;5, the padding is the 5-byte sequence [5, 5, 5, 5, 5].</p><p>After decryption, the padding must be removed, and it can be used to verify that the decryption key was correct. The final byte of the decrypted packet must be a padding byte with value 1 ≤ p ≤ 16, and the last p bytes of the packet must contain the value p. Otherwise, the decryption key can be assumed to be incorrect.</p><h3 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h3><p>Encryption and decryption are performed using AES-128 in cipher-block chaining (CBC) mode with an initialization vector consisting of 16 space bytes (Unicode 32). The encryption key is described below. </p><h2 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h2><p>The 16-byte AES-128 encryption key is generated using the <a href="https://tools.ietf.org/html/rfc2898">PBKDF2 (RFC 2898)</a> algorithm from a user-provided passphrase. The key generation salt is the fixed string <code>saltysalt</code>. On macOS, Chrome uses 1003 iterations of the key generation algorithm; on Linux it uses 1 iteration. I don’t know what it does on Windows.</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-warning&quot;&gt;
        
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;p&gt;来源：&lt;a href=&quot;https://gist.github.com/creachadair/937179894a24571ce9860e2475a2d2ec&quot;&gt;GitHub&lt;/a&gt;，仅供学习使用。&lt;/p&gt;

        &lt;/div&gt;
    &lt;/article&gt;

&lt;p&gt;Google Chrome stores browser cookies in an SQLite database.  The database has two tables, &lt;code&gt;meta&lt;/code&gt; containing format and version metadata, and &lt;code&gt;cookies&lt;/code&gt; with the contents of the cookies. The &lt;code&gt;cookies&lt;/code&gt; table uses this schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- To reproduce: sqlite path/to/Cookies .schema&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; cookies (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   creation_utc     &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;-- microseconds since epoch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   host_key         TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;-- domain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   name             TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;            TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   path             TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   expires_utc      &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;-- microseconds since epoch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   is_secure        &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   is_httponly      &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   last_access_utc  &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   has_expires      &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   is_persistent    &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   priority         &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   encrypted_value  &lt;span class=&quot;type&quot;&gt;BLOB&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   samesite         &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   source_scheme    &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; (host_key, name, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="网络安全" scheme="https://liyanan2004.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="浏览器" scheme="https://liyanan2004.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发 -- URL 访问权限持久化（基于 Sandbox）</title>
    <link href="https://liyanan2004.github.io/sandbox-url-persistence/"/>
    <id>https://liyanan2004.github.io/sandbox-url-persistence/</id>
    <published>2022-11-08T14:09:58.698Z</published>
    <updated>2022-11-08T15:25:47.598Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见，最近有在好好学习哈哈，</p><p>今天来分享下基于 Sandbox 的 URL 访问权限持久化的方案。</p><p>写这篇文章的起因是：</p><p>简单浏览了下 <strong><a href="https://github.com/Tencent/lemon-cleaner">Tencent&#x2F;lemon-cleaner</a></strong> 的部分源码，</p><p>发现他们用 Apple Script 调用 Finder 操作文件，</p><p>这样很好地避免了权限问题，但是研究一番发现，<strong>没那么简单</strong>….</p><span id="more"></span><h2 id="Bookmark-大法"><a href="#Bookmark-大法" class="headerlink" title="Bookmark 大法"></a>Bookmark 大法</h2><p>这是我自己项目里使用的方法，</p><p>好处在于文件操作很自然， 不会让用户觉得自己的数据可以被随便乱翻（事实也确实是这样的）</p><ol><li><p>将 App Sandbox –&gt; File Access 内的 <code>User Selected File</code> 改为 <code>Read/Write</code></p></li><li><p>在项目的 entitlements 文件中添加这样一项 <code>com.apple.security.files.bookmarks.app-scope</code>，设为 <code>YES</code></p></li><li><p>使用 NSOpenPannel &#x2F; NSSavePannel 选择需要访问的文件（夹）</p></li></ol><blockquote><p>在 SwiftUI 中直接用 .fileImporter 之类的 modifer 就行</p><p>这样就拿到了用户选择的 URL 啦，因为是用户选择的，<strong>目前这个 URL 是有权访问的</strong></p><p><strong>注意，是目前，重启 app 就不行了</strong></p><p>因此我们需要把权限持久化。</p></blockquote><ol start="4"><li>保存 URL 的 bookmark</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AppStorage</span>(<span class="string">&quot;bookmark&quot;</span>) <span class="keyword">private</span> <span class="keyword">var</span> bookmark: <span class="type">Data</span>?</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  bookmark <span class="operator">=</span> <span class="keyword">try</span> url.bookmarkData(options: .withSecurityScope)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123; </span><br><span class="line">  <span class="built_in">print</span>(error.localizedDescription) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>（app 重启后）再次访问此 URL</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> bookmark <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">var</span> isStale <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="keyword">try</span> <span class="type">URL</span>(resolvingBookmarkData: bookmark, options: .withSecurityScope, relativeTo: <span class="literal">nil</span>, bookmarkDataIsStale: <span class="operator">&amp;</span>isStale)</span><br><span class="line">url.startAccessingSecurityScopedResource()</span><br><span class="line"><span class="comment">// Do some file-related works like move, duplicate, etc.</span></span><br><span class="line"><span class="comment">// try? FileManager.default.moveItem(at: a, to: b)</span></span><br><span class="line">url.stopAccessingSecurityScopedResource()</span><br></pre></td></tr></table></figure><blockquote><p><strong>start 和 stop 一定要成对！！</strong></p><p>这里属于是访问系统敏感数据，如果不及时 stop 的话系统可能会对 app 的权限做限制，</p><p>因此不能滥用，这就是 Sandbox 为什么安全、让人放心的原因了。</p><p><code>url.startAccessingSecurityScopedResource()</code> 也会返回一个布尔值，告诉你你是否真的可以这里的数据了，如果为 <code>true</code> 才能算成功。</p></blockquote><h2 id="Apple-Script-大法"><a href="#Apple-Script-大法" class="headerlink" title="Apple Script 大法"></a>Apple Script 大法</h2><p>Apple Script 实际上是代替用户操作的一种脚本，本质上是代替了手动的操作而已，因此这里可以操作所有文件了，在沙盒环境下当然是不会默认允许的。</p><blockquote><p>如果启用了 Hardened Runtime，要先在里面启用 Apple Events，否则无法弹出请求框。</p></blockquote><h3 id="非-Sandbox"><a href="#非-Sandbox" class="headerlink" title="非 Sandbox"></a>非 Sandbox</h3><p>如果在 非 Sandbox 环境下，只需要配置 <code>Privacy - AppleEvents Sending Usage Description</code> 告诉用户你执行的脚本的功能是干啥的就行。</p><p>然后就可以任意调用 applications了，例如，调用 Finder 来 move 文件之类的。</p><p>别慌！即使是非 Sandbox 也会有一步“自动化”授权的！</p><p><img src="/img/sandbox-url-persistence/automation-permission.png"></p><h3 id="Sandbox"><a href="#Sandbox" class="headerlink" title="Sandbox"></a>Sandbox</h3><p>在 Sandbox 环境下就会有限制了，不会让你能直接访问所有的 applications ，因为这可能会有潜在的恶意行为。</p><ol><li><p>你还是得配置 <code>Privacy - AppleEvents Sending Usage Description</code> 告诉用户你执行的脚本的功能是干啥的，</p></li><li><p>你在需要使用对应的 applications 之前需要去 entitlements 里提前声明。（用到几个写几个）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.temporary-exception.apple-events<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.Finder<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样你就可以在 app 中使用 NSAppleScript 执行脚本了。</p><p><strong>否则，会报错 -600</strong></p><p><strong>因为是模拟用户操作的脚本，因此在移动文件、删除文件的时候都会有系统提示音哦～</strong></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>目前我的项目中还是使用了 Bookmark 大法，更加简单，不会让用户觉得危险。</p><p>主要是 Apple Script 那些弹窗就蛮吓人了…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久不见，最近有在好好学习哈哈，&lt;/p&gt;
&lt;p&gt;今天来分享下基于 Sandbox 的 URL 访问权限持久化的方案。&lt;/p&gt;
&lt;p&gt;写这篇文章的起因是：&lt;/p&gt;
&lt;p&gt;简单浏览了下 &lt;strong&gt;&lt;a href=&quot;https://github.com/Tencent/lemon-cleaner&quot;&gt;Tencent&amp;#x2F;lemon-cleaner&lt;/a&gt;&lt;/strong&gt; 的部分源码，&lt;/p&gt;
&lt;p&gt;发现他们用 Apple Script 调用 Finder 操作文件，&lt;/p&gt;
&lt;p&gt;这样很好地避免了权限问题，但是研究一番发现，&lt;strong&gt;没那么简单&lt;/strong&gt;….&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="Sandbox" scheme="https://liyanan2004.github.io/tags/Sandbox/"/>
    
    <category term="macOS" scheme="https://liyanan2004.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>记录下 MarkdownView 的性能优化</title>
    <link href="https://liyanan2004.github.io/markdownview-performance-optimization/"/>
    <id>https://liyanan2004.github.io/markdownview-performance-optimization/</id>
    <published>2022-10-16T14:03:33.656Z</published>
    <updated>2023-01-01T07:08:06.232Z</updated>
    
    <content type="html"><![CDATA[<p>我的开源项目 MarkdownView 的 <strong><a href="https://github.com/LiYanan2004/MarkdownView/releases/tag/0.2.0">0.2.0 版本</a></strong> 终于发布了！</p><p>改版本带来了性能上的巨大进步：</p><blockquote><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><ul><li>Rendering is now <strong>at least 3x faster on ALL DEVICES</strong>.</li><li>Real-time previewing is now much much smoother.</li><li>Scrolling is much quicker and smoother <strong>with no frame drop</strong>.</li><li>Memory usage has been reduced by 30%</li></ul></blockquote><p>借此机会，记录下我的优化思路。</p><span id="more"></span><h2 id="前期表现"><a href="#前期表现" class="headerlink" title="前期表现"></a>前期表现</h2><ul><li>启动、初次渲染耗时长</li><li>渲染完成后上下滚动的时候掉帧严重（使用懒加载模式）</li><li>渲染完成后上下滚动的时候内存占用量太大了（关闭了懒加载模式）</li><li>用作“实时预览”的时候会卡，导致输入体验很糟糕</li></ul><p>综合以上表现，新功能部分也已经定型了，所以决定好好优化下性能，</p><p>至少在我这台 2019 款的 MacBook Pro 上不要有明显的卡顿吧…</p><h2 id="渲染性能优化"><a href="#渲染性能优化" class="headerlink" title="渲染性能优化"></a>渲染性能优化</h2><h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>我想先来介绍下 MarkdownView 的整套渲染流程，</p><p>如图所示：</p><p><img src="/img/markdownview-performance-optimization/how-to-render.jpeg"></p><p>本来以为是<del>在最后整合的时候 Layout 反复运算导致速度慢</del>，</p><p>最后我用我第一篇博客测试了下，启动渲染居然需要 20s，</p><p>属于是完全卡住的感觉，在 Xcode 中能看到 CPU 占用持续在 100% 左右，</p><p>最后定位到 <strong>分词模块</strong> 耗费了大量 CPU 时间，</p><p>这就是优化的重点了！！</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>分词模块的作用是保证文本都能以很短的形式呈现，</p><p>用于实现<strong>合理的</strong>自动换行，</p><p>但是分词模块依赖 Natural Language 框架进行分词，</p><p>本质上就是机器学习的分词，需要时间来完成，</p><p>同时所有的代码都是 <strong>同步执行（sync）</strong> 的，</p><p>上一个结束了才会执行下一个，</p><p>段落一多，大量的时间都被浪费在一段段分词了。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li><strong>异步执行（async）</strong>所有的分词操作，这样可以<strong>让所有段落的分词同时开始</strong></li></ul><p><img src="/img/markdownview-performance-optimization/sync-and-async-clocks.jpeg"></p><ul><li>文本渲染使用单独的 <code>TextView</code> 来渲染，<strong>默认显示空白等待分词结束后自动排版</strong></li></ul><p>还是用我的第一篇博客作为测试，加载速度从 20s 缩短到了 1s，内存占用也下降了 20%。</p><p><strong>这也是我为什么会在新版中弃用 懒加载 (Lazy Loading) 的主要原因。</strong></p><h2 id="实时预览性能优化"><a href="#实时预览性能优化" class="headerlink" title="实时预览性能优化"></a>实时预览性能优化</h2><h3 id="定位问题-1"><a href="#定位问题-1" class="headerlink" title="定位问题"></a>定位问题</h3><p>这里的问题具体表现在当我连续输入文本的时候，</p><p>CPU占用高，并且伴随 <strong>输入框</strong> 也很卡顿。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>接着上面的思路，</p><p>每次有微小变动的时候，MarkdownView 都会重新走整套流程，</p><p>本以为是异步处理得过于频繁导致卡顿，</p><p><del>于是就用Combine做了debounce处理，<strong>在输入间隙执行重新渲染</strong>，</del></p><p>问题没有解决，</p><p>而且，中文输入就没有问题，</p><p>重新考虑了下 渲染流程 和 SwiftUI 刷新机制，</p><p>每次有变动的时候，都要重新进入解析流程，</p><h4 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h4><p>不论是多打一个字母或是删除一个字母，都会重解析，</p><h4 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h4><p>输入拼音时本质上还没有让文本改变，不会重解析，</p><p>只有拼音转成文本之后，统一进行一次重解析，</p><p>So，</p><p>在英文状态下，过于频繁的重解析是导致卡顿的“罪魁祸首”。</p><h3 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li>对于一开始的文本输入做 debounce 处理，<strong>在输入间隙执行重解析、重渲染</strong>。</li></ul><p>这样一来，在连续输入字符的时候不会每一次都执行重新解析和渲染，</p><p>只有在我输入时的停顿处，才会刷新整个文档，执行一次重渲染，</p><p>这样既保证了预览的实时性，也提升了整体性能。</p><blockquote><h4 id="做了debounce延迟，怎么保证预览的实时性？"><a href="#做了debounce延迟，怎么保证预览的实时性？" class="headerlink" title="做了debounce延迟，怎么保证预览的实时性？"></a><strong>做了debounce延迟，怎么保证预览的实时性？</strong></h4><p>在真正地连续快速输入的情况下，是不会去看预览的</p><p>但凡少许停顿了下（0.3s），MarkdownView就已经自动刷新完成了</p><p>避免了在快速输入时，频繁地做无用的刷新</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在开发过程中，需要注意：</p><p>对于一些比较耗时的部分（比如：下载、大量机器学习预测…）使用异步（async）来完成，</p><p>在 UI 出现问题时，关注下 UI 是如何刷新的，</p><p>看看是不是有过多繁杂的任务，</p><p>重新思考下现实中的逻辑，可以试着降低他们的优先级，</p><p>浓缩一下就是：<strong>主线程（main thread）不要有过多连续繁杂且无用的运算！！</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的开源项目 MarkdownView 的 &lt;strong&gt;&lt;a href=&quot;https://github.com/LiYanan2004/MarkdownView/releases/tag/0.2.0&quot;&gt;0.2.0 版本&lt;/a&gt;&lt;/strong&gt; 终于发布了！&lt;/p&gt;
&lt;p&gt;改版本带来了性能上的巨大进步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;Performance&quot;&gt;&lt;a href=&quot;#Performance&quot; class=&quot;headerlink&quot; title=&quot;Performance&quot;&gt;&lt;/a&gt;Performance&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Rendering is now &lt;strong&gt;at least 3x faster on ALL DEVICES&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Real-time previewing is now much much smoother.&lt;/li&gt;
&lt;li&gt;Scrolling is much quicker and smoother &lt;strong&gt;with no frame drop&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Memory usage has been reduced by 30%&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;借此机会，记录下我的优化思路。&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="代码调优" scheme="https://liyanan2004.github.io/tags/%E4%BB%A3%E7%A0%81%E8%B0%83%E4%BC%98/"/>
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>ASCII码对应关系</title>
    <link href="https://liyanan2004.github.io/ascii/"/>
    <id>https://liyanan2004.github.io/ascii/</id>
    <published>2022-10-14T02:48:55.883Z</published>
    <updated>2022-10-14T03:02:58.280Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-warning">        <div class="message-header"><p>版权声明</p></div>        <div class="message-body">            <p>图片来源于<a href="https://baike.baidu.com/item/ASCII/309296">百度百科</a></p>        </div>    </article><p><img src="/img/ascii/table.jpeg"></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>大小写转换 <strong>±32</strong></li><li>A-Z &lt; a-z</li><li>字母范围：65-90，97-122</li><li>数字范围：48-57</li><li>“A”为65；“a”为97；“0”为 48</li><li><strong>ASCII 可输出 %d（字符的 ASCII 码的十进制数），也可输出 %c（对应的字符）。</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;article class=&quot;message is-warning&quot;&gt;
        &lt;div class=&quot;message-header&quot;&gt;&lt;p&gt;版权声明&lt;/p&gt;
&lt;/div&gt;
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;</summary>
      
    
    
    
    <category term="学个习" scheme="https://liyanan2004.github.io/categories/%E5%AD%A6%E4%B8%AA%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言 之 格式化输出</title>
    <link href="https://liyanan2004.github.io/formatted-output-in-c-programming-language/"/>
    <id>https://liyanan2004.github.io/formatted-output-in-c-programming-language/</id>
    <published>2022-10-08T13:34:26.173Z</published>
    <updated>2022-10-12T02:56:08.343Z</updated>
    
    <content type="html"><![CDATA[<p>前两天上课的时候，老师让输出个九九乘法表。</p><p>但是实际输出会觉得怪怪的，没对齐，尝试下对齐吧。</p><p>这样也不是不行是吧，哈哈。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1x1=1&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2x1=2 2x2= 4&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3x1=3 3x2= 6 3x3= 9&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4x1=4 4x2= 8 4x3=12 4x4=16&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5x1=5 5x2=10 5x3=15 5x4=20 5x5=25&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6x1=6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=36&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;7x1=7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=49&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;8x1=8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=64&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;9x1=9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81&quot;</span>);</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="没对齐的版本"><a href="#没对齐的版本" class="headerlink" title="没对齐的版本"></a>没对齐的版本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对占位符格式化输出"><a href="#对占位符格式化输出" class="headerlink" title="对占位符格式化输出"></a>对占位符格式化输出</h2><p>就用乘法表作为例子，</p><p>输出的是 Int（%d），</p><p>需要对一位数的结果进行扩展，让它能够<strong>对齐下面的两位数数字</strong>。</p><p><strong>格式化输出格式：</strong>% (-&#x2F;0) [位宽 n] . [精度 m] d</p><article class="message is-warning">                <div class="message-body">            <p>格式中我增加了空格，方便阅读，<strong>实际代码中不能有空格哦</strong>。</p>        </div>    </article><p><strong>解释一下：</strong></p><p>位宽 n：输出的内容占命令行的 n 个字符宽度，比如：[4]（n&#x3D;1），[ 4]（n&#x3D;2）</p><p>精度m：小数点后保留几位（貌似默认是 6 好像），比如 <code>printf(&quot;%.2f&quot;, 3.1415);</code> 输出的是3.14</p><p>-&#x2F;0：这一部分是对自定义格式的一个补充。</p><ul><li><p>‘-‘：靠左输出（方括号并非输出内容，只是方便看到空格哈）</p><ul><li><code>printf(&quot;%-2d, 1&quot;);</code> 输出的是：[1 ]</li><li><code>printf(&quot;%2d, 1&quot;);</code> 输出的是：[ 1]</li></ul></li><li><p>‘0’：<strong>左侧</strong>补0⃣️</p><ul><li><code>printf(&quot;%02d, 1&quot;);</code> 输出的是：01</li></ul></li><li><p>-&#x2F;0 <strong>只能用一个</strong>，其中（靠左输出’-‘）的优先级更高，所以 <code>printf(&quot;%-02d&quot;, 1);</code> 输出的是 [1 ]</p></li></ul><article class="message is-primary">                <div class="message-body">            <p>%d 就没有必要设置精度了哈，三个格式化可以独立使用，但是要设置精度的话记得加上 <strong>Dot（.）</strong> 哦！</p><p>比如：</p><ul><li><code>%-2d</code></li><li><code>%05d</code></li><li><code>%.3f</code></li><li><code>%-5.2f</code></li><li>…</li></ul><p>可以在电脑上试试看这些的输出，更好地理解下。</p>        </div>    </article><h2 id="改进后的版本"><a href="#改进后的版本" class="headerlink" title="改进后的版本"></a>改进后的版本</h2><ol><li>靠右对齐：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%2d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>输出结果</p></div>        <div class="message-body">            <p>1x1&#x3D; 1<br>2x1&#x3D; 2 2x2&#x3D; 4<br>3x1&#x3D; 3 3x2&#x3D; 6 3x3&#x3D; 9<br>4x1&#x3D; 4 4x2&#x3D; 8 4x3&#x3D;12 4x4&#x3D;16<br>5x1&#x3D; 5 5x2&#x3D;10 5x3&#x3D;15 5x4&#x3D;20 5x5&#x3D;25<br>6x1&#x3D; 6 6x2&#x3D;12 6x3&#x3D;18 6x4&#x3D;24 6x5&#x3D;30 6x6&#x3D;36<br>7x1&#x3D; 7 7x2&#x3D;14 7x3&#x3D;21 7x4&#x3D;28 7x5&#x3D;35 7x6&#x3D;42 7x7&#x3D;49<br>8x1&#x3D; 8 8x2&#x3D;16 8x3&#x3D;24 8x4&#x3D;32 8x5&#x3D;40 8x6&#x3D;48 8x7&#x3D;56 8x8&#x3D;64<br>9x1&#x3D; 9 9x2&#x3D;18 9x3&#x3D;27 9x4&#x3D;36 9x5&#x3D;45 9x6&#x3D;54 9x7&#x3D;63 9x8&#x3D;72 9x9&#x3D;81 </p>        </div>    </article><ol start="2"><li>补零版本：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%02d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>输出结果</p></div>        <div class="message-body">            <p>1x1&#x3D;01<br>2x1&#x3D;02 2x2&#x3D;04<br>3x1&#x3D;03 3x2&#x3D;06 3x3&#x3D;09<br>4x1&#x3D;04 4x2&#x3D;08 4x3&#x3D;12 4x4&#x3D;16<br>5x1&#x3D;05 5x2&#x3D;10 5x3&#x3D;15 5x4&#x3D;20 5x5&#x3D;25<br>6x1&#x3D;06 6x2&#x3D;12 6x3&#x3D;18 6x4&#x3D;24 6x5&#x3D;30 6x6&#x3D;36<br>7x1&#x3D;07 7x2&#x3D;14 7x3&#x3D;21 7x4&#x3D;28 7x5&#x3D;35 7x6&#x3D;42 7x7&#x3D;49<br>8x1&#x3D;08 8x2&#x3D;16 8x3&#x3D;24 8x4&#x3D;32 8x5&#x3D;40 8x6&#x3D;48 8x7&#x3D;56 8x8&#x3D;64<br>9x1&#x3D;09 9x2&#x3D;18 9x3&#x3D;27 9x4&#x3D;36 9x5&#x3D;45 9x6&#x3D;54 9x7&#x3D;63 9x8&#x3D;72 9x9&#x3D;81 </p>        </div>    </article><ol start="3"><li>靠左对齐：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%-2d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>输出结果</p></div>        <div class="message-body">            <p>1x1&#x3D;1<br>2x1&#x3D;2   2x2&#x3D;4<br>3x1&#x3D;3   3x2&#x3D;6   3x3&#x3D;9<br>4x1&#x3D;4   4x2&#x3D;8   4x3&#x3D;12 4x4&#x3D;16<br>5x1&#x3D;5   5x2&#x3D;10 5x3&#x3D;15 5x4&#x3D;20 5x5&#x3D;25<br>6x1&#x3D;6   6x2&#x3D;12 6x3&#x3D;18 6x4&#x3D;24 6x5&#x3D;30 6x6&#x3D;36<br>7x1&#x3D;7   7x2&#x3D;14 7x3&#x3D;21 7x4&#x3D;28 7x5&#x3D;35 7x6&#x3D;42 7x7&#x3D;49<br>8x1&#x3D;8   8x2&#x3D;16 8x3&#x3D;24 8x4&#x3D;32 8x5&#x3D;40 8x6&#x3D;48 8x7&#x3D;56 8x8&#x3D;64<br>9x1&#x3D;9   9x2&#x3D;18 9x3&#x3D;27 9x4&#x3D;36 9x5&#x3D;45 9x6&#x3D;54 9x7&#x3D;63 9x8&#x3D;72 9x9&#x3D;81 </p>        </div>    </article>]]></content>
    
    
    <summary type="html">&lt;p&gt;前两天上课的时候，老师让输出个九九乘法表。&lt;/p&gt;
&lt;p&gt;但是实际输出会觉得怪怪的，没对齐，尝试下对齐吧。&lt;/p&gt;
&lt;p&gt;这样也不是不行是吧，哈哈。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;1x1=1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;2x1=2 2x2= 4&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;3x1=3 3x2= 6 3x3= 9&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;4x1=4 4x2= 8 4x3=12 4x4=16&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;5x1=5 5x2=10 5x3=15 5x4=20 5x5=25&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;6x1=6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=36&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;7x1=7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=49&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;8x1=8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=64&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;9x1=9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学个习" scheme="https://liyanan2004.github.io/categories/%E5%AD%A6%E4%B8%AA%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://liyanan2004.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="写代码" scheme="https://liyanan2004.github.io/tags/%E5%86%99%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>JsDelivr不灵了？淦！</title>
    <link href="https://liyanan2004.github.io/jsdelivr-can-no-longer-accelerate-static-resources/"/>
    <id>https://liyanan2004.github.io/jsdelivr-can-no-longer-accelerate-static-resources/</id>
    <published>2022-10-05T07:03:05.022Z</published>
    <updated>2022-10-11T11:40:15.164Z</updated>
    
    <content type="html"><![CDATA[<p>还记得几年前做博客的时候，</p><p>图片上传到 GitHub 上，</p><p>用 JsDelivr 拉取 GitHub 上的静态资源，</p><p>速度嘎嘎快，</p><p>但是最近发现，</p><p>静态资源貌似都被重定向到 githubusercontent 上去了，</p><p><strong>可是，官网上却写着：</strong></p><p><img src="/img/jsdelivr-can-no-longer-accelerate-static-resources/important-in-china.jpeg"></p><span id="more"></span><h2 id="DNS-被污染"><a href="#DNS-被污染" class="headerlink" title="DNS 被污染"></a>DNS 被污染</h2><p>GitHub 上的 issue：</p><blockquote><p>Jsdelivr has been block again in China. Some places are polluted by DNS and are resolved to the IP of websites such as Facebook, Twitter, etc. Although other places can be resolved to the correct IP, they are reset by GWF during the TLS handshake and still inaccessible.<br>But fortunately, <code>fastly.jsdelivr.net</code> is not polluted at present.</p></blockquote><p>至于原因，</p><p>估计是某些人把非法的东西挂到 GitHub 上面去分享，</p><p>用 JsDelivr 去正常访问，</p><p>钻空子别发现了 哈哈。</p><article class="message is-success">                <div class="message-body">            <p>不过好在 DNS 污染已经被解决，但是在大陆地区也增加了许多限制了，来保证不会再次被污染。</p>        </div>    </article><h2 id="有什么影响？"><a href="#有什么影响？" class="headerlink" title="有什么影响？"></a>有什么影响？</h2><p><strong>DNS解析</strong>现在已经恢复正常，</p><p>但是国内的 ICP 应该是不可能恢复了，</p><p>JsDelivr 也不再提供 <strong>中国大陆地区</strong> 的 GitHub 静态资源的加速，（JS CSS 类文件除外）</p><p>所以博客内的图片也只能从 GitHub 拉取了，</p><p>导致<strong>网站加载时间可能会略长</strong>。</p><article class="message is-warning">        <div class="message-header"><p>6月份的时候国内静态资源已经不给访问了</p></div>        <div class="message-body">            <p>中国仅此一家合法的公共 CDN 就这么被限制了。</p><p>ICP也被吊销了。</p><p>淦！！ </p>        </div>    </article><article class="message is-dark">        <div class="message-header"><p>怎么办呢？</p></div>        <div class="message-body">            <p>我也在寻找更优的解决方案来加速页面加载。</p><p>后续可能考虑从 GitHub 转到国内的 Gitee</p>        </div>    </article>]]></content>
    
    
    <summary type="html">&lt;p&gt;还记得几年前做博客的时候，&lt;/p&gt;
&lt;p&gt;图片上传到 GitHub 上，&lt;/p&gt;
&lt;p&gt;用 JsDelivr 拉取 GitHub 上的静态资源，&lt;/p&gt;
&lt;p&gt;速度嘎嘎快，&lt;/p&gt;
&lt;p&gt;但是最近发现，&lt;/p&gt;
&lt;p&gt;静态资源貌似都被重定向到 githubusercontent 上去了，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可是，官网上却写着：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/jsdelivr-can-no-longer-accelerate-static-resources/important-in-china.jpeg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="吐个槽" scheme="https://liyanan2004.github.io/categories/%E5%90%90%E4%B8%AA%E6%A7%BD/"/>
    
    
    <category term="CDN" scheme="https://liyanan2004.github.io/tags/CDN/"/>
    
    <category term="JS" scheme="https://liyanan2004.github.io/tags/JS/"/>
    
    <category term="Web" scheme="https://liyanan2004.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>新手表居然就卡bug？watchOS 9 太拉了...</title>
    <link href="https://liyanan2004.github.io/apple-watch-series-8-mic-failed/"/>
    <id>https://liyanan2004.github.io/apple-watch-series-8-mic-failed/</id>
    <published>2022-10-03T08:47:08.200Z</published>
    <updated>2022-10-12T14:18:21.445Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-success">                <div class="message-body">            <p>此问题已在 watchOS 9.0.2 中修复。</p>        </div>    </article><p>如图</p><p><img src="/img/apple-watch-series-8-mic-failed/mic-failed.jpeg"></p><span id="more"></span><h2 id="高高兴兴地开箱"><a href="#高高兴兴地开箱" class="headerlink" title="高高兴兴地开箱"></a>高高兴兴地开箱</h2><iframe src="//player.bilibili.com/player.html?aid=688692484&bvid=BV1924y1X7K3&cid=851355605&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p>你还可以：<a href="https://www.bilibili.com/video/BV1924y1X7K3?share_source=copy_web&vd_source=c883b3d27d636e08e40154e6f636d504"><strong>在B站观看</strong></a></p><hr><h2 id="麦克风开始抽风"><a href="#麦克风开始抽风" class="headerlink" title="麦克风开始抽风"></a>麦克风开始抽风</h2><p>刚刚激活，就…</p><p><img src="/img/apple-watch-series-8-mic-failed/mic-bug-wechat.jpeg" alt="刚激活就失灵了一次"></p><p>又陆陆续续失灵了几次，<strong>重启都能解决</strong>…</p><p><strong>发了条微博：<a href="https://weibo.com/6341527351/M6sL4c4RH">麦克风失灵</a></strong></p><p>评论来看，也有问题…</p><p><img src="/img/apple-watch-series-8-mic-failed/mic-bug-weibo-comments.jpeg"></p><p><strong>在论坛里也找到了一样的问题：<a href="https://discussionschinese.apple.com/thread/254207265?page=2">iwatch s8 麦克风高频率拾音故障</a></strong></p><blockquote><p><strong>吐槽下，iWatch是什么东西…懂，但是没有这个名字</strong></p></blockquote><hr><h2 id="复现问题-amp-amp-反馈问题"><a href="#复现问题-amp-amp-反馈问题" class="headerlink" title="复现问题 &amp;&amp; 反馈问题"></a>复现问题 &amp;&amp; 反馈问题</h2><p>觉得像是软件的 bug</p><p>打了个 400 电话，让我重新配对，</p><p><strong>肯定是没效果的啦！</strong></p><p>但是，</p><p>我感觉像是<strong>噪声</strong>app的环境音量检测出 bug 了，关掉之后，确实<em><strong>缓解了</strong></em>。</p><p>解决了，但是没有完全解决。</p><p>好在，</p><p>又发现了一个不用重启的解决方案，</p><p>放充电器上充会儿电就好了。</p><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>目前为止有<strong>三种解决方案</strong>，再来梳理一下：</p><ul><li>重启 Apple Watch（只能短暂解决，后续还可能会出现相同的问题，需要再次重启）</li><li>关闭噪声app中的环境音量测量（在watch设置-噪声中） </li><li>出现该问题时，将手表放到充电器上充电5分钟，可以恢复</li></ul><p>其中，第一种只能<strong>短暂地解决该问题</strong>，第二种能<strong>缓解该问题</strong>，第三种也<strong>只能作为一种补救措施</strong>。</p><p>我的建议是：<strong>第二第三种搭配使用</strong>。</p><p><em><strong>苹果那边已经反馈过去了</strong></em>，正在等待 watchOS 9.0.1或者 watchOS 9.1解决这个问题。</p><blockquote><p>奇怪的是，</p><p>用第二种关闭了环境音量检测后，仍然可以在健康app里查看到环境噪声分贝的信息，</p><p>而且数据还是手表提供的</p><p><img src="/img/apple-watch-series-8-mic-failed/noise-disabled-health-app.jpeg" alt="绝对是Bug"></p></blockquote><p><del>真垃圾！</del></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>貌似苹果确认了 <a href="http://www.sycaijing.com/news/flash?id=125464">确认了这个问题的存在</a>，</p><p><del>但是不知道能不能找到问题的原因，</del></p><p><del>这决定了最终能不能修复这个bug。</del></p><article class="message is-success">        <div class="message-header"><p>2022.10.11</p></div>        <div class="message-body">            <p>watchOS 9.0.2 更新日志中写道：<strong>修复了部分 Apple Watch Series 8 和 Ultra 用户的麦克风音频中断的问题</strong></p><p>经过测试，重新打开“环境音量检测”后一整天都没再出现此问题了</p>        </div>    </article><p><img src="/img/apple-watch-series-8-mic-failed/bug-fixed.jpeg" alt="watchOS 9.0.2"></p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-success&quot;&gt;
        
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;p&gt;此问题已在 watchOS 9.0.2 中修复。&lt;/p&gt;

        &lt;/div&gt;
    &lt;/article&gt;

&lt;p&gt;如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/apple-watch-series-8-mic-failed/mic-failed.jpeg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="吐个槽" scheme="https://liyanan2004.github.io/categories/%E5%90%90%E4%B8%AA%E6%A7%BD/"/>
    
    
    <category term="bug" scheme="https://liyanan2004.github.io/tags/bug/"/>
    
    <category term="watchOS" scheme="https://liyanan2004.github.io/tags/watchOS/"/>
    
    <category term="Apple Watch" scheme="https://liyanan2004.github.io/tags/Apple-Watch/"/>
    
  </entry>
  
  <entry>
    <title>就爱在网上BB？IP直接拿捏你</title>
    <link href="https://liyanan2004.github.io/ip-locate/"/>
    <id>https://liyanan2004.github.io/ip-locate/</id>
    <published>2022-09-30T14:51:30.469Z</published>
    <updated>2022-10-11T11:40:31.467Z</updated>
    
    <content type="html"><![CDATA[<p>发生在高中同学身上的真实事件。</p><p>这年头还有人喜欢在互联网上平白无故地造谣的嘛？</p><p>还是一个高中的，</p><p>表面看看还真不觉得…</p><p>实际上做着下三滥的事情。</p><p>一会儿立信一会儿🐔大。</p><p>害。</p><p><img src="/img/ip-locate/lache.jpeg"></p><span id="more"></span><hr><h2 id="一些经过"><a href="#一些经过" class="headerlink" title="一些经过"></a>一些经过</h2><p>言归正传。</p><p>先简单捋一下经过哈。</p><p>在用小号跟她“了解”情况过后，也要到了QQ，应该是小号，确定了两名“嫌疑人”，</p><p>分别在衫达（嘉善校区）和上海建桥学院，</p><p>但是也没有找到别的证据能很好的判断是谁。</p><p>好就好在一个开学了一个没开，两所学校的大致距离（一公里的那个圈）相差蛮远的。</p><p>脑中浮现出一个想法，IP能定位吗？</p><p>答案是，可以，而且还蛮准。</p><hr><h2 id="所需准备"><a href="#所需准备" class="headerlink" title="所需准备"></a>所需准备</h2><ol><li>一个合理的理由（要点开才能获取到IP然后上传，对吧？）</li><li>后端结构化数据存储服务器（用来存接收到的IP）</li><li>一个域名（用来配置服务器，免费的就行）</li><li>一些JS的基础（要写一个网页的嘛～）</li></ol><h2 id="后端存储服务器"><a href="#后端存储服务器" class="headerlink" title="后端存储服务器"></a>后端存储服务器</h2><p>之前做博客的时候用过Leancloud做评论系统，</p><p>后续这个新博客的评论系统也将基于 Leancloud。</p><p>这次用的是Leancloud国际版。</p><p>至于为什么是国际版后面会说。</p><h2 id="IP获取"><a href="#IP获取" class="headerlink" title="IP获取"></a>IP获取</h2><p>用的是搜狐开放的script嵌入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://pv.sohu.com/cityjson?ie=utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ip_address = returnCitySN[<span class="string">&quot;cip&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="数据上传"><a href="#数据上传" class="headerlink" title="数据上传"></a>数据上传</h2><p>这部分在 Leancloud 的技术文档里写的很明白，</p><p>我这个需求其实就是把获取到的IP地址字符串上传到 Leancloud 结构化存储中，</p><p>稍微改下实例代码就行。</p><p>具体不多赘述，想要了解的可以看<a href="https://leancloud.cn/docs/leanstorage_guide-js.html"><strong>技术文档</strong></a>。</p><blockquote><p>至于为什么要用国际版 因为国内版本强制要求添加 API 域名并且需要备案</p><p>时间紧迫 也不想搞这些东西 申请一个免费的简单用下就好<br>国际版不需要提供 serverURL </p><p>但是国内网络上传会 403，所以申请了个域名，配置好以后国内外都能用，也不需要备案了</p><p>免费域名在 <a href="http://www.freenom.com/">Freenom</a>。</p></blockquote><h2 id="一切就绪-坐等IP"><a href="#一切就绪-坐等IP" class="headerlink" title="一切就绪 坐等IP"></a>一切就绪 坐等IP</h2><p>网页发过去，被对面点开，</p><p>过了会儿显示连接错误，</p><p><em><strong>你以为是真的连接错误吗？格局小了 我代码里写的就是错误</strong></em>🤣，</p><p>我这里显示他点开了4次。</p><p><strong>IP、设备类型</strong> 也完美接收过来了。</p><p><img src="/img/ip-locate/data.jpeg"></p><h2 id="让我看看你在哪"><a href="#让我看看你在哪" class="headerlink" title="让我看看你在哪"></a>让我看看你在哪</h2><p>拿到IP就是要找位置咯？</p><p>在这<a href="https://chaipip.com/">查询下IP的大致位置</a></p><p>大致精度在1公里左右，</p><p>那么 <strong>是谁也就一目了然了</strong>。</p><p><img src="/img/ip-locate/location.jpeg"></p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这属于是多年来的技术经验的一次大考，之前做个人博客的时候有幸接触到了这些，这次才比较顺利。</p><p>最好的结果就是能找到这个在网络上伪装他人发布谣言的傻zi（B）</p><p>真的，给他测试的时候真的很开心，做出来了，精度可以，努力不白费。</p><p>也希望这个伪装别人造谣的人在私立大学里好好反省吧，看接下来学校怎么对她处理了，哈哈</p><h3 id="顺便记录下时间点："><a href="#顺便记录下时间点：" class="headerlink" title="顺便记录下时间点："></a>顺便记录下时间点：</h3><ul><li>9.27 第一次发现在贴吧造谣</li><li>9.28 被我查到 IP 定位，依然很拽，晚上还在贴吧BB（也是这一天受害者向他们学校发送了邮件举报）</li><li>9.29 早上10点左右开始关闭贴吧私信，QQ删除好友并设置不可搜索，微信号更改并设置不可搜索</li><li>9.30 贴吧更新头像：差不多得了。</li></ul><p><img src="/img/ip-locate/baibei.jpeg"></p><p>哈哈，画上圆满的句号。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发生在高中同学身上的真实事件。&lt;/p&gt;
&lt;p&gt;这年头还有人喜欢在互联网上平白无故地造谣的嘛？&lt;/p&gt;
&lt;p&gt;还是一个高中的，&lt;/p&gt;
&lt;p&gt;表面看看还真不觉得…&lt;/p&gt;
&lt;p&gt;实际上做着下三滥的事情。&lt;/p&gt;
&lt;p&gt;一会儿立信一会儿🐔大。&lt;/p&gt;
&lt;p&gt;害。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ip-locate/lache.jpeg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="写代码" scheme="https://liyanan2004.github.io/tags/%E5%86%99%E4%BB%A3%E7%A0%81/"/>
    
    <category term="JS" scheme="https://liyanan2004.github.io/tags/JS/"/>
    
    <category term="Web" scheme="https://liyanan2004.github.io/tags/Web/"/>
    
    <category term="IP定位" scheme="https://liyanan2004.github.io/tags/IP%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="Leancloud" scheme="https://liyanan2004.github.io/tags/Leancloud/"/>
    
  </entry>
  
</feed>
