<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiYanan2004 - 我的博客</title>
  
  <subtitle>@LiYanan2004</subtitle>
  <link href="https://liyanan2004.github.io/atom.xml" rel="self"/>
  
  <link href="https://liyanan2004.github.io/"/>
  <updated>2023-05-01T14:07:51.806Z</updated>
  <id>https://liyanan2004.github.io/</id>
  
  <author>
    <name>LiYanan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 Apple Script 打开任务栏菜单</title>
    <link href="https://liyanan2004.github.io/open-menu-bar-extra-with-apple-script/"/>
    <id>https://liyanan2004.github.io/open-menu-bar-extra-with-apple-script/</id>
    <published>2023-05-01T13:50:45.901Z</published>
    <updated>2023-05-01T14:07:51.806Z</updated>
    
    <content type="html"><![CDATA[<p>（本文大部分为 ChatGPT 生成）</p><p>如果你是一个苹果电脑的用户，你可能已经习惯了使用任务栏菜单来快速地打开应用程序和执行其他的任务。但是，有时候你可能会感到很繁琐，因为每次打开任务栏菜单都需要通过鼠标点击来完成。但是，你可能不知道的是，你可以使用Apple Script来打开任务栏菜单，并以更快的方式访问它。</p><p>Apple Script 是一种编程语言，它可以用来自动化和控制Mac电脑中的各种操作。使用Apple Script，你可以编写脚本来执行各种任务，包括打开应用程序、发送电子邮件、自动化工作流程等等。</p><span id="more"></span><h2 id="系统级菜单"><a href="#系统级菜单" class="headerlink" title="系统级菜单"></a>系统级菜单</h2><p>打开任务栏菜单是Apple Script的一项基本操作。下面是一个简单的示例脚本，用于打开任务栏菜单：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;System Events&quot;</span></span><br><span class="line">    <span class="keyword">tell</span> process <span class="string">&quot;SystemUIServer&quot;</span></span><br><span class="line">        click (menu bar <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure><p>在这个脚本中，我们使用了Apple Script的 tell 语句，它允许我们控制不同的应用程序和进程。我们首先使用 tell 语句告诉Apple Script要控制的应用程序是“System Events”。然后，我们再次使用 tell 语句告诉Apple Script要控制的进程是“SystemUIServer”，这是负责任务栏菜单的进程。</p><p>在最后一行中，我们使用了 click 命令来模拟点击任务栏菜单。具体来说，我们使用了 menu bar item 1 of menu bar 1 这个命令来定位任务栏菜单的位置，并将其作为 click 命令的参数。</p><p>要运行这个脚本，你可以将其保存到脚本编辑器中，并点击运行按钮。当脚本运行时，它会自动打开任务栏菜单，让你快速访问你需要的应用程序和功能。</p><p>总的来说，使用Apple Script来打开任务栏菜单是一个简单而有效的方法，可以大大提高你的工作效率。如果你是一个苹果电脑的用户，不妨尝试使用这个脚本来自动化你的日常操作。</p><p>（以上是 AI 生成，接下来，我来补充）</p><h2 id="第三方-App"><a href="#第三方-App" class="headerlink" title="第三方 App"></a>第三方 App</h2><p>如果你的系统是 macOS Ventura（其他系统的你可以尝试一下），那么 <code>tell process &quot;SystemUIServer&quot;</code> 只能获取到类似 Siri 这种的系统进程，</p><p>但是，我们的目标远不止如此。</p><p>想要控制第三方app，可以参考以下代码（代码由 ChatGPT 生成，并且实测可以实现我们的目标）：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;System Events&quot;</span></span><br><span class="line">    <span class="keyword">tell</span> process <span class="string">&quot;APP名称&quot;</span></span><br><span class="line">        click menu bar <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="number">2</span></span><br><span class="line">        <span class="comment">-- 点击第一个菜单项</span></span><br><span class="line">        click menu <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure><blockquote><p>这里记得吧 “APP名称” 改下即可</p><p>这一部分我确实是不太会，问的 ChatGPT，它真的能给我正确的答案😱</p></blockquote><p>理论上如果 App 是原生实现的（AppKit，SwiftUI，Catalyst 这种），都能用 Apple Script 控制，</p><p>可以用 <code>entire contents</code> 来打印出所有的内容，然后逐一查找，</p><p>网页套壳的（基于 Electron 框架，例如：新版QQ，抖音，B站这种）就算了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;（本文大部分为 ChatGPT 生成）&lt;/p&gt;
&lt;p&gt;如果你是一个苹果电脑的用户，你可能已经习惯了使用任务栏菜单来快速地打开应用程序和执行其他的任务。但是，有时候你可能会感到很繁琐，因为每次打开任务栏菜单都需要通过鼠标点击来完成。但是，你可能不知道的是，你可以使用Apple Script来打开任务栏菜单，并以更快的方式访问它。&lt;/p&gt;
&lt;p&gt;Apple Script 是一种编程语言，它可以用来自动化和控制Mac电脑中的各种操作。使用Apple Script，你可以编写脚本来执行各种任务，包括打开应用程序、发送电子邮件、自动化工作流程等等。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Apple Script" scheme="https://liyanan2004.github.io/tags/Apple-Script/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 23 Swift Student Challenge</title>
    <link href="https://liyanan2004.github.io/wwdc-23-swift-student-challenge/"/>
    <id>https://liyanan2004.github.io/wwdc-23-swift-student-challenge/</id>
    <published>2023-04-15T14:14:29.269Z</published>
    <updated>2023-04-23T04:28:35.299Z</updated>
    
    <content type="html"><![CDATA[<p>有幸在高中就参与过 WWDC 20 的 SSC，可惜当时课余时间并不充裕导致作品的质量并不理想，</p><p>如今，再战 WWDC 23 SSC 😋</p><span id="more"></span><p>话又说回来，要不是官网宣布 WWDC 23 的时间并发布了 SSC 活动，我都差点忘记了😂</p><p>但是，我已不是三年前的我，这次的制作周期非常紧凑，也比较顺利，同时，相对来说也比较满意。</p><h2 id="时光倒流（3月30日）"><a href="#时光倒流（3月30日）" class="headerlink" title="时光倒流（3月30日）"></a>时光倒流（3月30日）</h2><p>早晨起来，瞄了一眼手表，我去…WWDC 23 定档了！！</p><p>非常激动，也很开心（完全不记得有 SSC），点开官网，习惯性地翻了翻，</p><p>诶，SSC！！！还没准备怎么办？（我顿时愣住了，立马开始找灵感）</p><p>很快啊，有灵感了！！🤭</p><blockquote><p>以上都是废话，你可以不看（好像说的有点晚了😂）</p></blockquote><h2 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h2><p>SSC 是让学生爱好者们使用极具创新的方法来展现自己的 ideas，</p><p>使用 Playgrounds 提交作品，支持较新的 SDK，因此使用新的框架也能体现出对开发团队的支持（油管上听来的）</p><p>首先想到的就是 <code>Swift Charts</code>。</p><p>图表可以用在数据可视化，但是哪来那么多的数据呢？并且所有的核心要点要在三分钟之内被展现出来。</p><p>我突然想起了高数中的「泰勒展开式」，无限趋近的概念可以非常轻松的通过图表的可视化来展现。</p><p>又想起了上学期 C 语言课程中让我们实现 π 的计算。</p><p>因此，本次 SSC 的主题就定为了「使用 Swift Charts 来展现 π 的计算过程」，利用图表可视化展现出无限趋近的概念。</p><h2 id="Playground-设计"><a href="#Playground-设计" class="headerlink" title="Playground 设计"></a>Playground 设计</h2><p>我希望向各位评委展现出我“高超”的 SwiftUI 本领，从布局到神奇移动，再到创新的交互，最后到动画设计与控制。</p><p>我不仅希望我的内容能够吸引评委，也希望我制作的动画能够让评委们感受到我对 SwiftUI 的热爱。</p><p>因此，我设计了6个分页。</p><ol><li>欢迎页：展示 Playground 的主题、动态图标</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/welcome-page.jpeg"></p><ol start="2"><li>目录页：展示神奇移动效果（有点为了神奇移动而神奇移动的感觉🤔）</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/toc-page.jpeg"></p><ol start="3"><li>简单思考页：展示创新点：刮刮卡</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/ques-page.jpeg"></p><ol start="4"><li>原理展示页：展示核心要点，Swift Charts、动画控制</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/demestify-page.jpeg"></p><ol start="5"><li>回顾页：启发来源于之前获奖作品，为了和结束页动画配合。</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/quiz-page.jpeg"></p><ol start="6"><li>结束页：展示动态图标和五彩纸屑效果（没错，就是 iMessage 中的五彩纸屑，用 Canvas 完美复刻了一个）</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/end-page.jpeg"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果最终获奖了，Playground 中所有的源码我会开源在 GitHub：<a href="https://github.com/LiYanan2004/wwdc-23-ssc">WWDC 23 SSC</a></p><blockquote><p>5月10号之后链接还显示 404，就是很遗憾没获奖，再接再厉 🥹</p></blockquote><p>五彩纸屑效果我在过年那会儿就已经写好并放在 <a href="https://github.com/LiYanan2004/ColorfulPaper/">GitHub</a> 开源了，如果你有兴趣可以去研究下实现原理。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有幸在高中就参与过 WWDC 20 的 SSC，可惜当时课余时间并不充裕导致作品的质量并不理想，&lt;/p&gt;
&lt;p&gt;如今，再战 WWDC 23 SSC 😋&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="Swift Charts" scheme="https://liyanan2004.github.io/tags/Swift-Charts/"/>
    
    <category term="WWDC 23" scheme="https://liyanan2004.github.io/tags/WWDC-23/"/>
    
    <category term="Swift Student Challenge" scheme="https://liyanan2004.github.io/tags/Swift-Student-Challenge/"/>
    
  </entry>
  
  <entry>
    <title>Swift Charts 入门 —— 认识各种标记</title>
    <link href="https://liyanan2004.github.io/swift-charts-intro-marks/"/>
    <id>https://liyanan2004.github.io/swift-charts-intro-marks/</id>
    <published>2023-04-06T08:51:31.495Z</published>
    <updated>2023-04-06T12:19:57.913Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习和使用 WWDC 22 上全新的 Swift Charts，</p><p>Swift Charts 使用 SwiftUI 的声明式语法，用于在 SwiftUI 中构建可视化图表，便于数据的可视化分析。</p><p>本期博客将专注于 Swift Charts 的标记和符号。</p><p><img src="/img/swift-charts/animated-charts.gif"></p><span id="more"></span><h2 id="开始创建图表"><a href="#开始创建图表" class="headerlink" title="开始创建图表"></a>开始创建图表</h2><p>在正式开始创建图表之前，需要先建立一个图表区域。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ChartView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span> &#123;</span><br><span class="line">            <span class="comment">// ... </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Marks 需要被放置在 Charts 内作为元素。</p><p>当有多个 Marks 重叠时，其表现形式类似于 <code>ZStack</code>。</p><p>你可以在创建 Chart 时直接导入数据，也可以在 Chart 内使用 <code>ForEach</code> 来导入数据。</p><h2 id="标记（Mark）"><a href="#标记（Mark）" class="headerlink" title="标记（Mark）"></a>标记（Mark）</h2><h3 id="LineMark"><a href="#LineMark" class="headerlink" title="LineMark"></a>LineMark</h3><p>多个点连成一条线，简单直接。</p><p><img src="/img/swift-charts/line-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SunshineChart</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">            <span class="type">LineMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">                y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MonthlyHoursOfSunshine</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> date: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">var</span> hoursOfSunshine: <span class="type">Double</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">month</span>: <span class="type">Int</span>, <span class="params">hoursOfSunshine</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.autoupdatingCurrent</span><br><span class="line">        <span class="keyword">self</span>.date <span class="operator">=</span> calendar.date(from: <span class="type">DateComponents</span>(year: <span class="number">2023</span>, month: month))<span class="operator">!</span></span><br><span class="line">        <span class="keyword">self</span>.hoursOfSunshine <span class="operator">=</span> hoursOfSunshine</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data: [<span class="type">MonthlyHoursOfSunshine</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">1</span>, hoursOfSunshine: <span class="number">74</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">2</span>, hoursOfSunshine: <span class="number">99</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">3</span>, hoursOfSunshine: <span class="number">100</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">4</span>, hoursOfSunshine: <span class="number">110</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">5</span>, hoursOfSunshine: <span class="number">112</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">6</span>, hoursOfSunshine: <span class="number">125</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">7</span>, hoursOfSunshine: <span class="number">117</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">8</span>, hoursOfSunshine: <span class="number">112</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">9</span>, hoursOfSunshine: <span class="number">106</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">10</span>, hoursOfSunshine: <span class="number">102</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">11</span>, hoursOfSunshine: <span class="number">93</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">12</span>, hoursOfSunshine: <span class="number">78</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="BarMark"><a href="#BarMark" class="headerlink" title="BarMark"></a>BarMark</h3><p>条状图，可以很清晰的展现出各个项目的数量多少。</p><p><img src="/img/swift-charts/bar-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="type">BarMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Department&quot;</span>, <span class="variable">$0</span>.department),</span><br><span class="line">                y: .value(<span class="string">&quot;Profit&quot;</span>, <span class="variable">$0</span>.profit)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Profit</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> department: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> profit: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data: [<span class="type">Profit</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Profit</span>(department: <span class="string">&quot;Production&quot;</span>, profit: <span class="number">15000</span>),</span><br><span class="line">    <span class="type">Profit</span>(department: <span class="string">&quot;Marketing&quot;</span>, profit: <span class="number">8000</span>),</span><br><span class="line">    <span class="type">Profit</span>(department: <span class="string">&quot;Finance&quot;</span>, profit: <span class="number">10000</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="PointMark"><a href="#PointMark" class="headerlink" title="PointMark"></a>PointMark</h3><p>点标记，用于标定图标上的某一个或一系列点。</p><p><img src="/img/swift-charts/point-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SunshineChart</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">            <span class="type">LineMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">                y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            <span class="type">PointMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">                y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MonthlyHoursOfSunshine &amp; data 和 LineMark 中的一致，就不再重复了</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// struct MonthlyHoursOfSunshine &#123; ... &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// let data = [ ... ]</span></span><br></pre></td></tr></table></figure><h3 id="RuleMark"><a href="#RuleMark" class="headerlink" title="RuleMark"></a>RuleMark</h3><p>基准标记，就是一条线，可以直观的展现出例如平均值、波动情况等数据。</p><p><img src="/img/swift-charts/rule-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="type">BarMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Department&quot;</span>, <span class="variable">$0</span>.department),</span><br><span class="line">                y: .value(<span class="string">&quot;Profit&quot;</span>, <span class="variable">$0</span>.profit)</span><br><span class="line">            )</span><br><span class="line">            .opacity(<span class="number">0.3</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">RuleMark</span>(y: .value(<span class="string">&quot;Average&quot;</span>, <span class="number">11000</span>))</span><br><span class="line">                .lineStyle(<span class="type">StrokeStyle</span>(lineWidth: <span class="number">3</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Profit &amp; data 和 BarMark 中的一致，就不再重复了</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// struct Profit &#123; ... &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// let data = [ ... ]</span></span><br></pre></td></tr></table></figure><h3 id="RectangleMark"><a href="#RectangleMark" class="headerlink" title="RectangleMark"></a>RectangleMark</h3><p>与 PointMark 类似，只是形状变成了矩形。</p><p>当然，他也可以被用来展示一个区域。</p><p><img src="/img/swift-charts/rectangle-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="type">RectangleMark</span>(</span><br><span class="line">                xStart: .value(<span class="string">&quot;Rect Start Width&quot;</span>, <span class="variable">$0</span>.x <span class="operator">-</span> <span class="number">0.25</span>),</span><br><span class="line">                xEnd: .value(<span class="string">&quot;Rect End Width&quot;</span>, <span class="variable">$0</span>.x <span class="operator">+</span> <span class="number">0.25</span>),</span><br><span class="line">                yStart: .value(<span class="string">&quot;Rect Start Height&quot;</span>, <span class="variable">$0</span>.y <span class="operator">-</span> <span class="number">0.25</span>),</span><br><span class="line">                yEnd: .value(<span class="string">&quot;Rect End Height&quot;</span>, <span class="variable">$0</span>.y <span class="operator">+</span> <span class="number">0.25</span>)</span><br><span class="line">            )</span><br><span class="line">            .opacity(<span class="number">0.2</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">PointMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;X&quot;</span>, <span class="variable">$0</span>.x),</span><br><span class="line">                y: .value(<span class="string">&quot;Y&quot;</span>, <span class="variable">$0</span>.y)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Coord</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data: [<span class="type">Coord</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Coord</span>(x: <span class="number">5</span>, y: <span class="number">5</span>),</span><br><span class="line">    <span class="type">Coord</span>(x: <span class="number">2.5</span>, y: <span class="number">2.5</span>),</span><br><span class="line">    <span class="type">Coord</span>(x: <span class="number">3</span>, y: <span class="number">3</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="AreaMark"><a href="#AreaMark" class="headerlink" title="AreaMark"></a>AreaMark</h3><p>通过多个点组成线，并对其包裹的区域做填充，用来展示某一个区域。</p><p>如果是简单的矩形区域，也可以直接使用 RectangleMark。</p><blockquote><p>例如：天气app中，每天的最高温、最低温区间。</p></blockquote><p><img src="/img/swift-charts/area-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WeatherChart</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data) &#123; day <span class="keyword">in</span></span><br><span class="line">            <span class="type">AreaMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Date&quot;</span>, day.date),</span><br><span class="line">                yStart: .value(<span class="string">&quot;Minimum Temperature&quot;</span>, day.minimumTemperature),</span><br><span class="line">                yEnd: .value(<span class="string">&quot;Maximum Temperature&quot;</span>, day.maximumTemperature)</span><br><span class="line">            )</span><br><span class="line">            .interpolationMethod(.catmullRom)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Weather</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">let</span> maximumTemperature: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> minimumTemperature: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Weather</span>(date: .now, maximumTemperature: <span class="number">20</span>, minimumTemperature: <span class="number">10</span>, id: <span class="number">1</span>),</span><br><span class="line">    <span class="type">Weather</span>(date: .now.addingTimeInterval(<span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span>), maximumTemperature: <span class="number">25</span>, minimumTemperature: <span class="number">13</span>, id: <span class="number">2</span>),</span><br><span class="line">    <span class="type">Weather</span>(date: .now.addingTimeInterval(<span class="number">2</span> <span class="operator">*</span> <span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span>), maximumTemperature: <span class="number">23</span>, minimumTemperature: <span class="number">12</span>, id: <span class="number">3</span>),</span><br><span class="line">    <span class="type">Weather</span>(date: .now.addingTimeInterval(<span class="number">3</span> <span class="operator">*</span> <span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span>), maximumTemperature: <span class="number">24</span>, minimumTemperature: <span class="number">13</span>, id: <span class="number">4</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="符号（Symbol）"><a href="#符号（Symbol）" class="headerlink" title="符号（Symbol）"></a>符号（Symbol）</h2><p>如果涉及到多样本处理，例如：比较多个城市的气温曲线，</p><p>为了让图表看起来更加直观，通常会使用一些符号或者颜色来做区分。</p><p>有以下几种方式：</p><h3 id="以颜色区分：foregroundStyle"><a href="#以颜色区分：foregroundStyle" class="headerlink" title="以颜色区分：foregroundStyle"></a>以颜色区分：foregroundStyle</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">    <span class="type">LineMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">    )</span><br><span class="line">    .foregroundStyle(.value(<span class="string">&quot;City&quot;</span>, <span class="variable">$0</span>.city))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以形状区分：symbol"><a href="#以形状区分：symbol" class="headerlink" title="以形状区分：symbol"></a>以形状区分：symbol</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">    <span class="type">LineMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">    )</span><br><span class="line">    .symbol(.value(<span class="string">&quot;City&quot;</span>, <span class="variable">$0</span>.city))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建之后在图表左下角会出现 Legend，</p><p><img src="/img/swift-charts/legend.png"></p><p>通过上述的两个 modifiers 也可以自定义颜色和形状，都会展示在 Legend 中。</p><p>如果想隐藏 Legend，可以使用 <code>.chartLegend(.hidden)</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学习和使用 WWDC 22 上全新的 Swift Charts，&lt;/p&gt;
&lt;p&gt;Swift Charts 使用 SwiftUI 的声明式语法，用于在 SwiftUI 中构建可视化图表，便于数据的可视化分析。&lt;/p&gt;
&lt;p&gt;本期博客将专注于 Swift Charts 的标记和符号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/swift-charts/animated-charts.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="Swift Charts" scheme="https://liyanan2004.github.io/tags/Swift-Charts/"/>
    
    <category term="WWDC 22" scheme="https://liyanan2004.github.io/tags/WWDC-22/"/>
    
  </entry>
  
  <entry>
    <title>Magic Keyboard 使用体验</title>
    <link href="https://liyanan2004.github.io/magic-keyboard-with-touchid-unbox/"/>
    <id>https://liyanan2004.github.io/magic-keyboard-with-touchid-unbox/</id>
    <published>2023-04-04T06:36:31.797Z</published>
    <updated>2023-04-04T11:48:51.599Z</updated>
    
    <content type="html"><![CDATA[<p>买了 Apple Magic Keyboard 已经一周多了，体验了苹果的「线上买，线下提」，</p><p>经过一番折腾，又体验了「14天无理由退货」，</p><p>来分享下我的使用感受和折腾过程。</p><span id="more"></span><h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><h3 id="为什么会买？"><a href="#为什么会买？" class="headerlink" title="为什么会买？"></a>为什么会买？</h3><p>主要是因为我宿舍的桌子上放了电脑之后，没足够空间写作业了，一张 A4 纸都放不平，</p><p>于是，</p><p>就买了个增高架，电脑被抬高了，键盘触控板用起来就不顺手了，</p><p>所以，就要配一把键盘。</p><h3 id="为什么是-Magic-Keyboard-呢？"><a href="#为什么是-Magic-Keyboard-呢？" class="headerlink" title="为什么是 Magic Keyboard 呢？"></a>为什么是 Magic Keyboard 呢？</h3><p>市面上的键盘普遍要 200+ 左右，质量参差不齐，</p><p>同时，我也不是很习惯机械键盘的手感，</p><p>考虑到以后也可能会使用 Mac mini，</p><p>于是，就决定一步到位，买了这把 Magic Keyboard，感受下剪刀脚键盘。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/keyboard.jpeg"></p><h3 id="体验「线下提货」"><a href="#体验「线下提货」" class="headerlink" title="体验「线下提货」"></a>体验「线下提货」</h3><p>这是 Apple 去年开始的一个新的购物选择，让你更快地拿到产品。</p><p>Apple Store 下单，等待邮件提醒可取货，去线下取货就行。</p><p>因为当下不是新品发售，而键盘也是属于配件一类，所以不存在缺货的情况。</p><p>从我到店，到拿到 Magic Keyboard，整个过程不超过 3 分钟，还是非常迅速的。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/order-pickup.jpeg"></p><p>迅速地完成了配对，测试了下按键功能正常就高高兴兴地走了。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/quick-unbox.jpeg"></p><h2 id="按键手感"><a href="#按键手感" class="headerlink" title="按键手感"></a>按键手感</h2><p>我个人是更加习惯键程短的薄膜键盘的，打字时有肌肉记忆，出错概率相对较低。</p><p>剪刀脚键盘的键程相较于蝶式键盘更长一些些，按键手感更软一些，整体还是比较舒服的。</p><p>Touch ID 按钮是那种开关的按钮的感觉，按下需要比其他按键更大的力气，不容易误触锁定。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/touchid-sensor.jpeg" alt="Touch ID Sensor"></p><h2 id="连接性能"><a href="#连接性能" class="headerlink" title="连接性能"></a>连接性能</h2><ul><li>MacBook Pro 开盖自动休眠后，依然可以通过键盘唤醒电脑</li><li>MacBook Pro 开机时第一次输入密码时键盘自动连接，无需等待</li><li>MacBook Pro 开盖自动唤醒后，键盘保持连接</li></ul><p>但是有时会出现打字没反应的情况，电脑显示键盘已连接，重新连接后恢复正常。</p><p>偶尔的，也能理解，正常。</p><h2 id="功能按键"><a href="#功能按键" class="headerlink" title="功能按键"></a>功能按键</h2><p>刚拿到 Magic Keyboard 的时候是需要使用 <code>fn + 功能按键</code> 才能触发对应功能，且有些功能（勿扰、语音输入）无法使用。</p><p>后来在 macOS 设置中找到 “将F1、F2等键用作标准功能键”，关闭后按键全部可用，并且也不需要搭配 fn 了。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/func-button-activate.png"></p><h2 id="电池续航"><a href="#电池续航" class="headerlink" title="电池续航"></a>电池续航</h2><p>第一把键盘的续航完全尿崩，最夸张的是关闭键盘电源后一晚上耗电70%，不具备任何参考价值。</p><p>第二把键盘正常，高强度敲了两天半的代码，键盘保持开启，只耗电3%。</p><p>能够达到宣称的「一次充电，续航一个月」</p><blockquote><p>我又把新的键盘充满了电，测测能用多久。</p></blockquote><h2 id="退换货经历"><a href="#退换货经历" class="headerlink" title="退换货经历"></a>退换货经历</h2><h3 id="轻微磕碰"><a href="#轻微磕碰" class="headerlink" title="轻微磕碰"></a>轻微磕碰</h3><p>仅在测试按键功能，和第一次充电时揭开了外包膜，也基本没有使用过键盘。</p><p>到学校后无意间用指甲感受到 Option 键下方不平，才发现凹进去一块。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/cosmetic-problem.jpeg"></p><p>几乎可以排除认为造成，但是，这不是换货的主要原因。</p><h3 id="续航问题、质量问题"><a href="#续航问题、质量问题" class="headerlink" title="续航问题、质量问题"></a>续航问题、质量问题</h3><p>我认为第一把键盘的电池是有问题的。</p><p>第一次连接时，电池显示 0%，我以为就是正常的没电了。</p><p>没电了充呗。</p><p>当晚充满电，第二天早上就带去学校了，还剩 <strong>27%</strong> 😱</p><p>不到 12 小时啊，而且，键盘的开关是「关闭」的状态。</p><p>接下来的几天，我又针对性的进行了一些记录：</p><p><img src="/img/magic-keyboard-with-touchid-unbox/battery-report.jpeg"></p><p>可以看出，无论是打开还是关闭键盘电源，都是有问题的，这就排除了我电脑连接、兼容性的问题了。</p><p>跟 400 客服沟通后，建议我无理由退货，再买一把新的（线下不能直接换货，好奇怪…）。</p><p>不过整个换货过程还是非常轻松愉快的，店员还跟我说，希望这把键盘没问题😂</p><h2 id="经验与总结"><a href="#经验与总结" class="headerlink" title="经验与总结"></a>经验与总结</h2><p>收到第二把键盘后，我仔细检查了外观，初始电池剩余容量（95%）。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/new-keyboard.png"></p><p>回想起来，2023 年生产的键盘（盒子上写的），初始电量为 0% 确实不正常，下次也要注意检查这一部分。</p><p><strong>对于 铝金属 且 有棱角的外壳，用指甲来检查是否平整，避免初始磕碰（这种问题很难证明不是后期人为造成）</strong></p><p>总的来说，我仍然喜欢这把键盘，喜欢在 Apple 购物的体验，</p><p>没有什么废话，不跟你扯皮，该换就换，很喜欢这样的风格。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;买了 Apple Magic Keyboard 已经一周多了，体验了苹果的「线上买，线下提」，&lt;/p&gt;
&lt;p&gt;经过一番折腾，又体验了「14天无理由退货」，&lt;/p&gt;
&lt;p&gt;来分享下我的使用感受和折腾过程。&lt;/p&gt;</summary>
    
    
    
    <category term="新玩具" scheme="https://liyanan2004.github.io/categories/%E6%96%B0%E7%8E%A9%E5%85%B7/"/>
    
    
    <category term="Magic Keyboard" scheme="https://liyanan2004.github.io/tags/Magic-Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>搞笑体育 之 跑步是不可能跑步的</title>
    <link href="https://liyanan2004.github.io/hack-college-sport/"/>
    <id>https://liyanan2004.github.io/hack-college-sport/</id>
    <published>2023-03-13T12:42:25.861Z</published>
    <updated>2023-03-13T14:20:18.920Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，高校体育就是一坨…</p><p>且不说功能如何，</p><p>你一个给大学生用的“运动”软件，</p><p>开屏一大堆广告，手机动一下就乱跳app，</p><p>跑个步还不忘给我打广告，从头打到尾，真牛…</p><p>傻*软件，吃像太难看！</p><p><img src="/img/hack-college-sport/full-ads.jpeg"></p><p>跑个步还要打卡点位，真的恶心，但是，跑步是肯定不会跑的啦～</p><span id="more"></span><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><p>对 APP 的网络请求进行一番抓包，整个流程比较简单：</p><ol><li>手机点击开始体育锻炼跑，APP 发送一个请求</li><li>服务器返回当前跑步的 RunPageID 和需要经过的点位信息</li><li>开跑，记得要满足跑步要求（2公里 + 3个点）</li><li>完成跑步之后，将途径的一个个采样点进行处理，一并发给服务器，完成跑步记录上报保存。</li></ol><h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><ul><li>所有请求均以 POST 方式发送</li><li>所有请求的 body 中的均含有 sign 用于校验，使用的是 MD5 生成哈希值</li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>在每一个请求的 body 中的数据结构长这样：<code>data=[JSON Data]&amp;sign=[MD5 Hash]</code></p><h2 id="开始跑步"><a href="#开始跑步" class="headerlink" title="开始跑步"></a>开始跑步</h2><p>URL： <code>https://www.sportcampus.cn/api/run/runPage</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&quot;initLocation&quot;</span> : <span class="string">&quot;121.00000,30.00000”,   // 起始位置的经纬度</span></span><br><span class="line"><span class="string">          &quot;</span>type<span class="string">&quot; : &quot;</span><span class="number">1</span><span class="string">&quot;,                    // 不知道什么含义</span></span><br><span class="line"><span class="string">        &quot;</span>userid<span class="string">&quot; : &quot;</span><span class="number">1234567</span><span class="string">&quot;               // 当前用户的 ID</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><p>服务器返回的 JSON 中，<code>ibeacon</code> 和 <code>gpsinfo</code>分别对应 必经点🔴 和 途径点🟢</p><p>ibeacon 中关键信息是 major、minor和uuid，后续保存跑步记录是会用到。</p><p>gpsinfo 就是简单的字典，包含 <code>latitude</code> 和 <code>longitude</code>。</p><h2 id="结束跑步"><a href="#结束跑步" class="headerlink" title="结束跑步"></a>结束跑步</h2><p>URL：<code>https://www.sportcampus.cn/api/run/saveRunV2</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">      <span class="string">&quot;endTime&quot;</span> : <span class="string">&quot;2023-3-13 14:50:39&quot;</span>,</span><br><span class="line">    <span class="string">&quot;startTime&quot;</span> : <span class="string">&quot;2023-3-13 14:38:15&quot;</span>,</span><br><span class="line">       <span class="string">&quot;userid&quot;</span> : <span class="string">&quot;1234567&quot;</span>, </span><br><span class="line">         <span class="string">&quot;goal&quot;</span> : <span class="string">&quot;2.00&quot;</span>,</span><br><span class="line">         <span class="string">&quot;type&quot;</span> : <span class="number">1</span>,</span><br><span class="line">       <span class="string">&quot;frombp&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;runPageId&quot;</span> : pageID,</span><br><span class="line">        <span class="string">&quot;buPin&quot;</span> : <span class="string">&quot;100&quot;</span>,</span><br><span class="line">        <span class="string">&quot;speed&quot;</span> : <span class="string">&quot;6&#x27;13<span class="subst">\&quot;</span>&quot;</span>,</span><br><span class="line">         <span class="string">&quot;real&quot;</span> : <span class="string">&quot;300&quot;</span>,                      <span class="comment">// 距离，单位（米）</span></span><br><span class="line">     <span class="string">&quot;duration&quot;</span> : <span class="string">&quot;658&quot;</span>,                      <span class="comment">// 时常，单位（秒）</span></span><br><span class="line">        <span class="string">&quot;track&quot;</span> : [],                         <span class="comment">// 跑步过程中 GPS 采样点</span></span><br><span class="line">        <span class="string">&quot;bNode&quot;</span> : bNode,                      <span class="comment">// 必经点数据🔴</span></span><br><span class="line">        <span class="string">&quot;tNode&quot;</span> : tNode,                      <span class="comment">// 途径点数据🟢</span></span><br><span class="line">     <span class="string">&quot;totalNum&quot;</span> : <span class="string">&quot;1024&quot;</span>,                     <span class="comment">// 步数</span></span><br><span class="line">        <span class="string">&quot;trend&quot;</span> : [[<span class="string">&quot;x&quot;</span> : <span class="string">&quot;0&quot;</span>, <span class="string">&quot;y&quot;</span> : <span class="string">&quot;0&quot;</span>]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里只要给速度生成一个随机数，其他基本都能算出来。</p><p>途径点、必经点打卡实际上就是 bNode 和 tNode，把“想经过的”点给进去就好啦。</p><p>bNode 是一个字典数组，字典的结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     <span class="string">&quot;major&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;minor&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;uuid&quot;</span>  : <span class="type">UUID</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>tNode 相对简单，也是一个字典数组，结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">&quot;longitude&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;latitude&quot;</span> : <span class="type">String</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>track 是间隔一段时间的 GPS 采样点，也是字典数组，结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">        <span class="string">&quot;speed&quot;</span> : <span class="type">String</span>,   <span class="comment">// 应该是记录采样时的速度，具体单位不清楚，一般跑步在 2.0 - 3.0 左右</span></span><br><span class="line">    <span class="string">&quot;longitude&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;latitude&quot;</span> : <span class="type">String</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Sign-的获取"><a href="#Sign-的获取" class="headerlink" title="Sign 的获取"></a>Sign 的获取</h1><p>在 GitHub 上找到了 Python 的版本，直接拿到了 key，</p><p>借助 <a href="https://github.com/LiYanan2004/ChatBot">ChatBot</a> 得到了 Swift 版本的 MD5 哈希生成函数，</p><p>把 data 构建好之后，转为 String 传进去就好啦。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoKit</span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getMD5Code</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> key <span class="operator">=</span> <span class="string">&quot;lpKK*TJE8WaIg%93O0pfn0#xS0i3xE$z&quot;</span></span><br><span class="line">    <span class="keyword">let</span> message <span class="operator">=</span> key <span class="operator">+</span> <span class="string">&quot;data&quot;</span> <span class="operator">+</span> s</span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Data</span>(message.utf8)</span><br><span class="line">    <span class="keyword">var</span> hasher <span class="operator">=</span> <span class="type">Insecure</span>.<span class="type">MD5</span>()</span><br><span class="line">    hasher.update(data: data)</span><br><span class="line">    <span class="keyword">return</span> hasher.finalize().map &#123; <span class="type">String</span>(format: <span class="string">&quot;%02hhx&quot;</span>, <span class="variable">$0</span>) &#125;.joined()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何规划路径"><a href="#如何规划路径" class="headerlink" title="如何规划路径"></a>如何规划路径</h1><p>答：得到必经点和途径点后，手动规划。</p><p>用 SwiftUI + MapKit 做了一个 UI，在地图上标注出关键点，</p><p>接下来就是鼠标点点点！</p><p>相邻的两个点中间会补齐来实现 “GPS 间隔采样”，</p><p>当然，跑步一定不会是笔笔直的，也适当的对每一个中间点做了横纵向的随机偏移。</p><p>仍需注意的是：在过河以及转弯时要小心一些😂</p><p><img src="/img/hack-college-sport/route.png"></p><h1 id="跑步流程"><a href="#跑步流程" class="headerlink" title="跑步流程"></a>跑步流程</h1><ol><li>点击跑步按钮</li><li>规划路线</li><li>点击结束跑步</li><li>等待提交…</li></ol><p>舒服！耶！跑步是不可能跑步的啦～</p><p><img src="/img/hack-college-sport/submit.png"></p><p><em>项目不开源，涉及多方利益与合作，仅在我自己电脑上运行使用。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知，高校体育就是一坨…&lt;/p&gt;
&lt;p&gt;且不说功能如何，&lt;/p&gt;
&lt;p&gt;你一个给大学生用的“运动”软件，&lt;/p&gt;
&lt;p&gt;开屏一大堆广告，手机动一下就乱跳app，&lt;/p&gt;
&lt;p&gt;跑个步还不忘给我打广告，从头打到尾，真牛…&lt;/p&gt;
&lt;p&gt;傻*软件，吃像太难看！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/hack-college-sport/full-ads.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;跑个步还要打卡点位，真的恶心，但是，跑步是肯定不会跑的啦～&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="hack" scheme="https://liyanan2004.github.io/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>Selection Range in SwiftUI</title>
    <link href="https://liyanan2004.github.io/swiftui-selection-range/"/>
    <id>https://liyanan2004.github.io/swiftui-selection-range/</id>
    <published>2023-02-12T11:33:00.000Z</published>
    <updated>2023-03-01T10:40:21.779Z</updated>
    
    <content type="html"><![CDATA[<p>在 SwiftUI 中，没有提供默认的 modifier 来监听 <code>TextView</code> 的 <code>selectionRange</code>，</p><p>这对于文本编辑类 app 来说是很致命的，因为无法控制光标的位置，</p><p>但是可以从其他的文章中找到一些思路：</p><ul><li><a href="https://swiftui-lab.com/a-powerful-combo/">The Power of the Hosting+Representable Combo</a></li><li><a href="https://github.com/siteline/SwiftUI-Introspect">siteline&#x2F;SwiftUI-Introspect</a></li></ul><p>寻找 NSView &#x2F; UIView 的方法来源于：<a href="https://github.com/siteline/SwiftUI-Introspect">siteline&#x2F;SwiftUI-Introspect</a></p><p>本文来介绍一种解决方案，可以实现出以下的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Example</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectionRange <span class="operator">=</span> <span class="type">NSRange</span>()</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> text <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TextEditor</span>(text: <span class="variable">$text</span>)</span><br><span class="line">            .selectionRange(<span class="variable">$selectionRange</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先从 SwiftUI 的底层入手，</p><p>SwiftUI 在构建 View 时会使用到 NSView(Controller) &#x2F; UIVIew(Controller)，</p><p>在他们的上层还会包一层 <code>ViewHost</code>，</p><p>类似这样：</p><p><img src="/img/swiftui-selection-range/view-hierachy.jpeg" alt="macOS View Hierachy"></p><p>只要我们顺着 ViewHost 找到了对应的 NSView(Controller) &#x2F; UIVIew(Controller)，</p><p>就能实现对控件的自定义更改。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="STEP-1-寻找-NSTextView-x2F-UITextView"><a href="#STEP-1-寻找-NSTextView-x2F-UITextView" class="headerlink" title="STEP 1: 寻找 NSTextView &#x2F; UITextView"></a>STEP 1: 寻找 <code>NSTextView</code> &#x2F; <code>UITextView</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">class</span> <span class="title class_">_TextViewFinder</span>: <span class="title class_">PlatformView</span> &#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: .zero)</span><br><span class="line">        isHidden <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">hitTest</span>(<span class="keyword">_</span> <span class="params">point</span>: <span class="type">NSPoint</span>) -&gt; <span class="type">PlatformView</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@available</span>(<span class="operator">*</span>, unavailable)</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">findTextView</span>(<span class="params">view</span>: <span class="type">PlatformView</span>?) -&gt; <span class="type">TextView</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> superview <span class="operator">=</span> view</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> s <span class="operator">=</span> superview &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="type">NSStringFromClass</span>(<span class="built_in">type</span>(of: s)).contains(<span class="string">&quot;ViewHost&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> viewHost <span class="operator">=</span> s</span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> superview <span class="operator">=</span> viewHost.superview,</span><br><span class="line">                    <span class="keyword">let</span> entryIndex <span class="operator">=</span> superview.subviews.firstIndex(of: viewHost),</span><br><span class="line">                    entryIndex <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> subview <span class="keyword">in</span> superview.subviews[<span class="number">0</span><span class="operator">..&lt;</span>entryIndex].reversed() &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> typed <span class="operator">=</span> findChild(in: subview) &#123;</span><br><span class="line">                        <span class="keyword">return</span> typed</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            superview <span class="operator">=</span> s.superview</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">findChild</span>(<span class="params">in</span> <span class="params">root</span>: <span class="type">PlatformView</span>) -&gt; <span class="type">TextView</span>? &#123;</span><br><span class="line">        <span class="keyword">for</span> subview <span class="keyword">in</span> root.subviews &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> typed <span class="operator">=</span> subview <span class="keyword">as?</span> <span class="type">TextView</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> typed</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> typed <span class="operator">=</span> findChild(in: subview) &#123;</span><br><span class="line">                <span class="keyword">return</span> typed</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">TextView</span> <span class="operator">=</span> <span class="type">NSTextView</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">PlatformView</span> <span class="operator">=</span> <span class="type">NSView</span></span><br><span class="line"><span class="keyword">#elseif</span> <span class="operator">!</span>os(watchOS)</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">TextView</span> <span class="operator">=</span> <span class="type">UITextView</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">PlatformView</span> <span class="operator">=</span> <span class="type">NSView</span></span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure><h3 id="STEP-2-把-PlatformView-包装成-SwiftUI-View"><a href="#STEP-2-把-PlatformView-包装成-SwiftUI-View" class="headerlink" title="STEP 2: 把 PlatformView 包装成 SwiftUI View"></a>STEP 2: 把 <code>PlatformView</code> 包装成 <code>SwiftUI View</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">struct</span> <span class="title class_">_TextViewFinderWrapper</span>: <span class="title class_">ViewRepresentable</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> textView: <span class="type">TextView</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">typealias</span> _Finder <span class="operator">=</span> _TextViewFinder</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; _Finder &#123;</span><br><span class="line">        _TextViewFinder()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateView</span>(<span class="keyword">_</span> <span class="params">finder</span>: _Finder, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> textView <span class="operator">=</span> finder.findTextView(view: finder.superview) &#123;</span><br><span class="line">                <span class="keyword">self</span>.textView <span class="operator">=</span> textView</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">ViewRepresentable</span>: <span class="title class_">NSViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">NSViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">NSViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateView</span>(<span class="keyword">_</span> <span class="params">nsView</span>: <span class="type">NSViewType</span>, <span class="params">context</span>: <span class="type">Context</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">ViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeNSView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">NSViewType</span> &#123;</span><br><span class="line">        makeView(context: context)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateNSView</span>(<span class="keyword">_</span> <span class="params">nsView</span>: <span class="type">NSViewType</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        updateView(nsView, context: context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">ViewRepresentable</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">UIViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">UIViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UIViewType</span>, <span class="params">context</span>: <span class="type">Context</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">ViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">UIViewType</span> &#123;</span><br><span class="line">        makeView(context: context)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UIViewType</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        updateView(uiView, context: context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure><p>利用 <code>finder.findTextView </code> 寻找 <code>TextView</code> 并且将其保存到 <code>textView</code>，</p><p>使用 <code>@Binding</code> 可以使其生命周期与视图保持同并与上层视图同步信息。</p><h3 id="STEP-3-用-TextViewFinderWrapper-来寻找对应的-NSView-x2F-UIView"><a href="#STEP-3-用-TextViewFinderWrapper-来寻找对应的-NSView-x2F-UIView" class="headerlink" title="STEP 3: 用 _TextViewFinderWrapper 来寻找对应的 NSView &#x2F; UIView"></a>STEP 3: 用 <code>_TextViewFinderWrapper</code> 来寻找对应的 NSView &#x2F; UIView</h3><p><code>overlay</code> 相当于 AppKit 和 UIKit 中的 <code>addSubview</code>，</p><p>使用 <code>superview</code> 即可找到上层的 ViewRepresentation 也就是 SwiftUI View，</p><p>可以写一个 <code>ViewModifier</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">struct</span> <span class="title class_">_SelectionRangeModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .overlay(_TextViewFinderWrapper(textView: <span class="variable">$textView</span>).frame(width: <span class="number">0</span>, height: <span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STEP-4-实现-selectionRange-的双向绑定"><a href="#STEP-4-实现-selectionRange-的双向绑定" class="headerlink" title="STEP 4: 实现 selectionRange 的双向绑定"></a>STEP 4: 实现 <code>selectionRange</code> 的双向绑定</h3><p>向上绑定：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.onReceive(</span><br><span class="line">    <span class="type">NotificationCenter</span>.default.publisher(for: <span class="type">TextView</span>.didChangeSelectionNotification, object: textView)</span><br><span class="line">) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">   <span class="comment">// Selection Range did change.</span></span><br><span class="line">   <span class="comment">// Update selection range using `textView` instance.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向下绑定：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.task(id: range) &#123;</span><br><span class="line">   <span class="comment">// Selection range changed by SwiftUI State.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装起来大致是这样的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">struct</span> <span class="title class_">_SelectionRangeModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> range: <span class="type">NSRange</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> textView: <span class="type">TextView</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .overlay(_TextViewFinderWrapper(textView: <span class="variable">$textView</span>).frame(width: <span class="number">0</span>, height: <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">#if</span> os(macOS)</span><br><span class="line">            .onReceive(</span><br><span class="line">                <span class="type">NotificationCenter</span>.default.publisher(for: <span class="type">TextView</span>.didChangeSelectionNotification, object: textView)</span><br><span class="line">            ) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> textView <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                range <span class="operator">=</span> textView.selectedRange()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">#endif</span></span><br><span class="line">            .task(id: range) &#123;</span><br><span class="line">                <span class="keyword">let</span> newRange <span class="operator">=</span> range</span><br><span class="line">                <span class="keyword">#if</span> os(macOS)</span><br><span class="line">                textView<span class="operator">?</span>.setSelectedRange(newRange)</span><br><span class="line">                <span class="keyword">#else</span></span><br><span class="line">                textView<span class="operator">?</span>.selectedRange <span class="operator">=</span> newRange</span><br><span class="line">                <span class="keyword">#endif</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STEP-5-扩展一下-View"><a href="#STEP-5-扩展一下-View" class="headerlink" title="STEP 5: 扩展一下 View"></a>STEP 5: 扩展一下 View</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">watchOS</span>, unavailable)</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">13.0</span>, <span class="keyword">macOS</span> <span class="number">10.15</span>, <span class="keyword">tvOS</span> <span class="number">13.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">selectionRange</span>(<span class="keyword">_</span> <span class="params">range</span>: <span class="type">Binding</span>&lt;<span class="type">NSRange</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        modifier(_SelectionRangeModifier(range: range))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，搞定！</p><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><ul><li><p>本方法属于 Hack，很有可能在未来的 SwiftUI 大版本中失效（如果 SwiftUI 修改了 View Hierarchy）</p></li><li><p>文本框还是可能会出现闪烁的问题，我已经尽可能地规避了，但是可能还是会出现…目前无解。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 SwiftUI 中，没有提供默认的 modifier 来监听 &lt;code&gt;TextView&lt;/code&gt; 的 &lt;code&gt;selectionRange&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;这对于文本编辑类 app 来说是很致命的，因为无法控制光标的位置，&lt;/p&gt;
&lt;p&gt;但是可以从其他的文章中找到一些思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://swiftui-lab.com/a-powerful-combo/&quot;&gt;The Power of the Hosting+Representable Combo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/siteline/SwiftUI-Introspect&quot;&gt;siteline&amp;#x2F;SwiftUI-Introspect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寻找 NSView &amp;#x2F; UIView 的方法来源于：&lt;a href=&quot;https://github.com/siteline/SwiftUI-Introspect&quot;&gt;siteline&amp;#x2F;SwiftUI-Introspect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文来介绍一种解决方案，可以实现出以下的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SwiftUI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Example&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; selectionRange &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSRange&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body: &lt;span class=&quot;keyword&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;TextEditor&lt;/span&gt;(text: &lt;span class=&quot;variable&quot;&gt;$text&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .selectionRange(&lt;span class=&quot;variable&quot;&gt;$selectionRange&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="swiftui" scheme="https://liyanan2004.github.io/tags/swiftui/"/>
    
    <category term="swift" scheme="https://liyanan2004.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>MarkdownView 从 0 到 1 —— 回顾整条时间线</title>
    <link href="https://liyanan2004.github.io/the-road-of-markdown-view/"/>
    <id>https://liyanan2004.github.io/the-road-of-markdown-view/</id>
    <published>2023-02-02T11:45:04.500Z</published>
    <updated>2023-02-19T05:21:10.188Z</updated>
    
    <content type="html"><![CDATA[<p>熟悉我的朋友应该知道，我一直在开发一个框架，</p><p>用于在 SwiftUI 中以原生的方式来渲染 Markdown 文本。</p><p>P.S. 这篇文章也是在我做的编辑器中完成的。</p><p>早晨发布了 <a href="https://github.com/LiYanan2004/MarkdownView/releases">MarkdownView</a> 的 <code>1.0.0-rc</code>，也就是正式版的候选版本，</p><p>写这篇文章主要是想回顾和总结一路过来的技术点和一些解决方案。</p><span id="more"></span><h2 id="为什么要做这个项目"><a href="#为什么要做这个项目" class="headerlink" title="为什么要做这个项目"></a>为什么要做这个项目</h2><h3 id="无奈和机遇"><a href="#无奈和机遇" class="headerlink" title="无奈和机遇"></a>无奈和机遇</h3><p>其实，很早之前，我就想做一款笔记应用，</p><p>写字功能用 PencilKit 能实现，但是总不能只支持手写吧…</p><p>但是找了一圈开源社区都找不到很好的用于渲染 Markdown 文本的组件，</p><p>恰好在我高考完之后，发现苹果开源了自己的 <code>swift-markdown</code> 用于处理 Markdown 文本的解析。</p><h3 id="Typora-结束公测，开始收费"><a href="#Typora-结束公测，开始收费" class="headerlink" title="Typora 结束公测，开始收费"></a>Typora 结束公测，开始收费</h3><p>其实是有替代的 <code>Notion</code>，但是 Web 套壳的 app 多少还有点不喜欢，而且访问也不是很稳定。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>先来说说 <code>swift-markdown</code> 解析好的数据是如何变成最终的 <code>View</code> 的：</p><ol><li>原始文本由 <code>swift-markdown</code> 解析生成文档树</li><li>对应每一个节点，返回一个原生的 <code>SwiftUI View</code></li><li>用合适的方法将所有节点的 <code>View</code> 合并在一起打包</li><li>由 SwiftUI 计算和显示</li></ol><p>在第二步中返回的每一个子 <code>View</code> 都需要是相同类型的，不过好在 SwiftUI 给我们提供了 <code>AnyView</code> 来擦除类型。</p><p><img src="/img/the-road-of-markdown-view/markdown-view-workflow.jpeg" alt="原理图示"></p><h2 id="布局问题"><a href="#布局问题" class="headerlink" title="布局问题"></a>布局问题</h2><p>由于文档树中的每一个节点都是一个 <code>AnyView</code>，面临两个问题：</p><ol><li>如何控制每一个视图的大小</li><li>如何动态的使用 <code>HStack</code> 和 <code>VStack</code> 来放置横竖两个方向</li></ol><p>幸运的是，在 WWDC 22 上，我们可以自定义一个 <code>Layout</code>，</p><p>但不幸的是，<code>Layout Protocol</code> 只支持最新的系统，无法向后兼容。</p><h3 id="拆分文本，再结合"><a href="#拆分文本，再结合" class="headerlink" title="拆分文本，再结合"></a>拆分文本，再结合</h3><p>除了图片之外的内容，归根结底都是文本，</p><p>因此将文本拆分成尽可能小的部分（一个单词或者一个词组）</p><p>配合自定义的灵活布局（<code>FlowLayout</code>）来实现布局。</p><p>但是这样的方案属于在运行时拆分（文本）又合并（视图），非常消耗系统资源。</p><p>之前的 <a href="/markdownview-performance-optimization/" title="记录下 MarkdownView 的性能优化">记录下 MarkdownView 的性能优化</a> 中提到的解决方案只能解决启动时的卡顿和连续输入时的卡顿，</p><p>而对于内容的加载速度没有帮助，同时多个异步操作也需要等待 CPU 空闲时才能被派发上去。</p><p>最关键的是，按照这样的模式继续下去，文本始终无法选择和复制。</p><hr><h3 id="将视图暂存，合并相同的类型"><a href="#将视图暂存，合并相同的类型" class="headerlink" title="将视图暂存，合并相同的类型"></a>将视图暂存，合并相同的类型</h3><p>主要想要解决的问题是 <em>加载时间长</em> 和 <em>无法复制</em> 这两个问题。</p><p>加载时间长主要是因为频繁地文本拆分和大量的子视图的位置大小计算导致的，</p><p>解决方案是使用 SwiftUI 中的 <code>Text</code> 做拼接，同时解决了无法复制的问题，顺便可以向后兼容了一个大版本。</p><p>这一块的灵感是受到 <a href="https://www.fatbobman.com/posts/mixing_text_and_graphics_with_Text_in_SwiftUI">在 SwiftUI 中用 Text 实现图文混排</a> 的启发。</p><p>创建了一个 <code>ViewContent</code> 用来暂存由节点生成的视图：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ViewContent</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text: <span class="type">Text</span></span><br><span class="line">    <span class="keyword">var</span> view: <span class="type">AnyView</span></span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">ContentType</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">ContentType</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> text, view</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入多个 <code>ViewContent</code> 的时候，会检查并合并相邻的、同类型的 <code>ViewContent</code>，</p><p>后面再用 <code>VStack</code> 把一个个的 paragraph 串起来即可得到完整的视图，</p><p>测试了下，<em>同一文档的加载速度提升了约 5x</em></p><h2 id="图片和自定义块的支持"><a href="#图片和自定义块的支持" class="headerlink" title="图片和自定义块的支持"></a>图片和自定义块的支持</h2><p>通过 <code>ImageDisplayable</code> 和 <code>BlockDirectiveDisplayable</code>，允许开发者自己定义如何显示相关内容，</p><p><strong>学习了<a href="../tags/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">类型擦除</a>的实现方案</strong>。</p><h2 id="AdaptiveGrid"><a href="#AdaptiveGrid" class="headerlink" title="AdaptiveGrid"></a>AdaptiveGrid</h2><p>由于向后兼容了一个大版本导致无法直接使用新的 Grid 组件，</p><p>因此，还需对老版本系统提供一个类似的视图，</p><p>于是写了一个 <code>AdaptiveGrid</code>，其表现行为与 <code>Grid</code> 几乎一致。</p><p>后面我应该会再写一篇博客来说说其背后的实现原理。</p><p><img src="/img/the-road-of-markdown-view/AdaptiveGrid-tweet.jpeg"></p><p><strong>学习了 <code>@resultBuilder</code> 的构建</strong>，在这里再次感谢肘子哥的两篇博客：</p><ol><li><a href="https://www.fatbobman.com/posts/viewBuilder1/">ViewBuilder 研究（上）—— 掌握 Result builders</a></li><li><a href="https://www.fatbobman.com/posts/viewBuilder2/">ViewBuilder 研究（下） —— 从模仿中学习</a></li></ol><h2 id="SVG-增强"><a href="#SVG-增强" class="headerlink" title="SVG 增强"></a>SVG 增强</h2><p>一直以来，SVG 的渲染都是由 <code>SVGKit</code> 来处理的，</p><p>但是问题是，有编译警告、 Package 过于臃肿 且 部分SVG无法正确渲染。</p><p>最近改用了原生的 <code>WKWebView</code> 来渲染 SVG（相当于一个网页）</p><p><img src="/img/the-road-of-markdown-view/SVG-tweet.jpeg"></p><p><strong>学习了如何使用 JS 来获取网页元素的大小</strong>，以此来作为最终整个 SVG 的大小，</p><p>并且能够根据可用宽度来自动判断是否启用滚动条等等…</p><p>具体的实现可以在代码中找到，我不在做过多的赘述。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>道路不是一帆风顺的，总要在跌跌撞撞中成长，</p><p>但庆幸的是，这个自主项目，<em>我做出了自己满意的样子</em>，耶～</p><p>项目地址：<a href="https://github.com/LiYanan2004/MarkdownView">Github</a> OR <a href="https://swiftpackageindex.com/LiYanan2004/MarkdownView">Swift Package Index</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;熟悉我的朋友应该知道，我一直在开发一个框架，&lt;/p&gt;
&lt;p&gt;用于在 SwiftUI 中以原生的方式来渲染 Markdown 文本。&lt;/p&gt;
&lt;p&gt;P.S. 这篇文章也是在我做的编辑器中完成的。&lt;/p&gt;
&lt;p&gt;早晨发布了 &lt;a href=&quot;https://github.com/LiYanan2004/MarkdownView/releases&quot;&gt;MarkdownView&lt;/a&gt; 的 &lt;code&gt;1.0.0-rc&lt;/code&gt;，也就是正式版的候选版本，&lt;/p&gt;
&lt;p&gt;写这篇文章主要是想回顾和总结一路过来的技术点和一些解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="swift" scheme="https://liyanan2004.github.io/tags/swift/"/>
    
    <category term="MarkdownView" scheme="https://liyanan2004.github.io/tags/MarkdownView/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 上更安全地使用 EasyConnect</title>
    <link href="https://liyanan2004.github.io/use-easy-connect-safely-on-your-mac/"/>
    <id>https://liyanan2004.github.io/use-easy-connect-safely-on-your-mac/</id>
    <published>2023-01-17T10:16:52.408Z</published>
    <updated>2023-01-17T12:48:52.145Z</updated>
    
    <content type="html"><![CDATA[<p>起因还是偶然在 B 站刷到这么一个视频：</p><iframe src="//player.bilibili.com/player.html?aid=435357348&bvid=BV163411Z7BD&cid=967016106&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>哟，原来是个流氓软件啊，草！！！！！！</p><span id="more"></span><p>安装它，主要是因为学校内网要用 VPN 才能登陆，</p><p>起初安装完我就发现有后台权限的开关，</p><p>我也尝试关掉了，但是没法连接了（表现为一直在初始化）</p><p><img src="/img/use-easy-connect-safely-on-your-mac/initializing.jpeg"></p><h2 id="为什么说他流氓"><a href="#为什么说他流氓" class="headerlink" title="为什么说他流氓"></a>为什么说他流氓</h2><h3 id="后台持续活动"><a href="#后台持续活动" class="headerlink" title="后台持续活动"></a>后台持续活动</h3><p>打开“活动监视器”（Windows 上是 “任务管理器”），</p><p>就能找到名为 <code>EasyMonitor</code> 和 <code>ECAgent</code> 的两个进程，关键是以 <code>root</code> 权限运行，</p><p><img src="/img/use-easy-connect-safely-on-your-mac/easy-monitor.jpeg"><br><img src="/img/use-easy-connect-safely-on-your-mac/ecagent.jpeg"></p><p>意味着，他想干嘛就干嘛，不需要我任何授权，我也浑然不知。</p><p>观察了一会儿，CPU 一直都有 0.3 - 0.5 的占用，</p><p>意味着，有少量代码在持续运行，在干嘛，不知道。</p><p>尝试关掉它？呵呵，太小看它了。<strong>关了又自动启动了。</strong></p><h3 id="安装了系统根证书"><a href="#安装了系统根证书" class="headerlink" title="安装了系统根证书"></a>安装了系统根证书</h3><p>打开 <code>钥匙串访问 - 系统钥匙串 - 系统 - 证书</code>，搜索 <code>Sangfor</code>，</p><p>就能看到一个 <code>自己颁给自己</code> 的一个证书，到 2117 年过期…</p><p><img src="/img/use-easy-connect-safely-on-your-mac/self-given-cert.png"></p><p>理论上这样可以劫持 HTTPS 活动。</p><blockquote><p>引用 <a href="https://soulike.tech/article/64">在 macOS 上安全使用 EasyConnect</a> 的说法：</p><p>以 root 权限常驻进程，意味着这些进程可以读取和写入任何东西；</p><p>安装根证书，意味着可以直接进行中间人攻击。因此我们需要解决这些问题。</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>具体方法可以参考 <a href="https://soulike.tech/article/64">在 macOS 上安全使用 EasyConnect</a></p><h3 id="关闭自启动-和-后台驻留"><a href="#关闭自启动-和-后台驻留" class="headerlink" title="关闭自启动 和 后台驻留"></a>关闭自启动 和 后台驻留</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">rm</span> -r -f /Library/LaunchDaemons/com.sangfor.EasyMonitor.plist</span><br><span class="line"><span class="built_in">rm</span> -r -f /Library/LaunchAgents/com.sangfor.ECAgentProxy.plist</span><br></pre></td></tr></table></figure><blockquote><p>以上代码适用于 Mac</p></blockquote><h3 id="重启电脑"><a href="#重启电脑" class="headerlink" title="重启电脑"></a>重启电脑</h3><p>一定要重启‼️因为现在它还有后台驻留的权限‼️</p><h3 id="删除根证书"><a href="#删除根证书" class="headerlink" title="删除根证书"></a>删除根证书</h3><p>在 <code>钥匙串访问 - 系统钥匙串 - 系统 - 证书</code> 下搜索 <code>Sangfor</code>，删除对应的所有证书。</p><hr><p>到此，<strong>开机自启动</strong> 和 <strong>后台驻留</strong> 的问题解决了，但是 EasyConnect 也彻底用不了了，</p><p>可能会出现 “一直初始化中…” 的问题。</p><h3 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h3><p>上面那个参考链接里面给出了具体脚本，有打开和关闭两个，</p><p>我将他们统一了，<a href="/assets/easyconnect">点这里下载</a></p><p>这是一个没有扩展名的文件，用文本编辑器打开就能看到 bash 命令。</p><h4 id="为脚本添加运行权限"><a href="#为脚本添加运行权限" class="headerlink" title="为脚本添加运行权限"></a>为脚本添加运行权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x &lt;easyconnect 文件路径&gt;</span><br></pre></td></tr></table></figure><blockquote><p>图标变成一个黑色的框框，里面写着 <code>exec</code> 就对了。</p></blockquote><h4 id="导入我的脚本"><a href="#导入我的脚本" class="headerlink" title="导入我的脚本"></a>导入我的脚本</h4><p>把 <code>easyconnect</code> 放到 <code>/usr/local/bin</code> 文件夹下。</p><blockquote><p>这个目录可能需要在访达中按 <kbd>Command</kdb> + <kbd>Shift</kdb> + <kbd>G</kdb> 后输入。<br><img src="/img/use-easy-connect-safely-on-your-mac/go-to-bash-path.jpeg"></p></blockquote><h3 id="一切就绪"><a href="#一切就绪" class="headerlink" title="一切就绪"></a>一切就绪</h3><h4 id="安全地启动"><a href="#安全地启动" class="headerlink" title="安全地启动"></a>安全地启动</h4><ul><li>使用 EasyConnect 的时候，只需在终端输入这行命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easyconnnect open</span><br></pre></td></tr></table></figure><article class="message is-danger">                <div class="message-body">            <p>在使用过程中不要关闭终端窗口‼️</p>        </div>    </article><p>虽然但是，</p><p>你可能会发现，<code>EasyMonitor</code> 和 <code>ECAgent</code> 仍然是以 root 权限运行的，</p><p>因此还需要手动关闭他们。</p><h4 id="彻底地关闭"><a href="#彻底地关闭" class="headerlink" title="彻底地关闭"></a>彻底地关闭</h4><ul><li>断开 VPN 后，除了退出 <code>EasyConnect</code> 本身，需要执行这行命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easyconnect <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><p>这样一来，刚才启动的 <code>EasyMonitor</code> 和 <code>ECAgent</code> 就会被关闭，</p><p>由于没有后台驻留的权限，也就不会重新启动了。</p><p>整个方案是<em>按需使用</em>的策略，因为 <code>EasyMonitor</code> 和 <code>ECAgent</code> 是初始化时必要的进程。</p><h4 id="快捷指令"><a href="#快捷指令" class="headerlink" title="快捷指令"></a>快捷指令</h4><p>如果你觉得整个过程比较复杂，</p><p>也可以使用我制作的快捷指令：<a href="https://www.icloud.com/shortcuts/085b7d286bfe4c3b839b1deda8f3756c">Toggle Easy Connect</a> 来让这一切变得自动化。</p><p>快捷指令会自动检测 <code>EasyMonitor</code> 的运行情况来作为 <code>EasyConnect</code> 是否正在运行的标志，</p><p>进而自动选择合适的命令。</p><h3 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h3><ul><li>登陆之后闪退</li></ul><p>重启电脑即可。这是由于某些组建启动了多次后产生了冲突。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因还是偶然在 B 站刷到这么一个视频：&lt;/p&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=435357348&amp;bvid=BV163411Z7BD&amp;cid=967016106&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;哟，原来是个流氓软件啊，草！！！！！！&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="网络安全" scheme="https://liyanan2004.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="macOS" scheme="https://liyanan2004.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>理解函数中的泛型 &amp; 泛型约束 —— 究竟谁才是入口？</title>
    <link href="https://liyanan2004.github.io/generic-type-function-entry-point/"/>
    <id>https://liyanan2004.github.io/generic-type-function-entry-point/</id>
    <published>2023-01-16T14:04:04.767Z</published>
    <updated>2023-01-16T15:59:27.054Z</updated>
    
    <content type="html"><![CDATA[<p>继续接上篇，做完 <code>AnyMyCollection</code> 之后，</p><p>我又添加了一个扩展来修改 <code>CustomCollection</code> 在特定类型下的行为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">CustomCollection</span> <span class="title class_">where</span> <span class="title class_">Element</span> == <span class="title class_">Int</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>Element</code> 是 <code>Int</code> 时，不管三七二十一，直接返回 <code>[4, 5, 6]</code></p><p>但是，运行是发现了这样的现象：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection <span class="operator">=</span> <span class="type">CustomCollection</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(collection.allValues()) <span class="comment">// [4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">any</span> <span class="operator">=</span> <span class="type">AnyMyCollection</span>(collection)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">any</span>.allValues()) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>同一个东西，擦除类型之后就不受 <code>Element == Int</code> 约束了嘛？<del>不是</del></p><p>写了一个最小可复现问题的代码，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection <span class="operator">=</span> <span class="type">CustomCollection</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">genericFuntion</span>&lt;<span class="type">C</span>: <span class="type">MyCollection</span>&gt;(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">C</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(base.allValues()) <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">genericFuntion(collection)</span><br></pre></td></tr></table></figure><p>重新来看这个函数，</p><p><code>base</code> 是一个符合 <code>MyCollection</code> 协议的类型，</p><p>从程序的角度看，调用函数的时候，它会去找一个入口，</p><p>在这里，入口就应该是让 <code>CustomCollection</code> 符合协议的那个 <code>allValues()</code>，</p><p>而 <code>Element == Int</code> 约束则可以理解为，当符合条件时，对 <code>allValues()</code> 进行重写，</p><p>这里真正让 <code>CustomCollection</code> 符合 <code>MyCollection</code> 的是不受约束的那个扩展中的方法。</p><blockquote><p>仔细一想，貌似实际操作中貌似不会这样“重写”函数，</p><p>而是会对一些特定的类型增加一个特殊的函数，</p><p>比如：对于类型是 <code>Int</code> 的 <code>Array</code> 增加求平均值的函数等等。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;继续接上篇，做完 &lt;code&gt;AnyMyCollection&lt;/code&gt; 之后，&lt;/p&gt;
&lt;p&gt;我又添加了一个扩展来修改 &lt;code&gt;CustomCollection&lt;/code&gt; 在特定类型下的行为：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CustomCollection&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Element&lt;/span&gt; == &lt;span class=&quot;title class_&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;allValues&lt;/span&gt;() -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Element&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当 &lt;code&gt;Element&lt;/code&gt; 是 &lt;code&gt;Int&lt;/code&gt; 时，不管三七二十一，直接返回 &lt;code&gt;[4, 5, 6]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是，运行是发现了这样的现象：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; collection &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CustomCollection&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(collection.allValues()) &lt;span class=&quot;comment&quot;&gt;// [4, 5, 6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;AnyMyCollection&lt;/span&gt;(collection)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;any&lt;/span&gt;.allValues()) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="泛型" scheme="https://liyanan2004.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的类型擦除（下）—— 从模仿中学习</title>
    <link href="https://liyanan2004.github.io/type-erasure-in-swift-2/"/>
    <id>https://liyanan2004.github.io/type-erasure-in-swift-2/</id>
    <published>2023-01-16T03:57:30.567Z</published>
    <updated>2023-01-16T07:31:58.383Z</updated>
    
    <content type="html"><![CDATA[<p>上篇博客中，我们初步了解了为什么需要一个 Type Eraser ，</p><p>也分享了一个简单实现 Type Erasure 的方案。</p><p>为了更加深入了解类型擦除，我们还是得来看看 Swift 自带的一些 Type Eraser 是如何实现的。</p><p>目标是：理解一下其基本思路，并且仿制一个出来。</p><span id="more"></span><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>为了方便理解，我们聚焦于一个 Type Eraser：<code>AnyIterator</code></p><p>为什么是它呢？</p><p>因为它出现在<a href="https://github.com/apple/swift/blob/main/stdlib/public/core/ExistentialCollection.swift">源码</a>的最上面😂，而且下面的 <code>AnySequence</code> 和 <code>AnyCollection</code> 都得回到 <code>AnyIterator</code>。</p><p>先看源码（我这里去除了注释和一些不太重要的代码，方便大家阅读）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@inline</span>(never)</span><br><span class="line"><span class="keyword">@usableFromInline</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">func</span> <span class="title function_">_abstract</span>(</span><br><span class="line">  <span class="params">file</span>: <span class="type">StaticString</span> <span class="operator">=</span> <span class="keyword">#file</span>,</span><br><span class="line">  <span class="params">line</span>: <span class="type">UInt</span> <span class="operator">=</span> <span class="keyword">#line</span></span><br><span class="line">) -&gt; <span class="type">Never</span> &#123;</span><br><span class="line">  <span class="built_in">fatalError</span>(<span class="string">&quot;Method must be overridden&quot;</span>, file: file, line: line)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">AnyIterator</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">@usableFromInline</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> _box: _AnyIteratorBoxBase<span class="operator">&lt;</span><span class="type">Element</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">I</span>: <span class="type">IteratorProtocol</span>&gt;(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">I</span>) <span class="keyword">where</span> <span class="type">I</span>.<span class="type">Element</span> <span class="operator">==</span> <span class="type">Element</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>._box <span class="operator">=</span> _IteratorBox(base)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyIterator</span>: <span class="title class_">IteratorProtocol</span> &#123;</span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">next</span>() -&gt; <span class="type">Element</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> _box.next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@_fixed_layout</span></span><br><span class="line"><span class="keyword">@usableFromInline</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">_AnyIteratorBoxBase</span>&lt;<span class="title class_">Element</span>&gt;: <span class="title class_">IteratorProtocol</span> &#123;</span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">deinit</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">func</span> <span class="title function_">next</span>() -&gt; <span class="type">Element</span>? &#123; _abstract() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@_fixed_layout</span></span><br><span class="line"><span class="keyword">@usableFromInline</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_IteratorBox</span>&lt;<span class="title class_">Base</span>: <span class="title class_">IteratorProtocol</span>&gt;</span><br><span class="line">  : <span class="title class_">_AnyIteratorBoxBase</span>&lt;<span class="title class_">Base</span>.<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">Base</span>) &#123; <span class="keyword">self</span>._base <span class="operator">=</span> base &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">deinit</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">next</span>() -&gt; <span class="type">Base</span>.<span class="type">Element</span>? &#123; <span class="keyword">return</span> _base.next() &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@usableFromInline</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理一下，一共用到两个类，<code>_AnyIteratorBoxBase</code>（基类） 和 <code>_IteratorBox</code>（中转类）</p><p>基类符合协议，并且用一些占位符做好填充（需要在中转类中重写这些方法）</p><p>中转类继承自基类，并从外部接收一个符合协议的实例，用来重写（覆盖）基类中的方法和属性。</p><p>最后，用一个对外的 Type Eraser 再做一次中转。</p><h2 id="仿制过程中的一些坑"><a href="#仿制过程中的一些坑" class="headerlink" title="仿制过程中的一些坑"></a>仿制过程中的一些坑</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: - Protocol and Type Eraser</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyMyCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyMyCollection</span>: <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="operator">…</span></span><br><span class="line"><span class="comment">// MARK: - Custom Types</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Animals</span>: <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Digits</span>: <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Type Erasure</span></span><br><span class="line"><span class="comment">// ❌ Heterogeneous collection literal could only be inferred to &#x27;[Any]&#x27;; add explicit type annotation if this is intentional</span></span><br><span class="line"><span class="keyword">var</span> collections <span class="operator">=</span> [<span class="type">AnyMyCollection</span>(<span class="type">Animals</span>()), <span class="type">AnyMyCollection</span>(<span class="type">Digits</span>())] </span><br></pre></td></tr></table></figure><p>首先，我注意到的是类型推断的问题，</p><p>可以尝试下 <code>AnyCollection</code>，<code>AnyIterator</code> 这些，发现 <code>collections</code> 中的 Element 变成了 <code>Any</code>，</p><p>也就引出了第一个问题。</p><h3 id="Swift-的特性之一：类型推断"><a href="#Swift-的特性之一：类型推断" class="headerlink" title="Swift 的特性之一：类型推断"></a>Swift 的特性之一：类型推断</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type: AnyIterator&lt;Int&gt;</span></span><br><span class="line"><span class="type">AnyIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].makeIterator())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type: AnyIterator&lt;String&gt;</span></span><br><span class="line"><span class="type">AnyIterator</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].makeIterator())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type: [AnyIterator&lt;Any&gt;]</span></span><br><span class="line">[<span class="type">AnyIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].makeIterator()), <span class="type">AnyIterator</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].makeIterator())]</span><br></pre></td></tr></table></figure><p>这俩东西的 Element 类型不一致，为什么放在一起还能编译并且 Element 变成 <code>Any</code> 了呢？</p><p>实际上，是 Swift 的类型推断在干活</p><p>而如果换一种写法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intIterator <span class="operator">=</span> <span class="type">AnyIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].makeIterator())</span><br><span class="line"><span class="keyword">let</span> stringIterator <span class="operator">=</span> <span class="type">AnyIterator</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].makeIterator())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> together <span class="operator">=</span> [intIterator, stringIterator] <span class="comment">// ❌ Heterogeneous collection literal could only be inferred to &#x27;[Any]&#x27;; add explicit type annotation if this is intentional</span></span><br></pre></td></tr></table></figure><p>就会报错，原因就在于这两个东西的类型不一致，不能放在一个 Array 里，</p><blockquote><p>提前声明的话，编译器会固化类型，是什么就是什么</p><p><code>AnyIterator&lt;String&gt;</code> 和 <code>AnyIterator&lt;Int&gt;</code> 是两种不同的类型，它们的 Element 不同</p></blockquote><p>更加详细的可以看我问的这个帖子：<a href="https://forums.swift.org/t/anycollection-with-different-generic-types/62558">AnyCollection with different generic types</a> </p><hr><p>对 <code>Array</code> 再做一个扩展，让任何数组都符合协议。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Array</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123; <span class="keyword">self</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrayCollection <span class="operator">=</span> [<span class="type">AnyMyCollection</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])] <span class="comment">// ✅ AnyMyCollection&lt;Any&gt;</span></span><br></pre></td></tr></table></figure><p>这里的两个类型分别是：<code>AnyMyCollection&lt;Int&gt;</code> 和 <code>AnyMyCollection&lt;String&gt;</code></p><p>但是再加上 <code>Digits</code> 却报错了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Heterogeneous collection literal could only be inferred to &#x27;[Any]&#x27;; add explicit type annotation if this is intentional</span></span><br><span class="line"><span class="keyword">let</span> collection <span class="operator">=</span> [<span class="type">AnyMyCollection</span>(<span class="type">Digits</span>()), <span class="type">AnyMyCollection</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])]</span><br></pre></td></tr></table></figure><p>这就是第二个问题。</p><h3 id="编译时推断-和-运行时推断"><a href="#编译时推断-和-运行时推断" class="headerlink" title="编译时推断 和 运行时推断"></a>编译时推断 和 运行时推断</h3><p>分析一下每一个 <code>AnyMyCollection </code> 的类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnyMyCollection&lt;Digits.Element&gt;</span></span><br><span class="line"><span class="type">AnyMyCollection</span>(<span class="type">Digits</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnyMyCollection&lt;Int&gt;</span></span><br><span class="line"><span class="type">AnyMyCollection</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnyMyCollection&lt;String&gt;</span></span><br><span class="line"><span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])</span><br></pre></td></tr></table></figure><p>按照之前说的，应该统一成 <code>AnyMyCollection&lt;Any&gt;</code> 才对，</p><p>但是，仔细观察能够发现，传入 <code>AnyMyCollection</code> 的类型分别是 <code>Digits</code>, <code>Array&lt;Int&gt;</code> 和 <code>Array&lt;String&gt;</code>，</p><p>第一个不带泛型，而其他的均带泛型，</p><p>对于 <code>Array&lt;Element&gt;</code> 来说，编译时是可以确定 Element 的具体类型的,</p><p>且 <code>Array</code> 中的 <code>Element</code> 和 <code>MyCollection</code> 中的 <code>Element</code> 是一致的，</p><p>因此，编译时可以确定出 <code>AnyMyCollection</code> 中的 <code>Element</code>（即 <code>Array</code> 中的 <code>Element</code>）的类型。</p><p>但对于 <code>Digits</code> 来说，由于其本身没有泛型，所以 <code>Element</code> 事实上是被“隐藏”起来的，</p><p>编译器无法推断其类型，因此不能自动变成 <code>Any</code>。</p><p><img src="/img/type-erasure-in-swift/non-generic-compiletime-infer.jpeg"></p><blockquote><p>直到运行时才能确定出 <code>Digits.Element</code> 的具体类型是 <code>Int</code></p><p><img src="/img/type-erasure-in-swift/non-generic-runtime-infer.jpeg"></p></blockquote><p>有解决办法嘛？有。</p><p>就是给 <code>Digits</code> 加上 Element 的泛型。</p><blockquote><p>但是加上泛型再去限定只能是 <code>Int</code> 就有点脱裤子放屁的感觉了😂</p></blockquote><p>最终我把它变成了一个 <code>CustomCollection</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> content: [<span class="type">Element</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">content</span>: <span class="type">Element</span>...) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content.append(contentsOf: content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">CustomCollection</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AnyMyCollection"><a href="#AnyMyCollection" class="headerlink" title="AnyMyCollection"></a>AnyMyCollection</h2><p>上面两个问题研究透彻之后，从 Protocol 到 Type Eraser 的仿制也就完成了。</p><p>最终代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">MyCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>]</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// MARK: - AnyMyCollection</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyMyCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _box: _AnyMyCollectionBase<span class="operator">&lt;</span><span class="type">Element</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>&lt;<span class="type">C</span>: <span class="type">MyCollection</span>&gt;(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">C</span>) <span class="keyword">where</span> <span class="type">Element</span> <span class="operator">==</span> <span class="type">C</span>.<span class="type">Element</span> &#123;</span><br><span class="line">        _box <span class="operator">=</span> _MyCollectionBox(base)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyMyCollection</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        _box.allValues()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_MyCollectionBox</span>&lt;<span class="title class_">Base</span>: <span class="title class_">MyCollection</span>&gt;: <span class="title class_">_AnyMyCollectionBase</span>&lt;<span class="title class_">Base</span>.<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">Base</span>) &#123;</span><br><span class="line">        _base <span class="operator">=</span> base</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Base</span>.<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> _base.allValues()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_AnyMyCollectionBase</span>&lt;<span class="title class_">Element</span>&gt;: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;This method should be overwritten. Line 35.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Array</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123; <span class="keyword">self</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// - MARK: Custom Collection</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> content: [<span class="type">Element</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">content</span>: <span class="type">Element</span>...) &#123; <span class="keyword">self</span>.content.append(contentsOf: content) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">CustomCollection</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123; content &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> collections <span class="operator">=</span> [<span class="type">AnyMyCollection</span>(<span class="type">CustomCollection</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)), <span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个过程耗费了差不过两天的时间，最重要的是要理解这一种 Type Eraser 的基本原理和实现，</p><p>踩踩坑，更能加深印象🥲</p><p>不过 Swift 5.7 有了 <code>any</code> 关键字，不知道能不能取代掉 Type Eraser，期待一下 Swift 6。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上篇博客中，我们初步了解了为什么需要一个 Type Eraser ，&lt;/p&gt;
&lt;p&gt;也分享了一个简单实现 Type Erasure 的方案。&lt;/p&gt;
&lt;p&gt;为了更加深入了解类型擦除，我们还是得来看看 Swift 自带的一些 Type Eraser 是如何实现的。&lt;/p&gt;
&lt;p&gt;目标是：理解一下其基本思路，并且仿制一个出来。&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="类型擦除" scheme="https://liyanan2004.github.io/tags/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
    
    <category term="泛型" scheme="https://liyanan2004.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的类型擦除（上）—— 为什么 &amp; 怎么做</title>
    <link href="https://liyanan2004.github.io/type-erasure-in-swift/"/>
    <id>https://liyanan2004.github.io/type-erasure-in-swift/</id>
    <published>2023-01-13T14:04:01.879Z</published>
    <updated>2023-01-16T07:30:14.376Z</updated>
    
    <content type="html"><![CDATA[<p>探索类型擦除的原理和实现，常见的类型橡皮擦有：AnyView、AnyShape、AnyCollection…</p><span id="more"></span><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">S</span>: <span class="type">StringProtocol</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="type">S</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个协议（或者叫接口）可以创建一个 Tool </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Pen</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line">        <span class="string">&quot;Pen&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pencil</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line">        <span class="string">&quot;Pencil&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ruler</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line">        <span class="string">&quot;Ruler&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我要创建一个 <code>ToolController</code> 来管理我的“工具们”，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ToolController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来获取所有工具，但是遇到一个问题，</p><p>这里虽然只有三个工具，可以一个个写，</p><p>但是这只是个例子，在实际应用中这里的数量是未知的，</p><p>应该如何获取所有的工具呢？大致思路是这样的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tools: [<span class="type">Tool</span>] <span class="operator">=</span> [<span class="type">Pen</span>(), <span class="type">Pencil</span>(), <span class="type">Ruler</span>()]</span><br></pre></td></tr></table></figure><p>但是，<code>Tool</code> 中有 <code>associatedtype</code>，因此 <strong><code>Tool</code> 不能当作类型来使用</strong>，</p><p>好消息是，在 Swift 5.7 或更新版本中，可以使用 <code>any Tool</code> 来作为类型，</p><p>但是之后的所有结果都带有 <code>any</code>，可能不会是你预期的结果。</p><blockquote><p>比如 <code>any View</code> 不符合 <code>View</code> 协议…</p></blockquote><p>除了这样的数组创建和使用上可能会受阻，在多分支返回是也会出问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ToolController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> currentTool <span class="operator">=</span> <span class="string">&quot;pen&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ❌ Function declares an opaque return type &#x27;some Tool&#x27;, but the return statements in its body do not have matching underlying types.</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getCurrentTool</span>() -&gt; <span class="keyword">some</span> <span class="type">Tool</span> &#123; </span><br><span class="line">        <span class="keyword">switch</span> currentTool &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;pen&quot;</span>: <span class="keyword">return</span> <span class="type">Pen</span>()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ruler&quot;</span>: <span class="keyword">return</span> <span class="type">Ruler</span>()</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="type">Pencil</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>some</code> 关键字表示不透明的类型（opaque type），</p><p>我们只需要知道他是一个符合 <code>Tool</code> 协议的东西，</p><p>但是具体是什么不知道，也不关心是什么，交给编译器去推断。</p></blockquote><p>因为在三个 case 中返回的结果类型不一致，编译时无法推断 <code>Tool</code> 的类型，</p><p>而三个分支中使用的 Tool 是完全不同的东西，不能直接替换。</p><p>如果还有更多分支的话情况会更加复杂，</p><p>因此，若想统一类型，不妨创建一个类型橡皮擦来擦除原本的类型，</p><p>这时候每一个分支返回的类型都是“橡皮擦”的类型，也就没问题了。</p><h2 id="类型擦除的原理以及实现"><a href="#类型擦除的原理以及实现" class="headerlink" title="类型擦除的原理以及实现"></a>类型擦除的原理以及实现</h2><ul><li>创建橡皮擦（以下称之为 Eraser），Eraser 要符合你的 <code>Protocol</code></li></ul><blockquote><p>橡皮擦的名称一般是 <code>Any</code> + 协议名</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyTool</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化中传入一个<strong>要被擦除类型的 Tool</strong> （下面称之为Type）</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">Tool</span>&gt;(<span class="params">erasing</span> <span class="params">tool</span>: <span class="type">T</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建中间变量来传递 Type 中的必要的方法和属性</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">let</span> _name: <span class="type">S</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">Tool</span>&gt;(<span class="params">erasing</span> <span class="params">tool</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    _name <span class="operator">=</span> (tool.name() <span class="keyword">as?</span> <span class="type">S</span>) <span class="operator">??</span> <span class="string">&quot;IDK.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后，用 <code>name</code> 来填补 Eraser 中需要的方法</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyTool</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">S</span> <span class="operator">=</span> <span class="type">String</span> <span class="comment">// This must be a type that conforms to StringProtocol.</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">let</span> _name: <span class="type">S</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">Tool</span>&gt;(<span class="params">erasing</span> <span class="params">tool</span>: <span class="type">T</span>) &#123;</span><br><span class="line">        _name <span class="operator">=</span> (tool.name() <span class="keyword">as?</span> <span class="type">S</span>) <span class="operator">??</span> <span class="string">&quot;IDK.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="type">S</span> &#123;</span><br><span class="line">        _name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们将类型从 <code>some StringProtocol</code> 变成了 <code>String</code></p><blockquote><p>如果是 <code>View</code>，一般会把他替换成 <code>AnyView</code> </p><p>这里如果不能将 <code>tool.name()</code> 转换成 <code>String</code> 的话就返回 <code>IDK.</code></p></blockquote><p>这样一来，我们就可以将 <code>Pen</code>、<code>Pencil</code>、<code>Ruler</code> 都变成 <code>AnyTool</code>，解决了以上两个问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ToolController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> allTools: [<span class="type">AnyTool</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">var</span> currentTool <span class="operator">=</span> <span class="string">&quot;pen&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getAllTools</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> tools <span class="operator">=</span> [<span class="type">AnyTool</span>(erasing: <span class="type">Pen</span>()), <span class="type">AnyTool</span>(erasing: <span class="type">Pencil</span>()), <span class="type">AnyTool</span>(erasing: <span class="type">Ruler</span>())]</span><br><span class="line">        allTools <span class="operator">=</span> tools</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getCurrentTool</span>() -&gt; <span class="keyword">some</span> <span class="type">Tool</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> currentTool &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;pen&quot;</span>: <span class="keyword">return</span> <span class="type">AnyTool</span>(erasing: <span class="type">Pen</span>())</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ruler&quot;</span>: <span class="keyword">return</span> <span class="type">AnyTool</span>(erasing: <span class="type">Ruler</span>())</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="type">AnyTool</span>(erasing: <span class="type">Pencil</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现原理参考 <a href="https://fabernovel.github.io/2020-06-03/approaches-to-type-erasure-in-swift">Approaches to Type Erasure in Swift</a> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;探索类型擦除的原理和实现，常见的类型橡皮擦有：AnyView、AnyShape、AnyCollection…&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="类型擦除" scheme="https://liyanan2004.github.io/tags/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>记录一次  官方召回计划的维修</title>
    <link href="https://liyanan2004.github.io/macbook-pro-keyboard-repair/"/>
    <id>https://liyanan2004.github.io/macbook-pro-keyboard-repair/</id>
    <published>2023-01-12T14:45:59.741Z</published>
    <updated>2023-01-12T15:00:40.419Z</updated>
    
    <content type="html"><![CDATA[<p>还记得几年前苹果推出一项<a href="https://support.apple.com/zh-cn/keyboard-service-program-for-mac-notebooks">召回计划</a>，</p><p>所有使用了蝶式键盘的 MacBook 出现键盘问题都可以免费换键盘，</p><p>当时买电脑的时候买了 Apple Care+ </p><p>本想换块新电池，结果死活卡在 80% - 82%，</p><p>当时店员就跟我说让我留意键盘问题，保修时间是<strong>4年</strong></p><span id="more"></span><h2 id="具体表现"><a href="#具体表现" class="headerlink" title="具体表现"></a>具体表现</h2><p>键盘的 N 按下去没反应，需要大力出奇迹才能打出字母，</p><blockquote><p>按照惯例，第一时间录下视频作为证据</p><p>这种问题很有可能会在第二天自动恢复，我这里就是，所以要留下证据，非常重要‼️</p></blockquote><h2 id="预约维修"><a href="#预约维修" class="headerlink" title="预约维修"></a>预约维修</h2><p>第一次出现问题时没太在意，就录了个视频也就没管，</p><p>好巧不巧，前几天晚上又遇到了，赶紧预约了第二天的天才吧。</p><h2 id="跟天才吧的天才交流"><a href="#跟天才吧的天才交流" class="headerlink" title="跟天才吧的天才交流"></a>跟天才吧的天才交流</h2><p>当天早上，问题又“自动修复”了😂，所以说录视频很重要‼️，</p><p>天才吧里的天才按了很久也没能成功复现，但是也没有因此说电脑没问题（不像某品牌那么傲慢），</p><p>最后是把 N 键拆开之后直接触碰触点复现了一个我从来没有遇到的问题😂</p><p><strong>我遇到的问题是：按下去没反应</strong></p><p><strong>他测试出来的是：按下去之后反应两下😂</strong></p><p><img src="/img/macbook-pro-keyboard-repair/diagnose.png" alt="不愧是天才"></p><p>既然这样，那就维修呗，<strong>更换了整个键盘总成和上壳套件</strong>。</p><blockquote><p>包括 键盘、Touch Bar、Touch ID、触控板、掌托一直到USB-C的外壳 以及 电池。</p></blockquote><p>约等于 <strong>换了半台新电脑</strong>，</p><p>后面就是签个字，跑个诊断，就欧了～</p><p><img src="/img/macbook-pro-keyboard-repair/price.png"></p><blockquote><p>我的整个更换的周期是1天半。</p><p>新换的套件都带 90 天保修。</p><p>也总算是给我换到电池了！满血复活！！</p></blockquote><h2 id="谈谈售后"><a href="#谈谈售后" class="headerlink" title="谈谈售后"></a>谈谈售后</h2><p>售后的目的就是让消费者放心的去使用自己购买的产品，</p><p>如果你有潜在的质量问题，给予客户这样的召回保修是很有必要的，</p><p>之前我的 Apple Pencil 出现了插在 iPad 上反向充电（越充越少）的问题，</p><p>在现场不能复现，但是我录了视频，确实有这样的问题，他们也依然给我做了更换，</p><p>就觉得苹果在这方面做的特别好，真真切切的帮助客户尝试解决问题（更换之后也确实是没再出现过这个情况了），</p><p>但是这绝对不是意味着可以这样子去骗保，这是我的底线。</p><p>最近也在各大平台上也看到了华为拒保 Pocket S 屏幕质量问题的案例，</p><p>很多人明明没有认为损坏，就是一点点掉漆都被认定为人为损坏拒保了，</p><p><del>只能说，割韭菜割的真爽…</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;还记得几年前苹果推出一项&lt;a href=&quot;https://support.apple.com/zh-cn/keyboard-service-program-for-mac-notebooks&quot;&gt;召回计划&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;所有使用了蝶式键盘的 MacBook 出现键盘问题都可以免费换键盘，&lt;/p&gt;
&lt;p&gt;当时买电脑的时候买了 Apple Care+ &lt;/p&gt;
&lt;p&gt;本想换块新电池，结果死活卡在 80% - 82%，&lt;/p&gt;
&lt;p&gt;当时店员就跟我说让我留意键盘问题，保修时间是&lt;strong&gt;4年&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Apple Store" scheme="https://liyanan2004.github.io/tags/Apple-Store/"/>
    
    <category term="Macbook Pro" scheme="https://liyanan2004.github.io/tags/Macbook-Pro/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 中的 Conditional Scene</title>
    <link href="https://liyanan2004.github.io/swiftui-conditional-scene/"/>
    <id>https://liyanan2004.github.io/swiftui-conditional-scene/</id>
    <published>2023-01-01T07:03:17.787Z</published>
    <updated>2023-02-18T07:35:49.261Z</updated>
    
    <content type="html"><![CDATA[<p>在 SwiftUI 中，有时需要对新的 API 做隔离来保证兼容老的系统。</p><p>在 View 中很好解决，但是在 Scene 中，你可能会看到这样的错误提示。</p><article class="message is-danger">                <div class="message-body">            <p>Closure containing control flow statement cannot be used with result builder ‘SceneBuilder’</p>        </div>    </article><article class="message is-success">                <div class="message-body">            <h3 id="2023-2-17更新"><a href="#2023-2-17更新" class="headerlink" title="2023.2.17更新"></a>2023.2.17更新</h3><p>在 Xcode 13.4 beta 中，<code>SceneBuilder</code> 支持了 <code>buildExpression</code>，<code>buildLimitedAvailability</code> 和 <code>buildOptional</code>。</p>        </div>    </article><span id="more"></span><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>解决方法就是把需要用条件判断给出不同的 Scene 的部分单独写成一个函数，</p><p>返回 <code>some Scene</code>，同时不要使用 <code>@SceneBuilder</code></p><blockquote><p><code>body</code> 中默认使用 <code>@SceneBuilder</code> 来支持多个 Scene</p><p>在 if-condition 中返回的可能是两个不同类型的 Scene，但是函数的返回值是<br>不透明的 <code>some Scene</code>，因此只要返回的内容是符合 Scene 协议的就可以。</p><p>可以参考我在 <a href="https://stackoverflow.com/a/74973406/20326422">stackoverflow</a> 上的回答</p></blockquote><p>最后，上代码！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">YourApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line">        <span class="comment">// macOS</span></span><br><span class="line">        conditionalWindowScene().windowStyle(.hiddenTitleBar)</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line">        <span class="comment">// Other Platform</span></span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line">    <span class="comment">/// Extract your conditional scene to avoid using `@SceneBuilder`</span></span><br><span class="line">    <span class="comment">/// In `body`, SwiftUI will always use `@SceneBuilder` to build multiple Scene.</span></span><br><span class="line">    <span class="comment">/// Because the result type is `some Scene`,</span></span><br><span class="line">    <span class="comment">/// you just need to return a type that conforms to `Scene` Protocol.</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">conditionalWindowScene</span>() -&gt; <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">macOS</span> <span class="number">13.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">            <span class="comment">/// `Window` Scene is only available on macOS 13.0+</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">Window</span>(<span class="string">&quot;App&quot;</span>, id: <span class="string">&quot;MAIN&quot;</span>) &#123;</span><br><span class="line">                <span class="type">ContentView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/// Otherwise, using `WindowGroup`</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">WindowGroup</span> &#123;</span><br><span class="line">                <span class="type">ContentView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 SwiftUI 中，有时需要对新的 API 做隔离来保证兼容老的系统。&lt;/p&gt;
&lt;p&gt;在 View 中很好解决，但是在 Scene 中，你可能会看到这样的错误提示。&lt;/p&gt;
&lt;article class=&quot;message is-danger&quot;&gt;
        
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;p&gt;Closure containing control flow statement cannot be used with result builder ‘SceneBuilder’&lt;/p&gt;

        &lt;/div&gt;
    &lt;/article&gt;

&lt;article class=&quot;message is-success&quot;&gt;
        
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;h3 id=&quot;2023-2-17更新&quot;&gt;&lt;a href=&quot;#2023-2-17更新&quot; class=&quot;headerlink&quot; title=&quot;2023.2.17更新&quot;&gt;&lt;/a&gt;2023.2.17更新&lt;/h3&gt;&lt;p&gt;在 Xcode 13.4 beta 中，&lt;code&gt;SceneBuilder&lt;/code&gt; 支持了 &lt;code&gt;buildExpression&lt;/code&gt;，&lt;code&gt;buildLimitedAvailability&lt;/code&gt; 和 &lt;code&gt;buildOptional&lt;/code&gt;。&lt;/p&gt;

        &lt;/div&gt;
    &lt;/article&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>探索 Swift Concurrency (1)</title>
    <link href="https://liyanan2004.github.io/swift-concurrency/"/>
    <id>https://liyanan2004.github.io/swift-concurrency/</id>
    <published>2022-12-13T09:53:49.148Z</published>
    <updated>2022-12-13T14:05:58.258Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 并发是 WWDC 21 上的一个重磅改进，提供了 <code>async/await</code> 的语法，</p><p>让代码结构更加流程化，更加便于理解和调试。</p><p>官方指南：<a href="https://developer.apple.com/news/?id=o140tv24">开始使用 Swift 并发</a></p><p><img src="https://developer.apple.com/assets/elements/icons/swift/swift-64x64_2x.png"></p><span id="more"></span><h2 id="actor"><a href="#actor" class="headerlink" title="actor"></a>actor</h2><blockquote><p>WWDC Sessions：</p><p><a href="https://developer.apple.com/wwdc22/110351">利用  Swift 并发消除数据争用</a></p><p><a href="https://developer.apple.com/wwdc21/10133">利用 Swift Actor 保护可变状态</a></p></blockquote><p>actor 和 class 很相似，都是 Ref Type。</p><p>但是 Actor 保证了内部数据的唯一性，即一次只有一个函数能调用，</p><p><strong>如果有多个函数同时调用该属性，则需要排队</strong>。</p><p>保证了在并发环境下的数据竞争 (Data Races)。</p><p>其用法与 struct&#x2F;class 一致。</p><h2 id="Main-Actor"><a href="#Main-Actor" class="headerlink" title="Main Actor"></a>Main Actor</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10133">利用 Swift Actor 保护可变状态</a></p></blockquote><p>简单理解就是：主线程。</p><p>所有的 UI Updates 都需要在 Main Actor 环境下完成。</p><p>有以下几种写法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span> &#123; <span class="meta">@MainActor</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// UI Updates</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">updateUI</span>() &#123;</span><br><span class="line">    <span class="comment">// UI Updates</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span> &#123; </span><br><span class="line">    <span class="keyword">await</span> <span class="type">MainActor</span>.run &#123;</span><br><span class="line">        <span class="comment">// UI Updates</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> show <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetch</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data <span class="operator">=</span> <span class="operator">...</span></span><br><span class="line">        updateUI() <span class="comment">// Run on the MainActor because the whole class is in MainActor.</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUI</span>() &#123;</span><br><span class="line">        <span class="comment">// UI Updates</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-let"><a href="#async-let" class="headerlink" title="async let"></a>async let</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p></blockquote><p><code>async let</code> 可以让多个操作一起执行，到真正需要使用的时候再 <code>await</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fetchImage</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Fetching Image</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMetaData</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Fetching Meta Data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">let</span> image <span class="operator">=</span> fetchImage() <span class="comment">// Start fetching while the CPU is free.</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">let</span> metaData <span class="operator">=</span> fetchMetaData() <span class="comment">// The same as image.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Do other work...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the image and backup.</span></span><br><span class="line">display(<span class="keyword">await</span> image)</span><br><span class="line">backup(<span class="keyword">await</span> metaData) <span class="comment">// This is just an example...haha</span></span><br></pre></td></tr></table></figure><p>这个例子中，如果只用 <code>await</code>，image 和 metaData 会依次获取，在获取期间程序挂起 (Suspended)，不会继续向下执行。</p><p><strong>如果 image 的获取比较慢，那么就会卡在这里。</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fetchImage</span>() <span class="keyword">async</span> &#123; &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMetaData</span>() <span class="keyword">async</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> image <span class="operator">=</span> <span class="keyword">await</span> fetchImage() <span class="comment">// It&#x27;s stuck here.😅</span></span><br><span class="line"><span class="keyword">let</span> metaData <span class="operator">=</span> <span class="keyword">await</span> fetchMetaData() <span class="comment">// As well as here.😅</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Do other work...</span></span><br><span class="line"><span class="comment">// Because we were stuck before, so we waste a large amount of time.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the image and backup.</span></span><br><span class="line">display(image)</span><br><span class="line">backup(metaData) <span class="comment">// This is just an example...haha</span></span><br></pre></td></tr></table></figure><h2 id="Task-Group"><a href="#Task-Group" class="headerlink" title="Task Group"></a>Task Group</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p></blockquote><p>多个任务并发执行的时候可以使用 Task Group</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Throwing Task Group</span></span><br><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">Void</span>.<span class="keyword">self</span>) &#123; group <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> <span class="keyword">self</span>.tasks &#123;</span><br><span class="line">            group.addTask &#123;</span><br><span class="line">                <span class="keyword">try</span> <span class="keyword">await</span> <span class="operator">...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Non-Throwing Task Group</span></span><br><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">await</span> withTaskGroup(of: <span class="type">Void</span>.<span class="keyword">self</span>) &#123; group <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> <span class="keyword">self</span>.tasks &#123;</span><br><span class="line">            group.addTask &#123;</span><br><span class="line">                <span class="keyword">await</span> <span class="operator">...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TaskGroup</code> 常用在一组数据的处理，例如：获取所有商品的缩略图…</p><p>由于有很多 tasks 同时执行，因此就会有潜在的 Data Races</p><p>我们不能直接对外部的变量赋值（这是一个编译时检查错误）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> integers <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Throwing Task Group</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">foo</span>() &#123;</span><br><span class="line">    <span class="type">Task</span>.detached &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">Int</span>.<span class="keyword">self</span>) &#123; group <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">                group.addTask &#123;</span><br><span class="line">                   <span class="comment">// Return some values here.</span></span><br><span class="line">                    <span class="keyword">return</span> (<span class="number">0</span><span class="operator">...</span><span class="number">100</span>).randomElement()<span class="operator">!</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Read values from the group.</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> value <span class="keyword">in</span> group &#123;</span><br><span class="line">                <span class="keyword">self</span>.integers.append(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Non-Throwing Task Group</strong> 方法一致，这里就不再演示了。</p><blockquote><p>这里使用 <code>Task.detached</code> 是为了防止受到 Context 的影响，</p><p>例如：下载所有商品的缩略图应在其他线程上完成，而非主线程。</p><p>往下看就知道我在说什么了。</p></blockquote><h2 id="Task-vs-Task-detached"><a href="#Task-vs-Task-detached" class="headerlink" title="Task vs. Task.detached"></a>Task vs. Task.detached</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p><p>相关文章：<a href="https://www.hackingwithswift.com/quick-start/concurrency/whats-the-difference-between-a-task-and-a-detached-task">What’s the difference between a task and a detached task?</a></p></blockquote><p>Task 提供了一种 async 的环境来执行异步操作。</p><blockquote><p><strong>Task</strong>: Runs the given nonthrowing operation asynchronously as part of a new top-level task <strong>on behalf of the current actor</strong>.</p><p><strong>Task.detached</strong>: Runs the given throwing operation asynchronously as part of a <strong>new top-level</strong> task.</p></blockquote><p>Task 会继承当前的 Context 和 Priority，</p><p>Honestly，这句话我理解了很久，Priority好理解，但是 Context 是什么？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskManager1</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">doWorks</span>() &#123;</span><br><span class="line">        <span class="type">Task</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Execute on main thread: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Task</span>.detached &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;Execute on main thread: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskManager2</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">doWorks</span>() &#123;</span><br><span class="line">        <span class="type">Task</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Execute on main thread: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>诸如线程之类的属性就是所谓的 Context。</p><p>也就是说上层的运行环境会被继承到 Task 中来，如果不想要这种继承，使用 <code>Task.detached</code></p><p>需要注意的是，使用 <code>Task.detached</code> 需要显式捕获 <code>self</code>，即 <code>self.variable</code></p><h2 id="Task-ObservableObject"><a href="#Task-ObservableObject" class="headerlink" title="Task + ObservableObject"></a>Task + ObservableObject</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10134">探索 Swift 中的结构化并发</a></p><p>相关文章：<a href="https://www.hackingwithswift.com/quick-start/concurrency/whats-the-difference-between-a-task-and-a-detached-task">What’s the difference between a task and a detached task?</a></p></blockquote><p>在 SwiftUI 中，很多情况下我们会使用 <code>@ObservedObject</code> 或者 <code>@StateObject</code> 来管理 ViewModel</p><p>这时候，该视图就会在 <code>MainActor</code> 下执行。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 1: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Task</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 2: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，你会发现控制台中 Task 1 和 Task 2 仍然会按次序执行。</p><p>这是因为 <code>@ObservedObject</code> 或者 <code>@StateObject</code> 限制了视图运行在 MainActor 上，</p><p>所有的更新都发生在主线程，而 Task 会继承 Context，因此这时候可以使用 <code>Task.detached</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 1: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Task</span>.detached &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Task 2: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都换成 <code>Task.detached</code> 之后，Task 1&#x2F;2 就是一起执行了，也不会都挤在主线程上跑了。</p><h2 id="nonisolated"><a href="#nonisolated" class="headerlink" title="nonisolated"></a>nonisolated</h2><blockquote><p>相关文章：<a href="https://www.hackingwithswift.com/quick-start/concurrency/how-to-make-parts-of-an-actor-nonisolated">How to make parts of an actor nonisolated</a></p></blockquote><p>还记得最开始的 <strong><a href="#actor">actor</a></strong> 吧，</p><p>多个函数调用它的时候只有其中一个能执行，其余的等待上一个执行完成再进入，</p><p>这被称为隔离，很有效地避免了 Data Races</p><p>但是并非 actor 中所有的函数、属性都需要被隔离开。</p><ul><li>对 actor 扩展 Hashable 协议时，<code>hash(into hasher: inout Hasher)</code> 不支持 <code>async/await</code></li></ul><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10133?time=855">利用 Swift Actor 保护可变状态</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">MyHashableActor</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> staticValue <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> variable <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">MyHashableActor</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">MyHashableActor</span>, <span class="params">rhs</span>: <span class="type">MyHashableActor</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// Comforms to Equatable</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">nonisolated</span> <span class="keyword">func</span> <span class="title function_">hash</span>(<span class="params">into</span> <span class="params">hasher</span>: <span class="keyword">inout</span> <span class="type">Hasher</span>) &#123;</span><br><span class="line">        hasher.combine(staticValue)</span><br><span class="line">        hasher.combine(variable) <span class="comment">// 🙅</span></span><br><span class="line">     <span class="comment">// This is an error because variable is mutable</span></span><br><span class="line">      <span class="comment">// and the `hash(into hasher: inout Hasher)` is nonisolated.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>actor 内部的函数的其中一部分可以并发执行，充分利用多核性能。</li></ul><blockquote><p>WWDC Session： <a href="https://developer.apple.com/wwdc22/110350?time=1053">Swift 并发的可视化与优化</a> </p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">Compressor</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> state <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Since the function is nonisolated </span></span><br><span class="line">    <span class="comment">// and we still need to update the state,</span></span><br><span class="line">    <span class="comment">// so, the `compressFile()` funtion is marked `async`.</span></span><br><span class="line">    <span class="comment">// Now, the programme will only be blocked when updating the state.</span></span><br><span class="line">    <span class="keyword">nonisolated</span> <span class="keyword">func</span> <span class="title function_">compressFile</span>(<span class="keyword">_</span> <span class="params">file</span>: <span class="type">File</span>) <span class="keyword">async</span> -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> updateState() <span class="comment">// Blocked here to avoid Data races.</span></span><br><span class="line">        <span class="keyword">let</span> data <span class="operator">=</span> compress(file) <span class="comment">// This operation can be ran simultaneously.</span></span><br><span class="line">        <span class="keyword">await</span> updateState() <span class="comment">// Also blocked here to avoid Data races.</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateState</span>() &#123; state.toggle() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> compressor <span class="operator">=</span> <span class="type">Compressor</span>()</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files &#123;</span><br><span class="line">    <span class="type">Task</span>.detached &#123;</span><br><span class="line">        <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">await</span> <span class="keyword">self</span>.compressor.compressFile(file)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">compress</span>(<span class="keyword">_</span> <span class="params">file</span>: <span class="type">File</span>) -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">    <span class="comment">// Compress file.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行逻辑（个人理解）"><a href="#执行逻辑（个人理解）" class="headerlink" title="执行逻辑（个人理解）"></a>执行逻辑（个人理解）</h2><blockquote><p>WWDC Session：<a href="https://developer.apple.com/wwdc21/10254">Swift 并发功能：幕后故事</a></p></blockquote><ol><li><code>@MainActor</code> 中的 Task<ul><li>Task 中的操作均由 <strong>主线程</strong> 完成，继承 <code>MainActor</code></li><li>遇到 <code>await</code> 时， 程序被挂起，待执行的代码被迁移到其他线程（根据 priority 依次执行），主线程释放，供其他需要在主线程运行的代码继续。</li><li><code>await</code> 结果可用之后，仍呆在原地，等待主线程空闲，之后回到主线程，恢复之前的状态继续向下执行。</li></ul></li><li>非 <code>@MainActor</code> 中的 Task<ul><li>Task 中的操作均会在 <strong>其他线程</strong> 中完成，继承上层的 Context</li><li>后两点与上一条基本一致</li></ul></li><li><code>Task.detached</code> <ul><li>会创建一个新的线程来完成操作。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Swift 并发是 WWDC 21 上的一个重磅改进，提供了 &lt;code&gt;async/await&lt;/code&gt; 的语法，&lt;/p&gt;
&lt;p&gt;让代码结构更加流程化，更加便于理解和调试。&lt;/p&gt;
&lt;p&gt;官方指南：&lt;a href=&quot;https://developer.apple.com/news/?id=o140tv24&quot;&gt;开始使用 Swift 并发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/assets/elements/icons/swift/swift-64x64_2x.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="Concurrency" scheme="https://liyanan2004.github.io/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Google Chromium Encryption Structure</title>
    <link href="https://liyanan2004.github.io/chromium-encryption-structure/"/>
    <id>https://liyanan2004.github.io/chromium-encryption-structure/</id>
    <published>2022-12-06T05:13:26.262Z</published>
    <updated>2022-12-06T05:22:13.291Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-warning">                <div class="message-body">            <p>来源：<a href="https://gist.github.com/creachadair/937179894a24571ce9860e2475a2d2ec">GitHub</a>，仅供学习使用。</p>        </div>    </article><p>Google Chrome stores browser cookies in an SQLite database.  The database has two tables, <code>meta</code> containing format and version metadata, and <code>cookies</code> with the contents of the cookies. The <code>cookies</code> table uses this schema:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- To reproduce: sqlite path/to/Cookies .schema</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cookies (</span><br><span class="line">   creation_utc     <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- microseconds since epoch</span></span><br><span class="line">   host_key         TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- domain</span></span><br><span class="line">   name             TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">value</span>            TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   path             TEXT     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   expires_utc      <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- microseconds since epoch</span></span><br><span class="line">   is_secure        <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   is_httponly      <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   last_access_utc  <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   has_expires      <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">1</span>,</span><br><span class="line">   is_persistent    <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">1</span>,</span><br><span class="line">   priority         <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">1</span>,</span><br><span class="line">   encrypted_value  <span class="type">BLOB</span>              <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   samesite         <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">-1</span>,</span><br><span class="line">   source_scheme    <span class="type">INTEGER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>  <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">   <span class="keyword">UNIQUE</span> (host_key, name, path)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Timestamps"><a href="#Timestamps" class="headerlink" title="Timestamps"></a>Timestamps</h2><p>The <code>expires_utc</code> and <code>creation_utc</code> fields contain timestamps given as integer numbers of microseconds elapsed since midnight 01-Jan-1601 UTC in the proleptic calendar. The Unix epoch is 11644473600 seconds after this moment.</p><h2 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h2><p>The <code>value</code> and <code>encrypted_value</code> fields are used to store cookie values. In practice, one or the other is populated, but not both.</p><table><thead><tr><th><code>value</code></th><th><code>encrypted_value</code></th><th>Description</th></tr></thead><tbody><tr><td>empty</td><td>non-empty</td><td>Value is encrypted</td></tr><tr><td>non-empty</td><td>empty</td><td>Value is unencrypted</td></tr><tr><td>empty</td><td>empty</td><td>Value is unencrypted</td></tr><tr><td>non-empty</td><td>non-empty</td><td>(not observed)</td></tr></tbody></table><h2 id="Storage-Format"><a href="#Storage-Format" class="headerlink" title="Storage Format"></a>Storage Format</h2><p>An encrypted value consists of a data packet that is encrypted with AES-128 in CBC mode. The encrypted data packet has the following format:</p><table><thead><tr><th>Bytes</th><th>Content</th><th>Description</th></tr></thead><tbody><tr><td>3</td><td>“v10” (0x76 0x31 0x30)</td><td>Version tag (unencrypted)</td></tr><tr><td>n</td><td>value</td><td>Payload (encrypted)</td></tr><tr><td>p</td><td>padding</td><td>Padding (encrypted), 1–16 bytes</td></tr></tbody></table><p>The encrypted portion of the packet (n+ p) contains a multiple of 16 bytes. If n is a multiple of 16, p &#x3D; 16; otherwise 1 ≤ p ≤ 15.</p><h3 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h3><p>Before encryption, p bytes of padding are added to the plaintext value to ensure a multiple of 16 bytes. At least one byte of padding is always added, so if the value is already a multiple of 16 bytes, p&#x3D;16 additional are added. Each padding byte has the value p, so if p&#x3D;5, the padding is the 5-byte sequence [5, 5, 5, 5, 5].</p><p>After decryption, the padding must be removed, and it can be used to verify that the decryption key was correct. The final byte of the decrypted packet must be a padding byte with value 1 ≤ p ≤ 16, and the last p bytes of the packet must contain the value p. Otherwise, the decryption key can be assumed to be incorrect.</p><h3 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h3><p>Encryption and decryption are performed using AES-128 in cipher-block chaining (CBC) mode with an initialization vector consisting of 16 space bytes (Unicode 32). The encryption key is described below. </p><h2 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h2><p>The 16-byte AES-128 encryption key is generated using the <a href="https://tools.ietf.org/html/rfc2898">PBKDF2 (RFC 2898)</a> algorithm from a user-provided passphrase. The key generation salt is the fixed string <code>saltysalt</code>. On macOS, Chrome uses 1003 iterations of the key generation algorithm; on Linux it uses 1 iteration. I don’t know what it does on Windows.</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-warning&quot;&gt;
        
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;p&gt;来源：&lt;a href=&quot;https://gist.github.com/creachadair/937179894a24571ce9860e2475a2d2ec&quot;&gt;GitHub&lt;/a&gt;，仅供学习使用。&lt;/p&gt;

        &lt;/div&gt;
    &lt;/article&gt;

&lt;p&gt;Google Chrome stores browser cookies in an SQLite database.  The database has two tables, &lt;code&gt;meta&lt;/code&gt; containing format and version metadata, and &lt;code&gt;cookies&lt;/code&gt; with the contents of the cookies. The &lt;code&gt;cookies&lt;/code&gt; table uses this schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- To reproduce: sqlite path/to/Cookies .schema&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; cookies (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   creation_utc     &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;-- microseconds since epoch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   host_key         TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;-- domain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   name             TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;            TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   path             TEXT     &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   expires_utc      &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;-- microseconds since epoch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   is_secure        &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   is_httponly      &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   last_access_utc  &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   has_expires      &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   is_persistent    &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   priority         &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   encrypted_value  &lt;span class=&quot;type&quot;&gt;BLOB&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   samesite         &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   source_scheme    &lt;span class=&quot;type&quot;&gt;INTEGER&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; (host_key, name, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="网络安全" scheme="https://liyanan2004.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="浏览器" scheme="https://liyanan2004.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发 -- URL 访问权限持久化（基于 Sandbox）</title>
    <link href="https://liyanan2004.github.io/sandbox-url-persistence/"/>
    <id>https://liyanan2004.github.io/sandbox-url-persistence/</id>
    <published>2022-11-08T14:09:58.698Z</published>
    <updated>2022-11-08T15:25:47.598Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见，最近有在好好学习哈哈，</p><p>今天来分享下基于 Sandbox 的 URL 访问权限持久化的方案。</p><p>写这篇文章的起因是：</p><p>简单浏览了下 <strong><a href="https://github.com/Tencent/lemon-cleaner">Tencent&#x2F;lemon-cleaner</a></strong> 的部分源码，</p><p>发现他们用 Apple Script 调用 Finder 操作文件，</p><p>这样很好地避免了权限问题，但是研究一番发现，<strong>没那么简单</strong>….</p><span id="more"></span><h2 id="Bookmark-大法"><a href="#Bookmark-大法" class="headerlink" title="Bookmark 大法"></a>Bookmark 大法</h2><p>这是我自己项目里使用的方法，</p><p>好处在于文件操作很自然， 不会让用户觉得自己的数据可以被随便乱翻（事实也确实是这样的）</p><ol><li><p>将 App Sandbox –&gt; File Access 内的 <code>User Selected File</code> 改为 <code>Read/Write</code></p></li><li><p>在项目的 entitlements 文件中添加这样一项 <code>com.apple.security.files.bookmarks.app-scope</code>，设为 <code>YES</code></p></li><li><p>使用 NSOpenPannel &#x2F; NSSavePannel 选择需要访问的文件（夹）</p></li></ol><blockquote><p>在 SwiftUI 中直接用 .fileImporter 之类的 modifer 就行</p><p>这样就拿到了用户选择的 URL 啦，因为是用户选择的，<strong>目前这个 URL 是有权访问的</strong></p><p><strong>注意，是目前，重启 app 就不行了</strong></p><p>因此我们需要把权限持久化。</p></blockquote><ol start="4"><li>保存 URL 的 bookmark</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AppStorage</span>(<span class="string">&quot;bookmark&quot;</span>) <span class="keyword">private</span> <span class="keyword">var</span> bookmark: <span class="type">Data</span>?</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  bookmark <span class="operator">=</span> <span class="keyword">try</span> url.bookmarkData(options: .withSecurityScope)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123; </span><br><span class="line">  <span class="built_in">print</span>(error.localizedDescription) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>（app 重启后）再次访问此 URL</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> bookmark <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">var</span> isStale <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="keyword">try</span> <span class="type">URL</span>(resolvingBookmarkData: bookmark, options: .withSecurityScope, relativeTo: <span class="literal">nil</span>, bookmarkDataIsStale: <span class="operator">&amp;</span>isStale)</span><br><span class="line">url.startAccessingSecurityScopedResource()</span><br><span class="line"><span class="comment">// Do some file-related works like move, duplicate, etc.</span></span><br><span class="line"><span class="comment">// try? FileManager.default.moveItem(at: a, to: b)</span></span><br><span class="line">url.stopAccessingSecurityScopedResource()</span><br></pre></td></tr></table></figure><blockquote><p><strong>start 和 stop 一定要成对！！</strong></p><p>这里属于是访问系统敏感数据，如果不及时 stop 的话系统可能会对 app 的权限做限制，</p><p>因此不能滥用，这就是 Sandbox 为什么安全、让人放心的原因了。</p><p><code>url.startAccessingSecurityScopedResource()</code> 也会返回一个布尔值，告诉你你是否真的可以这里的数据了，如果为 <code>true</code> 才能算成功。</p></blockquote><h2 id="Apple-Script-大法"><a href="#Apple-Script-大法" class="headerlink" title="Apple Script 大法"></a>Apple Script 大法</h2><p>Apple Script 实际上是代替用户操作的一种脚本，本质上是代替了手动的操作而已，因此这里可以操作所有文件了，在沙盒环境下当然是不会默认允许的。</p><blockquote><p>如果启用了 Hardened Runtime，要先在里面启用 Apple Events，否则无法弹出请求框。</p></blockquote><h3 id="非-Sandbox"><a href="#非-Sandbox" class="headerlink" title="非 Sandbox"></a>非 Sandbox</h3><p>如果在 非 Sandbox 环境下，只需要配置 <code>Privacy - AppleEvents Sending Usage Description</code> 告诉用户你执行的脚本的功能是干啥的就行。</p><p>然后就可以任意调用 applications了，例如，调用 Finder 来 move 文件之类的。</p><p>别慌！即使是非 Sandbox 也会有一步“自动化”授权的！</p><p><img src="/img/sandbox-url-persistence/automation-permission.png"></p><h3 id="Sandbox"><a href="#Sandbox" class="headerlink" title="Sandbox"></a>Sandbox</h3><p>在 Sandbox 环境下就会有限制了，不会让你能直接访问所有的 applications ，因为这可能会有潜在的恶意行为。</p><ol><li><p>你还是得配置 <code>Privacy - AppleEvents Sending Usage Description</code> 告诉用户你执行的脚本的功能是干啥的，</p></li><li><p>你在需要使用对应的 applications 之前需要去 entitlements 里提前声明。（用到几个写几个）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.temporary-exception.apple-events<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.Finder<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样你就可以在 app 中使用 NSAppleScript 执行脚本了。</p><p><strong>否则，会报错 -600</strong></p><p><strong>因为是模拟用户操作的脚本，因此在移动文件、删除文件的时候都会有系统提示音哦～</strong></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>目前我的项目中还是使用了 Bookmark 大法，更加简单，不会让用户觉得危险。</p><p>主要是 Apple Script 那些弹窗就蛮吓人了…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久不见，最近有在好好学习哈哈，&lt;/p&gt;
&lt;p&gt;今天来分享下基于 Sandbox 的 URL 访问权限持久化的方案。&lt;/p&gt;
&lt;p&gt;写这篇文章的起因是：&lt;/p&gt;
&lt;p&gt;简单浏览了下 &lt;strong&gt;&lt;a href=&quot;https://github.com/Tencent/lemon-cleaner&quot;&gt;Tencent&amp;#x2F;lemon-cleaner&lt;/a&gt;&lt;/strong&gt; 的部分源码，&lt;/p&gt;
&lt;p&gt;发现他们用 Apple Script 调用 Finder 操作文件，&lt;/p&gt;
&lt;p&gt;这样很好地避免了权限问题，但是研究一番发现，&lt;strong&gt;没那么简单&lt;/strong&gt;….&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="Sandbox" scheme="https://liyanan2004.github.io/tags/Sandbox/"/>
    
    <category term="macOS" scheme="https://liyanan2004.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>记录下 MarkdownView 的性能优化</title>
    <link href="https://liyanan2004.github.io/markdownview-performance-optimization/"/>
    <id>https://liyanan2004.github.io/markdownview-performance-optimization/</id>
    <published>2022-10-16T14:03:33.656Z</published>
    <updated>2023-01-01T07:08:06.232Z</updated>
    
    <content type="html"><![CDATA[<p>我的开源项目 MarkdownView 的 <strong><a href="https://github.com/LiYanan2004/MarkdownView/releases/tag/0.2.0">0.2.0 版本</a></strong> 终于发布了！</p><p>改版本带来了性能上的巨大进步：</p><blockquote><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><ul><li>Rendering is now <strong>at least 3x faster on ALL DEVICES</strong>.</li><li>Real-time previewing is now much much smoother.</li><li>Scrolling is much quicker and smoother <strong>with no frame drop</strong>.</li><li>Memory usage has been reduced by 30%</li></ul></blockquote><p>借此机会，记录下我的优化思路。</p><span id="more"></span><h2 id="前期表现"><a href="#前期表现" class="headerlink" title="前期表现"></a>前期表现</h2><ul><li>启动、初次渲染耗时长</li><li>渲染完成后上下滚动的时候掉帧严重（使用懒加载模式）</li><li>渲染完成后上下滚动的时候内存占用量太大了（关闭了懒加载模式）</li><li>用作“实时预览”的时候会卡，导致输入体验很糟糕</li></ul><p>综合以上表现，新功能部分也已经定型了，所以决定好好优化下性能，</p><p>至少在我这台 2019 款的 MacBook Pro 上不要有明显的卡顿吧…</p><h2 id="渲染性能优化"><a href="#渲染性能优化" class="headerlink" title="渲染性能优化"></a>渲染性能优化</h2><h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>我想先来介绍下 MarkdownView 的整套渲染流程，</p><p>如图所示：</p><p><img src="/img/markdownview-performance-optimization/how-to-render.jpeg"></p><p>本来以为是<del>在最后整合的时候 Layout 反复运算导致速度慢</del>，</p><p>最后我用我第一篇博客测试了下，启动渲染居然需要 20s，</p><p>属于是完全卡住的感觉，在 Xcode 中能看到 CPU 占用持续在 100% 左右，</p><p>最后定位到 <strong>分词模块</strong> 耗费了大量 CPU 时间，</p><p>这就是优化的重点了！！</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>分词模块的作用是保证文本都能以很短的形式呈现，</p><p>用于实现<strong>合理的</strong>自动换行，</p><p>但是分词模块依赖 Natural Language 框架进行分词，</p><p>本质上就是机器学习的分词，需要时间来完成，</p><p>同时所有的代码都是 <strong>同步执行（sync）</strong> 的，</p><p>上一个结束了才会执行下一个，</p><p>段落一多，大量的时间都被浪费在一段段分词了。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li><strong>异步执行（async）</strong>所有的分词操作，这样可以<strong>让所有段落的分词同时开始</strong></li></ul><p><img src="/img/markdownview-performance-optimization/sync-and-async-clocks.jpeg"></p><ul><li>文本渲染使用单独的 <code>TextView</code> 来渲染，<strong>默认显示空白等待分词结束后自动排版</strong></li></ul><p>还是用我的第一篇博客作为测试，加载速度从 20s 缩短到了 1s，内存占用也下降了 20%。</p><p><strong>这也是我为什么会在新版中弃用 懒加载 (Lazy Loading) 的主要原因。</strong></p><h2 id="实时预览性能优化"><a href="#实时预览性能优化" class="headerlink" title="实时预览性能优化"></a>实时预览性能优化</h2><h3 id="定位问题-1"><a href="#定位问题-1" class="headerlink" title="定位问题"></a>定位问题</h3><p>这里的问题具体表现在当我连续输入文本的时候，</p><p>CPU占用高，并且伴随 <strong>输入框</strong> 也很卡顿。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>接着上面的思路，</p><p>每次有微小变动的时候，MarkdownView 都会重新走整套流程，</p><p>本以为是异步处理得过于频繁导致卡顿，</p><p><del>于是就用Combine做了debounce处理，<strong>在输入间隙执行重新渲染</strong>，</del></p><p>问题没有解决，</p><p>而且，中文输入就没有问题，</p><p>重新考虑了下 渲染流程 和 SwiftUI 刷新机制，</p><p>每次有变动的时候，都要重新进入解析流程，</p><h4 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h4><p>不论是多打一个字母或是删除一个字母，都会重解析，</p><h4 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h4><p>输入拼音时本质上还没有让文本改变，不会重解析，</p><p>只有拼音转成文本之后，统一进行一次重解析，</p><p>So，</p><p>在英文状态下，过于频繁的重解析是导致卡顿的“罪魁祸首”。</p><h3 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li>对于一开始的文本输入做 debounce 处理，<strong>在输入间隙执行重解析、重渲染</strong>。</li></ul><p>这样一来，在连续输入字符的时候不会每一次都执行重新解析和渲染，</p><p>只有在我输入时的停顿处，才会刷新整个文档，执行一次重渲染，</p><p>这样既保证了预览的实时性，也提升了整体性能。</p><blockquote><h4 id="做了debounce延迟，怎么保证预览的实时性？"><a href="#做了debounce延迟，怎么保证预览的实时性？" class="headerlink" title="做了debounce延迟，怎么保证预览的实时性？"></a><strong>做了debounce延迟，怎么保证预览的实时性？</strong></h4><p>在真正地连续快速输入的情况下，是不会去看预览的</p><p>但凡少许停顿了下（0.3s），MarkdownView就已经自动刷新完成了</p><p>避免了在快速输入时，频繁地做无用的刷新</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在开发过程中，需要注意：</p><p>对于一些比较耗时的部分（比如：下载、大量机器学习预测…）使用异步（async）来完成，</p><p>在 UI 出现问题时，关注下 UI 是如何刷新的，</p><p>看看是不是有过多繁杂的任务，</p><p>重新思考下现实中的逻辑，可以试着降低他们的优先级，</p><p>浓缩一下就是：<strong>主线程（main thread）不要有过多连续繁杂且无用的运算！！</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的开源项目 MarkdownView 的 &lt;strong&gt;&lt;a href=&quot;https://github.com/LiYanan2004/MarkdownView/releases/tag/0.2.0&quot;&gt;0.2.0 版本&lt;/a&gt;&lt;/strong&gt; 终于发布了！&lt;/p&gt;
&lt;p&gt;改版本带来了性能上的巨大进步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;Performance&quot;&gt;&lt;a href=&quot;#Performance&quot; class=&quot;headerlink&quot; title=&quot;Performance&quot;&gt;&lt;/a&gt;Performance&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Rendering is now &lt;strong&gt;at least 3x faster on ALL DEVICES&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Real-time previewing is now much much smoother.&lt;/li&gt;
&lt;li&gt;Scrolling is much quicker and smoother &lt;strong&gt;with no frame drop&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Memory usage has been reduced by 30%&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;借此机会，记录下我的优化思路。&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="代码调优" scheme="https://liyanan2004.github.io/tags/%E4%BB%A3%E7%A0%81%E8%B0%83%E4%BC%98/"/>
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>ASCII码对应关系</title>
    <link href="https://liyanan2004.github.io/ascii/"/>
    <id>https://liyanan2004.github.io/ascii/</id>
    <published>2022-10-14T02:48:55.883Z</published>
    <updated>2022-10-14T03:02:58.280Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-warning">        <div class="message-header"><p>版权声明</p></div>        <div class="message-body">            <p>图片来源于<a href="https://baike.baidu.com/item/ASCII/309296">百度百科</a></p>        </div>    </article><p><img src="/img/ascii/table.jpeg"></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>大小写转换 <strong>±32</strong></li><li>A-Z &lt; a-z</li><li>字母范围：65-90，97-122</li><li>数字范围：48-57</li><li>“A”为65；“a”为97；“0”为 48</li><li><strong>ASCII 可输出 %d（字符的 ASCII 码的十进制数），也可输出 %c（对应的字符）。</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;article class=&quot;message is-warning&quot;&gt;
        &lt;div class=&quot;message-header&quot;&gt;&lt;p&gt;版权声明&lt;/p&gt;
&lt;/div&gt;
        &lt;div class=&quot;message-body&quot;&gt;
            &lt;</summary>
      
    
    
    
    <category term="学个习" scheme="https://liyanan2004.github.io/categories/%E5%AD%A6%E4%B8%AA%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言 之 格式化输出</title>
    <link href="https://liyanan2004.github.io/formatted-output-in-c-programming-language/"/>
    <id>https://liyanan2004.github.io/formatted-output-in-c-programming-language/</id>
    <published>2022-10-08T13:34:26.173Z</published>
    <updated>2022-10-12T02:56:08.343Z</updated>
    
    <content type="html"><![CDATA[<p>前两天上课的时候，老师让输出个九九乘法表。</p><p>但是实际输出会觉得怪怪的，没对齐，尝试下对齐吧。</p><p>这样也不是不行是吧，哈哈。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1x1=1&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2x1=2 2x2= 4&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3x1=3 3x2= 6 3x3= 9&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4x1=4 4x2= 8 4x3=12 4x4=16&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5x1=5 5x2=10 5x3=15 5x4=20 5x5=25&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6x1=6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=36&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;7x1=7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=49&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;8x1=8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=64&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;9x1=9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81&quot;</span>);</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="没对齐的版本"><a href="#没对齐的版本" class="headerlink" title="没对齐的版本"></a>没对齐的版本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对占位符格式化输出"><a href="#对占位符格式化输出" class="headerlink" title="对占位符格式化输出"></a>对占位符格式化输出</h2><p>就用乘法表作为例子，</p><p>输出的是 Int（%d），</p><p>需要对一位数的结果进行扩展，让它能够<strong>对齐下面的两位数数字</strong>。</p><p><strong>格式化输出格式：</strong>% (-&#x2F;0) [位宽 n] . [精度 m] d</p><article class="message is-warning">                <div class="message-body">            <p>格式中我增加了空格，方便阅读，<strong>实际代码中不能有空格哦</strong>。</p>        </div>    </article><p><strong>解释一下：</strong></p><p>位宽 n：输出的内容占命令行的 n 个字符宽度，比如：[4]（n&#x3D;1），[ 4]（n&#x3D;2）</p><p>精度m：小数点后保留几位（貌似默认是 6 好像），比如 <code>printf(&quot;%.2f&quot;, 3.1415);</code> 输出的是3.14</p><p>-&#x2F;0：这一部分是对自定义格式的一个补充。</p><ul><li><p>‘-‘：靠左输出（方括号并非输出内容，只是方便看到空格哈）</p><ul><li><code>printf(&quot;%-2d, 1&quot;);</code> 输出的是：[1 ]</li><li><code>printf(&quot;%2d, 1&quot;);</code> 输出的是：[ 1]</li></ul></li><li><p>‘0’：<strong>左侧</strong>补0⃣️</p><ul><li><code>printf(&quot;%02d, 1&quot;);</code> 输出的是：01</li></ul></li><li><p>-&#x2F;0 <strong>只能用一个</strong>，其中（靠左输出’-‘）的优先级更高，所以 <code>printf(&quot;%-02d&quot;, 1);</code> 输出的是 [1 ]</p></li></ul><article class="message is-primary">                <div class="message-body">            <p>%d 就没有必要设置精度了哈，三个格式化可以独立使用，但是要设置精度的话记得加上 <strong>Dot（.）</strong> 哦！</p><p>比如：</p><ul><li><code>%-2d</code></li><li><code>%05d</code></li><li><code>%.3f</code></li><li><code>%-5.2f</code></li><li>…</li></ul><p>可以在电脑上试试看这些的输出，更好地理解下。</p>        </div>    </article><h2 id="改进后的版本"><a href="#改进后的版本" class="headerlink" title="改进后的版本"></a>改进后的版本</h2><ol><li>靠右对齐：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%2d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>输出结果</p></div>        <div class="message-body">            <p>1x1&#x3D; 1<br>2x1&#x3D; 2 2x2&#x3D; 4<br>3x1&#x3D; 3 3x2&#x3D; 6 3x3&#x3D; 9<br>4x1&#x3D; 4 4x2&#x3D; 8 4x3&#x3D;12 4x4&#x3D;16<br>5x1&#x3D; 5 5x2&#x3D;10 5x3&#x3D;15 5x4&#x3D;20 5x5&#x3D;25<br>6x1&#x3D; 6 6x2&#x3D;12 6x3&#x3D;18 6x4&#x3D;24 6x5&#x3D;30 6x6&#x3D;36<br>7x1&#x3D; 7 7x2&#x3D;14 7x3&#x3D;21 7x4&#x3D;28 7x5&#x3D;35 7x6&#x3D;42 7x7&#x3D;49<br>8x1&#x3D; 8 8x2&#x3D;16 8x3&#x3D;24 8x4&#x3D;32 8x5&#x3D;40 8x6&#x3D;48 8x7&#x3D;56 8x8&#x3D;64<br>9x1&#x3D; 9 9x2&#x3D;18 9x3&#x3D;27 9x4&#x3D;36 9x5&#x3D;45 9x6&#x3D;54 9x7&#x3D;63 9x8&#x3D;72 9x9&#x3D;81 </p>        </div>    </article><ol start="2"><li>补零版本：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%02d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>输出结果</p></div>        <div class="message-body">            <p>1x1&#x3D;01<br>2x1&#x3D;02 2x2&#x3D;04<br>3x1&#x3D;03 3x2&#x3D;06 3x3&#x3D;09<br>4x1&#x3D;04 4x2&#x3D;08 4x3&#x3D;12 4x4&#x3D;16<br>5x1&#x3D;05 5x2&#x3D;10 5x3&#x3D;15 5x4&#x3D;20 5x5&#x3D;25<br>6x1&#x3D;06 6x2&#x3D;12 6x3&#x3D;18 6x4&#x3D;24 6x5&#x3D;30 6x6&#x3D;36<br>7x1&#x3D;07 7x2&#x3D;14 7x3&#x3D;21 7x4&#x3D;28 7x5&#x3D;35 7x6&#x3D;42 7x7&#x3D;49<br>8x1&#x3D;08 8x2&#x3D;16 8x3&#x3D;24 8x4&#x3D;32 8x5&#x3D;40 8x6&#x3D;48 8x7&#x3D;56 8x8&#x3D;64<br>9x1&#x3D;09 9x2&#x3D;18 9x3&#x3D;27 9x4&#x3D;36 9x5&#x3D;45 9x6&#x3D;54 9x7&#x3D;63 9x8&#x3D;72 9x9&#x3D;81 </p>        </div>    </article><ol start="3"><li>靠左对齐：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%-2d &quot;</span>, i, j, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-dark">        <div class="message-header"><p>输出结果</p></div>        <div class="message-body">            <p>1x1&#x3D;1<br>2x1&#x3D;2   2x2&#x3D;4<br>3x1&#x3D;3   3x2&#x3D;6   3x3&#x3D;9<br>4x1&#x3D;4   4x2&#x3D;8   4x3&#x3D;12 4x4&#x3D;16<br>5x1&#x3D;5   5x2&#x3D;10 5x3&#x3D;15 5x4&#x3D;20 5x5&#x3D;25<br>6x1&#x3D;6   6x2&#x3D;12 6x3&#x3D;18 6x4&#x3D;24 6x5&#x3D;30 6x6&#x3D;36<br>7x1&#x3D;7   7x2&#x3D;14 7x3&#x3D;21 7x4&#x3D;28 7x5&#x3D;35 7x6&#x3D;42 7x7&#x3D;49<br>8x1&#x3D;8   8x2&#x3D;16 8x3&#x3D;24 8x4&#x3D;32 8x5&#x3D;40 8x6&#x3D;48 8x7&#x3D;56 8x8&#x3D;64<br>9x1&#x3D;9   9x2&#x3D;18 9x3&#x3D;27 9x4&#x3D;36 9x5&#x3D;45 9x6&#x3D;54 9x7&#x3D;63 9x8&#x3D;72 9x9&#x3D;81 </p>        </div>    </article>]]></content>
    
    
    <summary type="html">&lt;p&gt;前两天上课的时候，老师让输出个九九乘法表。&lt;/p&gt;
&lt;p&gt;但是实际输出会觉得怪怪的，没对齐，尝试下对齐吧。&lt;/p&gt;
&lt;p&gt;这样也不是不行是吧，哈哈。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;1x1=1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;2x1=2 2x2= 4&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;3x1=3 3x2= 6 3x3= 9&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;4x1=4 4x2= 8 4x3=12 4x4=16&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;5x1=5 5x2=10 5x3=15 5x4=20 5x5=25&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;6x1=6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=36&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;7x1=7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=49&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;8x1=8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=64&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;9x1=9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学个习" scheme="https://liyanan2004.github.io/categories/%E5%AD%A6%E4%B8%AA%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://liyanan2004.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="写代码" scheme="https://liyanan2004.github.io/tags/%E5%86%99%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>JsDelivr不灵了？淦！</title>
    <link href="https://liyanan2004.github.io/jsdelivr-can-no-longer-accelerate-static-resources/"/>
    <id>https://liyanan2004.github.io/jsdelivr-can-no-longer-accelerate-static-resources/</id>
    <published>2022-10-05T07:03:05.022Z</published>
    <updated>2022-10-11T11:40:15.164Z</updated>
    
    <content type="html"><![CDATA[<p>还记得几年前做博客的时候，</p><p>图片上传到 GitHub 上，</p><p>用 JsDelivr 拉取 GitHub 上的静态资源，</p><p>速度嘎嘎快，</p><p>但是最近发现，</p><p>静态资源貌似都被重定向到 githubusercontent 上去了，</p><p><strong>可是，官网上却写着：</strong></p><p><img src="/img/jsdelivr-can-no-longer-accelerate-static-resources/important-in-china.jpeg"></p><span id="more"></span><h2 id="DNS-被污染"><a href="#DNS-被污染" class="headerlink" title="DNS 被污染"></a>DNS 被污染</h2><p>GitHub 上的 issue：</p><blockquote><p>Jsdelivr has been block again in China. Some places are polluted by DNS and are resolved to the IP of websites such as Facebook, Twitter, etc. Although other places can be resolved to the correct IP, they are reset by GWF during the TLS handshake and still inaccessible.<br>But fortunately, <code>fastly.jsdelivr.net</code> is not polluted at present.</p></blockquote><p>至于原因，</p><p>估计是某些人把非法的东西挂到 GitHub 上面去分享，</p><p>用 JsDelivr 去正常访问，</p><p>钻空子别发现了 哈哈。</p><article class="message is-success">                <div class="message-body">            <p>不过好在 DNS 污染已经被解决，但是在大陆地区也增加了许多限制了，来保证不会再次被污染。</p>        </div>    </article><h2 id="有什么影响？"><a href="#有什么影响？" class="headerlink" title="有什么影响？"></a>有什么影响？</h2><p><strong>DNS解析</strong>现在已经恢复正常，</p><p>但是国内的 ICP 应该是不可能恢复了，</p><p>JsDelivr 也不再提供 <strong>中国大陆地区</strong> 的 GitHub 静态资源的加速，（JS CSS 类文件除外）</p><p>所以博客内的图片也只能从 GitHub 拉取了，</p><p>导致<strong>网站加载时间可能会略长</strong>。</p><article class="message is-warning">        <div class="message-header"><p>6月份的时候国内静态资源已经不给访问了</p></div>        <div class="message-body">            <p>中国仅此一家合法的公共 CDN 就这么被限制了。</p><p>ICP也被吊销了。</p><p>淦！！ </p>        </div>    </article><article class="message is-dark">        <div class="message-header"><p>怎么办呢？</p></div>        <div class="message-body">            <p>我也在寻找更优的解决方案来加速页面加载。</p><p>后续可能考虑从 GitHub 转到国内的 Gitee</p>        </div>    </article>]]></content>
    
    
    <summary type="html">&lt;p&gt;还记得几年前做博客的时候，&lt;/p&gt;
&lt;p&gt;图片上传到 GitHub 上，&lt;/p&gt;
&lt;p&gt;用 JsDelivr 拉取 GitHub 上的静态资源，&lt;/p&gt;
&lt;p&gt;速度嘎嘎快，&lt;/p&gt;
&lt;p&gt;但是最近发现，&lt;/p&gt;
&lt;p&gt;静态资源貌似都被重定向到 githubusercontent 上去了，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可是，官网上却写着：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/jsdelivr-can-no-longer-accelerate-static-resources/important-in-china.jpeg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="吐个槽" scheme="https://liyanan2004.github.io/categories/%E5%90%90%E4%B8%AA%E6%A7%BD/"/>
    
    
    <category term="Web" scheme="https://liyanan2004.github.io/tags/Web/"/>
    
    <category term="JS" scheme="https://liyanan2004.github.io/tags/JS/"/>
    
    <category term="CDN" scheme="https://liyanan2004.github.io/tags/CDN/"/>
    
  </entry>
  
</feed>
