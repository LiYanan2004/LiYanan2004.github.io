<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiYanan2004 - 我的博客</title>
  
  <subtitle>@LiYanan2004</subtitle>
  <link href="https://liyanan2004.github.io/atom.xml" rel="self"/>
  
  <link href="https://liyanan2004.github.io/"/>
  <updated>2024-02-18T09:12:31.662Z</updated>
  <id>https://liyanan2004.github.io/</id>
  
  <author>
    <name>LiYanan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Say Hello to MegaX</title>
    <link href="https://liyanan2004.github.io/megax/"/>
    <id>https://liyanan2004.github.io/megax/</id>
    <published>2024-02-18T08:43:14.131Z</published>
    <updated>2024-02-18T09:12:31.662Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候会有很多想法和点子，开了很多的项目，发现很多代码都是重复的，比如每个项目中我都会创建一个 <code>if-else</code> 的 View Modifier、BlurView 这些，最近我对于 CameraView 的使用也更加频繁了。</p><p>So, why not create a framework that gathers everything we will need in our development proccess?</p><p>Sure. We can.</p><span id="more"></span><p>于是，我和自己一拍即合，就开始找寻自己曾经开发过的一些可以复用的组件，对其改造甚至是重写，使其可以适用于不同的场景。</p><p>321，上链接：<a href="https://github.com/LiYanan2004/MegaX">https://github.com/LiYanan2004/MegaX</a></p><p><del>So, what should we call it?</del></p><p><del>Well, that brings us to our legendary crack marketing team.</del></p><p>Sorry，串台了。</p><h2 id="CameraView"><a href="#CameraView" class="headerlink" title="CameraView"></a>CameraView</h2><p>在过年期间，我花了一个礼拜时间写了一个 System-like CameraView，用于拍摄静态图片，相信也是一个很常见的需求。</p><p>支持快速快门优先的响应式拍摄。</p><p>这里是一个简单的例子。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> MegaX</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyCameraApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="comment">// This is needed, or the orientation behavior may be wired.</span></span><br><span class="line">    <span class="meta">@UIApplicationDelegateAdaptor</span>(<span class="type">AppOrientationDelegate</span>.<span class="keyword">self</span>) <span class="keyword">private</span> <span class="keyword">var</span> delegate</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">CameraView</span> &#123; photoCaptured <span class="keyword">in</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;photoData: <span class="subst">\(photoCaptured)</span>&quot;</span>)</span><br><span class="line">            ｝</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要额外在 App 入口增加一个 <code>AppOrientationDelegate</code> 是因为在 iPhone 上需要限制在 <code>CameraView</code> 内只能以 <code>portait</code> 显示，从而保证 UI 能够始终保持在原地。</p><p>当完成拍摄、完成处理后会调用闭包，你可以在这里处理后续的保存、处理的任务。</p><p><img src="/img/megax/CameraViewUI.png" alt="CameraView UI"></p><h2 id="AsyncButton"><a href="#AsyncButton" class="headerlink" title="AsyncButton"></a>AsyncButton</h2><p>有时候，我们会在 <code>Button</code> 中使用异步操作来执行耗时任务，同时伴随需要展示 <code>ProgressView</code></p><p>使用 MegaX 后，一切都变得简单起来。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AsyncButton</span>(<span class="string">&quot;Download&quot;</span>, systemName: <span class="string">&quot;arrow.down.circle&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> download()</span><br><span class="line">&#125; progress: &#123;</span><br><span class="line">    <span class="type">ProgressView</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以像使用 <code>Button</code> 一样创建一个 <code>AsyncButton</code></p><p>也可以额外创建自定义的 ProgressView Placeholder，默认就是：<code>ProgressView()</code></p><p><img src="/img/megax/async-button.gif"></p><h2 id="Backdrop-Blur-Layer"><a href="#Backdrop-Blur-Layer" class="headerlink" title="Backdrop Blur Layer"></a>Backdrop Blur Layer</h2><p>这应该是一个重磅功能了。</p><p>SwiftUI 提供了原生的 <code>Material</code> 材质，但是除了模糊层之外还包含了<code>CubedLuminanceMappingLayer</code>（一种可以自适应深浅色模式的光照映射层）</p><p>在 MegaX 中，我通过大量实验（thanks to SwiftUI Preview）找到了一种很强大的调节方案，极大程度上的抵消掉了 <code>CubedLuminanceMappingLayer</code>，同时可以适应不同的背景</p><p>这样，我们就获得了”纯粹的“ Backdrop-Blur Layer</p><blockquote><p>我知道 CAFilter 里有一个高斯模糊的滤镜，但是 CAFilter 是 Private API，无法完全确定是否可以通过审核。</p><p>MagaX 提供了纯粹的 SwiftUI 的解决方案，100% 过审核</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">YourView</span>()</span><br><span class="line">    .backdropBlur()</span><br></pre></td></tr></table></figure><p>这样会在视图下方增加一层模糊，<strong>模糊的内容是 <code>YourView</code> 下方的内容</strong>，而不是 <code>YourView</code> 本身</p><p>这是和 <code>blur(radius:opaque:)</code> 的本质区别</p><p>如果你正在构建一个 NavigationBar，你可以还需要处理 bar 和 content 之间的过度，这时候你可以使用 <code>smoothEdges</code> </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CustomNavigationBar</span>()</span><br><span class="line">    .backdropBlur(smoothEdges: .bottom)</span><br></pre></td></tr></table></figure><p>这样就会在模糊层底部增加一个从 opaque 到 transparent 的蒙板</p><p><img src="/img/megax/back-drop-blur.gif"></p><h2 id="LongPressGesture-with-Location"><a href="#LongPressGesture-with-Location" class="headerlink" title="LongPressGesture with Location"></a>LongPressGesture with Location</h2><p>我们很熟悉 <code>SpatialTapGesture</code> 和 <code>onTapGesture(action: (CGPoint) -&gt; Void)</code> API.</p><p>可惜的是，在我做 <code>CameraView</code> 时需要实现长按锁定对焦，也需要获取到点按的位置，于是就有了 <code>SpatialLongPressGesture</code></p><p>[!Tip] 但是这里有一点需要特别注意：你需要使用 onChanged 来获取到争取的状态，而不是 onEnded</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">YourView</span>()</span><br><span class="line">    .gesture(</span><br><span class="line">        <span class="type">SpatialLongPressGesture</span>()</span><br><span class="line">            .onChanged &#123; point <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> point <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="comment">// Touch recognized.</span></span><br><span class="line">                    <span class="keyword">return</span> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Long Press recognized with the location.</span></span><br><span class="line">                <span class="comment">// Some actions here...</span></span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>也可以使用 View Modifier 的版本：<code>onLongPressGesture(minimumDuration:maximumDistance:coordinateSpace:perform:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">YourView</span>()</span><br><span class="line">    .onLongPressGesture &#123; point <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// Long Press recognized with location.</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><ul><li><p><code>if-else</code> modifier</p><blockquote><p>请谨慎地使用这个修改器，因为它会导致性能问题以及奇怪的动画。</p><p>当且仅当 <code>condition</code> 值在整个 View LifeCycle 内不会变化时使用该修改器。</p><p>举个栗子：在 iPad 环境中额外需要添加一个 padding</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MegaX</span><br><span class="line"></span><br><span class="line"><span class="meta">@Environment</span>(\.deviceType) <span class="keyword">var</span> deviceType</span><br><span class="line"></span><br><span class="line"><span class="type">YourView</span>()</span><br><span class="line">    .if(deviceType <span class="operator">==</span> .pad) &#123; content <span class="keyword">in</span></span><br><span class="line">        content.padding()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，在整个 View LifeCycle 中，deviceType 不会变化，可以放心使用这个修改器。</p></blockquote></li><li><p><code>DeviceType</code> environment value.</p><blockquote><p><code>mac</code>、<code>tv</code>、<code>vision</code>、<code>watch</code> 基本都是在编译期（Native）就确定了</p><p>iPad、iPhone、CarPlay、Mac Catalyst 会在运行时获取（<code>UIDevice.current.userInterfaceIdiom</code>)</p><p>需要注意的是，<code>mac</code>和 <code>Mac Catalyst</code>是两种 <code>DeviceType</code></p></blockquote></li></ul><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>这个库目前还是 WIP 状态，会不断迭代更新，希望它可以帮助到正在使用 SwiftUI 开发的开发者们。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有的时候会有很多想法和点子，开了很多的项目，发现很多代码都是重复的，比如每个项目中我都会创建一个 &lt;code&gt;if-else&lt;/code&gt; 的 View Modifier、BlurView 这些，最近我对于 CameraView 的使用也更加频繁了。&lt;/p&gt;
&lt;p&gt;So, why not create a framework that gathers everything we will need in our development proccess?&lt;/p&gt;
&lt;p&gt;Sure. We can.&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="MegaX" scheme="https://liyanan2004.github.io/tags/MegaX/"/>
    
  </entry>
  
  <entry>
    <title>写更少的 SwiftUI 代码 —— Namespace</title>
    <link href="https://liyanan2004.github.io/inherit-namespace-in-swiftui/"/>
    <id>https://liyanan2004.github.io/inherit-namespace-in-swiftui/</id>
    <published>2023-09-10T05:42:57.124Z</published>
    <updated>2023-09-10T08:31:07.099Z</updated>
    
    <content type="html"><![CDATA[<p>你是否写过这样的代码：<code>DetailView(namespace: namespace, isSource: selected == nil)</code></p><p>或者这样的：<code>DetailView(namespace: Namespace().wrappedValue, isSource: false)</code></p><p>这基本上是每一次写 Hero 动画时必不可少的两个参数。</p><p>如果还有更复杂的需求，一个 View 可能会有更多的参数需要传递。</p><p>其实，很久之前我就在想，如果把 Namespace 以环境变量的方式注入，那么就可以不用再写 <code>namespace</code> 这个参数了，岂不美哉？</p><span id="more"></span><h2 id="Property-Wrapper"><a href="#Property-Wrapper" class="headerlink" title="Property Wrapper"></a>Property Wrapper</h2><p>Property Wrapper 是 SwiftUI 中的一大利器，它无处不在：<code>@State</code>，<code>@Binding</code>，<code>@ObservedObject</code>……</p><p>借此机会，我也来好好地学习下如何自己写一个 Property Wrapper。</p><p>首先，用 <code>@propertyWrapper</code> 来标注他它是一个包装器。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">InheritNamespace</span> &#123;</span><br><span class="line">  <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 由于此时我们想要从环境变量中读取到 <code>Namespace</code>，因此还需要创建 <code>EnvironmentValue</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NamespaceKey</span>: <span class="title class_">EnvironmentKey</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultValue: <span class="type">Namespace</span>.<span class="type">ID</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">EnvironmentValues</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> namespace: <span class="type">Namespace</span>.<span class="type">ID</span>? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">self</span>[<span class="type">NamespaceKey</span>.<span class="keyword">self</span>] &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="keyword">self</span>[<span class="type">NamespaceKey</span>.<span class="keyword">self</span>] <span class="operator">=</span> newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">namespace</span>(<span class="keyword">_</span> <span class="params">namespace</span>: <span class="type">Namespace</span>.<span class="type">ID</span>?) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        environment(\.namespace, namespace)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>第二步，读取环境变量中的 <code>Namespace.ID</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">InheritNamespace</span>: <span class="title class_">DynamicProperty</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.namespace) <span class="keyword">private</span> <span class="keyword">var</span> parentNamespace</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步，提供 <code>WrappedValue</code></p><blockquote><p>Property Wrapper（属性包装器），顾名思义，把一个属性包装起来。</p><p>当我们使用 <code>@PropertyWrapper var variable</code> 时，我们希望使用原本的类型，而不是 Property Wrapper 的类型</p><p> <code>wrappedValue</code> 是一个计算属性，用于 <strong>获取包装下的值</strong> 以及 <strong>修改某个值</strong></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">InheritNamespace</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.namespace) <span class="keyword">private</span> <span class="keyword">var</span> parentNamespace</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Namespace</span>.<span class="type">ID</span>? &#123;</span><br><span class="line">        parentNamespace</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，基本上就大功告成了。</p><p>但是，这里只能获取到一个 Optional 的值，显然在 <code>matchedGeometryEffect</code> 中使用并不方便，解决方案是，再创建一个独立的 <code>Namespace</code> 作为候补 Namespace</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">InheritNamespace</span> &#123;</span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">private</span> <span class="keyword">var</span> newNamespace</span><br><span class="line">    <span class="meta">@Environment</span>(\.namespace) <span class="keyword">private</span> <span class="keyword">var</span> parentNamespace</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Namespace</span>.<span class="type">ID</span> &#123;</span><br><span class="line">        parentNamespace <span class="operator">??</span> newNamespace</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，尝试在 View 中使用这个 Property Wrapper 会发现报 Runtime Error</p><article class="message is-danger">                <div class="message-body">            <p>Accessing Environment&lt;Optional<ID>&gt;’s value outside of being installed on a View. This will always read the default value and will not update.</p><p>Reading a Namespace property outside View.body. This will result in identifiers that never match any other identifier.</p>        </div>    </article><h2 id="Dynamic-Property"><a href="#Dynamic-Property" class="headerlink" title="Dynamic Property"></a>Dynamic Property</h2><p>上面的错误提示表明，我们需要在 View 内部才能使用 <code>@Environment</code>，<code>@Namespace</code></p><p>这是因为，当 View 刷新时，内容可能会发生变化，此时 Property Wrapper 中的值不能与视图保持同步刷新。</p><p>此时，Environment 只会使用 default Value，Namespace 则不会与任何 View 关联。</p><p>同时，当我们在 Property Wrapper 中修改 Environment 值时也不会刷新视图（SwiftUI 不知何时刷新&#x2F;同步数据）</p><p>解决方案也很简单，给我们的 Property Wrapper 添加 <code>DynamicProperty</code> Protocol 即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">InheritNamespace</span>: <span class="title class_">DynamicProperty</span> &#123;</span><br><span class="line">   <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就可以愉快地在自定义的 Property Wrapper 中使用 SwiftUI 的 Property Wrappers 了，Dynamic Property 背后的 <code>update()</code>  会帮助我们处理数据同步，以及在数据变化时刷新视图</p><p>如果这部分仍然不理解，可以参考这个教程：<a href="https://www.hackingwithswift.com/plus/intermediate-swiftui/creating-a-custom-property-wrapper-using-dynamicproperty">https://www.hackingwithswift.com/plus/intermediate-swiftui/creating-a-custom-property-wrapper-using-dynamicproperty</a></p><h3 id="SwiftUI-Built-in-Property-Wrappers"><a href="#SwiftUI-Built-in-Property-Wrappers" class="headerlink" title="SwiftUI Built-in Property Wrappers"></a>SwiftUI Built-in Property Wrappers</h3><p>SwiftUI 的源码我们并不能直接看到，但是可以通过 Swift Interface 来分析。</p><blockquote><p>[XcodePath]&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneOS.platform&#x2F;Developer&#x2F;SDKs&#x2F;iPhoneOS.sdk&#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;SwiftUI.framework&#x2F;Modules&#x2F;SwiftUI.swiftmodule&#x2F;</p></blockquote><p>基本所有的 SwiftUI 内置 Property Wrappers 都是用了 <code>DynamicProperty</code>，这使得 SwiftUI 的渲染引擎知道视图内的值何时发生了变化，然后触发视图刷新，这是一个很重要的机制，<strong>确保了 Property Wrapper 中的值与当前视图的状态始终保持同步</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><script src="https://gist.github.com/LiYanan2004/1fd276fb4b266204ec04a67fc12dc429.js"></script><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">private</span> <span class="keyword">var</span> showDetail <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">private</span> <span class="keyword">var</span> <span class="type">NAMESPACE</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">       <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="operator">...</span></span><br><span class="line">          </span><br><span class="line">            <span class="keyword">if</span> showDetail &#123;</span><br><span class="line">                <span class="type">DetailView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .namespace(<span class="type">NAMESPACE</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DetailView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@InheritNamespace</span> <span class="keyword">private</span> <span class="keyword">var</span> namespace</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="operator">...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;你是否写过这样的代码：&lt;code&gt;DetailView(namespace: namespace, isSource: selected == nil)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者这样的：&lt;code&gt;DetailView(namespace: Namespace().wrappedValue, isSource: false)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这基本上是每一次写 Hero 动画时必不可少的两个参数。&lt;/p&gt;
&lt;p&gt;如果还有更复杂的需求，一个 View 可能会有更多的参数需要传递。&lt;/p&gt;
&lt;p&gt;其实，很久之前我就在想，如果把 Namespace 以环境变量的方式注入，那么就可以不用再写 &lt;code&gt;namespace&lt;/code&gt; 这个参数了，岂不美哉？&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="Animation" scheme="https://liyanan2004.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>2023 暑假总结</title>
    <link href="https://liyanan2004.github.io/2023-summer-summary/"/>
    <id>https://liyanan2004.github.io/2023-summer-summary/</id>
    <published>2023-09-09T08:09:29.977Z</published>
    <updated>2023-09-09T08:23:28.494Z</updated>
    
    <content type="html"><![CDATA[<p>今天是 9 月 9 日，距离我大二开学还有 9 天，现在该是总结的时候了。</p><p>计划很美好，现实很骨感。</p><p>放假前计划在将近 3 个月的假期中去参与实习，但是由于各方面的原因没能达成，算是一点遗憾。</p><p>但是换个角度来看，这也留给我更多的可自由支配的时间去研究些很有意思的东西。</p><p>我对这个暑假的评价是：相对充实。</p><h2 id="暑假中做的项目们"><a href="#暑假中做的项目们" class="headerlink" title="暑假中做的项目们"></a>暑假中做的项目们</h2><h3 id="1-Apple--Internal"><a href="#1-Apple--Internal" class="headerlink" title="1. Apple  Internal"></a>1. Apple  Internal</h3><h3 id="2-Apple-SSC-2024-参赛项目"><a href="#2-Apple-SSC-2024-参赛项目" class="headerlink" title="2. Apple SSC 2024 参赛项目"></a>2. Apple SSC 2024 参赛项目</h3><h3 id="3-MarkdownView"><a href="#3-MarkdownView" class="headerlink" title="3. MarkdownView"></a>3. MarkdownView</h3><ul><li>Customizable foreground style in <a href="https://github.com/LiYanan2004/MarkdownView/pull/21">#21</a></li><li>Add font group protocol in <a href="https://github.com/LiYanan2004/MarkdownView/pull/22">#22</a></li><li>Unleash the power of Block Directive in <a href="https://github.com/LiYanan2004/MarkdownView/pull/23">#23</a></li><li>AnyImageDisplayable &amp; AnyBlockDirectiveDisplayable are now available.</li><li>Fix malloc: double free for ptr crashes</li><li>Add rendering mode for MarkdownView</li></ul><h3 id="4-Always-Animating-Widget"><a href="#4-Always-Animating-Widget" class="headerlink" title="4. Always Animating Widget"></a>4. Always Animating Widget</h3><ul><li>打包 XCFramework</li><li>支持 iOS &#x2F; macOS Native</li><li>完美支持任何场景下的旋转 &#x2F; 平移</li><li>由 Swift Package 封装</li></ul><blockquote><p>该项目还为我带来了一些收益，挣了一些生活费哈哈 😆</p></blockquote><h3 id="5-SwiftUI-Cross-Over"><a href="#5-SwiftUI-Cross-Over" class="headerlink" title="5. SwiftUI Cross-Over"></a>5. SwiftUI Cross-Over</h3><ul><li>Find platform specific views &#x2F; view controllers.</li><li>Attach customizations that SwiftUI not supported but UIKit &#x2F; AppKit supported.</li><li>Highly readable API Design</li></ul><h3 id="6-HSSHacker"><a href="#6-HSSHacker" class="headerlink" title="6. HSSHacker"></a>6. HSSHacker</h3><blockquote><p><strong>High School Sport Hacker</strong></p><p>我独立开发的，用于高校体育跑步打卡的 macOS APP 😁</p></blockquote><ul><li>适配 SwiftUI 5 MapKit</li><li>修改整体布局，UI 换新</li></ul><h3 id="7-图像水印技术"><a href="#7-图像水印技术" class="headerlink" title="7. 图像水印技术"></a>7. 图像水印技术</h3><ul><li>隐水印：像素读取，CGContext</li><li>盲水印：傅立叶变换，Accelerate 框架</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是 9 月 9 日，距离我大二开学还有 9 天，现在该是总结的时候了。&lt;/p&gt;
&lt;p&gt;计划很美好，现实很骨感。&lt;/p&gt;
&lt;p&gt;放假前计划在将近 3 个月的假期中去参与实习，但是由于各方面的原因没能达成，算是一点遗憾。&lt;/p&gt;
&lt;p&gt;但是换个角度来看，这也留给我更多的可自</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>小技巧：让任何类型遵循 Equatable</title>
    <link href="https://liyanan2004.github.io/make-everything-equatable/"/>
    <id>https://liyanan2004.github.io/make-everything-equatable/</id>
    <published>2023-07-30T12:08:47.114Z</published>
    <updated>2023-07-30T13:37:08.798Z</updated>
    
    <content type="html"><![CDATA[<p>写 Swift 的同学们应该都不陌生 Equatable 吧。</p><p>让一个类型遵循 Equatable 需要提供一个静态函数 <code>==</code>，在某些情况下，我们无法直接通过计算或者直接比较属性值来返回是否相等时，我们又该如何处理呢？</p><span id="more"></span><h2 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h2><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>对于左右侧值可比较的情况下，可以直接实现 <code>==</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">CustomType</span>, <span class="params">rhs</span>: <span class="type">CustomType</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.property1 <span class="operator">==</span> rhs.property1 <span class="operator">&amp;&amp;</span> lhs.property2 <span class="operator">==</span> rhs.property2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比对-ID"><a href="#比对-ID" class="headerlink" title="比对 ID"></a>比对 ID</h3><p>如果该类型遵循 <code>Identifiable</code>，可以对比 ID 值来判断是否相等。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">IdentifiableType</span>, <span class="params">rhs</span>: <span class="type">IdentifiableType</span>) -&gt; <span class="type">Bool</span> &#123;    </span><br><span class="line">  <span class="keyword">return</span> lhs.id <span class="operator">==</span> rhs.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比对哈希值"><a href="#比对哈希值" class="headerlink" title="比对哈希值"></a>比对哈希值</h3><p>如果该类型遵循 <code>Hashable</code>，我们可以利用哈希值的唯一性来判断两个值是否相等。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">HashableType</span>, <span class="params">rhs</span>: <span class="type">HashableType</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.hashValue <span class="operator">==</span> rhs.hashValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="某些情况是什么情况？"><a href="#某些情况是什么情况？" class="headerlink" title="某些情况是什么情况？"></a>某些情况是什么情况？</h2><p>拿我的开源项目 <code>MarkdownView</code> 举个例子，有人提了一个 Feature Request 希望能够自定义各个层级的字体样式（<a href="https://github.com/LiYanan2004/MarkdownView/issues/20">#20</a>）</p><p>参考之前更改字体的 modifier 和实现其实还不难，唯一的不同是 <code>SwiftUI.Font</code> 是一个具体的类型，而样式需要使用 <code>ShapeStyle</code> ，它并不是一个确切的类型，因此对于每一个字段我都使用类型擦除 <code>AnyShapeStyle</code> 来赋值。</p><p><strong>在我看来，SwiftUI API 应该是能够根据当前状态实时响应的</strong>，也就是说和原生的 <code>.foregroundStyle(some ShapeStyle)</code> 一样，我可以使用 <code>@State</code> 实时切换。</p><p>字体和样式都是由 Provider 提供，注入到 Content Renderer 中，由 Content Renderer 统一分配，当样式变化后，需要重新渲染页面，这里就需要让 Providers 都遵循 Equatable，这样就可以判断值是否发生了变化来决定是否重新渲染。</p><p>FontProvider 中全是 <code>SwiftUI.Font</code>，都已经包含了 Equatable。</p><p>ForegroundStyleProvider 中全是 <code>SwiftUI.AnyShapeStyle</code>，没有提供 Equatable，且由于其特殊性，无法直接判断两个 ShapeStyle 是否相等。</p><p>这里可能有两种可能的解决方案：</p><ol><li><p>不管实时变化的值，保留原样；</p></li><li><p>无论三七二十一，刷新页面。</p></li></ol><p><strong>都有取舍，不能满足我的需求。</strong></p><h2 id="巧用-CustomStringConvertible"><a href="#巧用-CustomStringConvertible" class="headerlink" title="巧用 CustomStringConvertible"></a>巧用 <code>CustomStringConvertible</code></h2><p>我做的第一个尝试是在 Equatable 比较方法中使用 <code>String(describing: lhs) == String(describing: rhs)</code></p><p>这样可以将 ShapeStyle 转换为一段文本描述，但是，并不解决问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> color <span class="operator">=</span> <span class="type">Color</span>.red</span><br><span class="line"></span><br><span class="line"><span class="type">MarkdownView</span>(<span class="operator">...</span>)</span><br><span class="line">    .foregroundStyle(color, for: .h1)</span><br><span class="line">    .onTapGesture &#123; </span><br><span class="line">        color <span class="operator">=</span> <span class="type">Color</span>(red: <span class="type">Double</span>.random(in: <span class="number">0</span><span class="operator">...</span><span class="number">1</span>), </span><br><span class="line">                      green: <span class="type">Double</span>.random(in: <span class="number">0</span><span class="operator">...</span><span class="number">1</span>), </span><br><span class="line">                      blue: <span class="type">Double</span>.random(in: <span class="number">0</span><span class="operator">...</span><span class="number">1</span>)) </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上代码在程序中的表现为：第一次改变颜色没问题，但是再次改变后就没反应了。</p><blockquote><p>AnyShapeStyle(storage: SwiftUI.AnyShapeStyle.Storage(box: SwiftUI.(unknown context at $1ae807e94).ColorBox&lt;SwiftUI.SystemColorType&gt;))</p></blockquote><h2 id="追根溯源"><a href="#追根溯源" class="headerlink" title="追根溯源"></a>追根溯源</h2><p>既然无法直接来判断两个 <code>AnyShapeStyle</code> 是否相同，那么我们就从他们的存储方式下手，任何一种类型都对应着「数据」，任何一个属性不同都会导致数据层面的变化。</p><p>如果两个值对应的数据一模一样，便可以认为他们是一致的。</p><p>这里可以直接使用 Swift 的 <code>Data</code> 类型，虽然不是 Equatable 的，但是遵循了 Hashable，可以大致判断出两个 Data 是否相同。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">AnyShapeStyle</span>, <span class="params">rhs</span>: <span class="type">AnyShapeStyle</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> oldBuffer <span class="operator">=</span> withUnsafeBytes(of: oldValue) &#123; <span class="variable">$0</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> newBuffer <span class="operator">=</span> withUnsafeBytes(of: newValue) &#123; <span class="variable">$0</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> oldPointer <span class="operator">=</span> oldBuffer.baseAddress,</span><br><span class="line">       <span class="keyword">let</span> newPointer <span class="operator">=</span> newBuffer.baseAddress &#123;</span><br><span class="line">        <span class="comment">// Read bytes</span></span><br><span class="line">        <span class="keyword">let</span> oldBytes <span class="operator">=</span> <span class="type">Data</span>(bytes: oldPointer, count: oldBuffer.count)</span><br><span class="line">        <span class="keyword">let</span> newBytes <span class="operator">=</span> <span class="type">Data</span>(bytes: newPointer, count: newBuffer.count)</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// Compare hash values of two data type</span></span><br><span class="line">        <span class="keyword">return</span> oldBytes.hashValue <span class="operator">==</span> newBytes.hashValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试了下，完美！</p><p>这样一来，就可以保证页面根据样式配置实时刷新，同时保持按需渲染。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;写 Swift 的同学们应该都不陌生 Equatable 吧。&lt;/p&gt;
&lt;p&gt;让一个类型遵循 Equatable 需要提供一个静态函数 &lt;code&gt;==&lt;/code&gt;，在某些情况下，我们无法直接通过计算或者直接比较属性值来返回是否相等时，我们又该如何处理呢？&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="MarkdownView" scheme="https://liyanan2004.github.io/tags/MarkdownView/"/>
    
  </entry>
  
  <entry>
    <title>试试新框架 — TipKit</title>
    <link href="https://liyanan2004.github.io/meet-tipkit/"/>
    <id>https://liyanan2004.github.io/meet-tipkit/</id>
    <published>2023-07-27T04:40:52.272Z</published>
    <updated>2023-07-27T08:30:27.860Z</updated>
    
    <content type="html"><![CDATA[<p>今年 WWDC 新增了不少的框架，这篇博客专注于研究 TipKit</p><blockquote><p><strong>Important</strong></p><p>In macOS 14 Beta 4, TipKit projects don’t build in Simulator or for macOS due to macro “could not be found” errors. A workaround for this issue is available in <a href="https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes#TipKit">Xcode release notes</a>.</p></blockquote><p><img src="/img/meet-tipkit/tipviews.png"></p><span id="more"></span><p>首先，引包： <code>import TipKit</code></p><h2 id="提示内容"><a href="#提示内容" class="headerlink" title="提示内容"></a>提示内容</h2><p>定义提示内容，包含：标题（必须）、描述、图标、按钮等…</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TappableTip</span>: <span class="title class_">Tip</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title <span class="operator">=</span> <span class="type">Text</span>(<span class="string">&quot;Tappable&quot;</span>)</span><br><span class="line">    <span class="comment">// var message = Text(&quot;Tap to see more info.&quot;) &lt;- don&#x27;t use this.</span></span><br><span class="line">    <span class="keyword">var</span> message: <span class="type">Text</span>? &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Tap to see more info.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// var asset = Image(systemName: &quot;hand.tap&quot;) &lt;- don&#x27;t use this.</span></span><br><span class="line">    <span class="keyword">var</span> asset: <span class="type">Image</span>? &#123;</span><br><span class="line">        <span class="type">Image</span>(systemName: <span class="string">&quot;hand.tap&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> actions: [<span class="type">Action</span>] &#123;</span><br><span class="line">        <span class="type">Action</span>(perform: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;action 1&quot;</span>)</span><br><span class="line">        &#125;)&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Action 1&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Action</span>(perform: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;action 2&quot;</span>)</span><br><span class="line">        &#125;)&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Action 2&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，<code>message</code> &amp; <code>asset</code> 类型一定要手动写成 Optional，否则可能无法正确显示。</p><h2 id="显示你的第一条提示"><a href="#显示你的第一条提示" class="headerlink" title="显示你的第一条提示"></a>显示你的第一条提示</h2><p>在 SwiftUI 中，有两种方式：</p><ul><li><code>TipView(TappableTip())</code>： Banner 样式</li><li><code>.popoverTip(TappableTip())</code>：Popover 弹窗，与传统 Popover 不同的是需要手动点击关闭按钮才会触发 <code>dismiss</code> (macOS）</li></ul><p><img src="/img/meet-tipkit/macos-tip-popover-dismiss.gif"></p><p>当你加了这些之后，你会发现，啥都没有…</p><p>这是因为 TipView 需要先读取你的设置:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RootView</span>()</span><br><span class="line">    .task &#123; <span class="keyword">try?</span> <span class="keyword">await</span> <span class="type">Tips</span>.configure() &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>static func configure(@ConfigurationBuilder options: @escaping () -&gt; some TipsConfiguration &#x3D; { defaultConfiguration }) async throws</strong></p><p>Called at app startup to load and configure the persistent state of all tips in your app.</p></blockquote><p>对于 UIKit 和 AppKit，也有对应的<code>TipUIView</code> 和 <code>TipNSView</code>，具体可参考<a href="https://developer.apple.com/documentation/tipkit#uikit-hosting-views">官方文档说明</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>刚才也提到了在 App 周期内需要调用 <code>Tips.configure()</code> 来配置 TipView，其中有这些可配置的选项：</p><ul><li>频率限制：<code>DisplayFrequency</code>，在一个周期内（小时，天，星期，月…）最多显示一条提示，在 <code>defaultConfiguration</code> 中，该值为 <code>.immediate</code>，即不限制显示条数。</li><li>配置存储位置：<code>DatastoreLocation</code>，在 <code>defaultConfiguration</code> 中的位置为<strong>沙盒路径下的 Application Support</strong></li></ul><blockquote><p>目前（Xcode 15 beta 5）貌似还有些问题，设置频率限制但仍然显示多个 Tips。</p></blockquote><h2 id="自定义显示规则"><a href="#自定义显示规则" class="headerlink" title="自定义显示规则"></a>自定义显示规则</h2><p>在用户可能需要该功能时显示提示会极大程度的帮助用户更好的上手一款 App，因此，我们可能会制定很多Tips，但是不需要一次性全都显示出来，有交互性的显示提示是有必要的。</p><p>例如：</p><ol><li>TODO App 中提示用户“如何标记某一项任务已完成”就应该在用户创建第一个任务时显示。</li><li>TODO App 中提示用户“如何删除已完成的 TODO Item 记录”应该在用户标记完成了一些任务后显示。</li></ol><h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><p>持久化参数。</p><p>我粗略地将其理解为 <code>AppStorage</code>，设定的参数会被持久化地存储在配置中定义的位置下。</p><p>参数的存在，为自定义显示的逻辑起到了很大的帮助。</p><p>此时，我们可以定义一个参数来查看 TODO List 中是否包含一个任务：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tasks</span> &#123;</span><br><span class="line">    <span class="meta">@Parameter</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> hasTasks: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Xcode 15 beta 5 提示 Macro 错误，与官方提示的已知问题一致。</p><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>可能会发生一次或多次的事件，可以简单理解为「进阶版的 Parameter」</p><p>定义 Event:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TodoApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> taskDidComplete <span class="operator">=</span> <span class="type">Tips</span>.<span class="type">Event</span>(id: <span class="string">&quot;taskDidComplete&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="operator">…</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户完成时触发事件：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(“<span class="type">Complete</span>”) &#123;</span><br><span class="line">    <span class="type">TodoApp</span>.taskDidComplete.donate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在完成 <code>donate()</code> 之后，会持久化触发时间，并让计数器➕1，后续可以根据事件在某一时间段内的 donations 来制定规则。</p><p>更高级的玩法是，可以 Codable &amp; Sendable 的数据关联给 Donation，后续也可以在事件中根据关联类型进行更加精准地筛选。</p><h3 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h3><p>自定义 Tip 的显示规则。</p><ol><li>根据参数中的 <code>hasTasks</code> 来决定是否显示“标记完成”的提示。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CompleteTaskTip</span>: <span class="title class_">Tip</span> &#123;</span><br><span class="line">    <span class="operator">…</span></span><br><span class="line">    <span class="keyword">var</span> rules: [<span class="type">Rule</span>] &#123;</span><br><span class="line">        <span class="comment">// Tip will only display when `hasTasks` is true.</span></span><br><span class="line">        #<span class="type">Rule</span>(<span class="type">Tasks</span>.hasTasks) &#123;</span><br><span class="line">            <span class="variable">$0</span> <span class="operator">==</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>根据事件收集到的 donations 决定是否显示“删除”提示。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteTasksTip</span>: <span class="title class_">Tip</span> &#123;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">    <span class="keyword">var</span> rules: [<span class="type">Rule</span>] &#123;</span><br><span class="line">        #<span class="type">Rule</span>(<span class="type">TodoApp</span>.taskDidComplete) &#123;</span><br><span class="line">            <span class="comment">// Displays delete tip if user completes more than 3 tasks within an hour.</span></span><br><span class="line">            <span class="variable">$0</span>.donations.donatedWithin(.hours(<span class="number">1</span>)).count <span class="operator">&gt;</span> <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果此时达到了配置中预设的频率限制，也不会显示。</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>TipKit 中包含了 <code>TipViewStyle</code> 以允许开发者自己定义样式，但是当我定义好样式准备使用时，发现并没有提供修改样式的 modifier，类似 <code>.tipViewStyle(.customStyle)</code> 这样的 😡</p><p>目前内置提供了一种 <code>MiniTipViewStyle</code>，应该后续会有 <code>.tipViewStyle</code> 吧…</p><h2 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h2><h3 id="显示提示"><a href="#显示提示" class="headerlink" title="显示提示"></a>显示提示</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Tips</span>.showAllTips() <span class="comment">// Show All Tips</span></span><br><span class="line"></span><br><span class="line"><span class="type">Tips</span>.showTips([<span class="type">DeleteTasksTip</span>.<span class="keyword">self</span>, <span class="type">CompleteTaskTip</span>.<span class="keyword">self</span>]) <span class="comment">// Show Tips based on Type</span></span><br><span class="line"></span><br><span class="line"><span class="type">Tips</span>.showTips([<span class="type">DeleteTasksTip</span>().id]) <span class="comment">// Show Tips based on ID</span></span><br></pre></td></tr></table></figure><h3 id="隐藏提示"><a href="#隐藏提示" class="headerlink" title="隐藏提示"></a>隐藏提示</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Tips</span>.hideAllTips() <span class="comment">// Hide All Tips</span></span><br><span class="line"></span><br><span class="line"><span class="type">Tips</span>.hideTips([<span class="type">DeleteTasksTip</span>.<span class="keyword">self</span>, <span class="type">CompleteTaskTip</span>.<span class="keyword">self</span>]) <span class="comment">// Hide Tips based on Type</span></span><br><span class="line"></span><br><span class="line"><span class="type">Tips</span>.hideTips([<span class="type">DeleteTasksTip</span>().id]) <span class="comment">// Hide Tips based on ID</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年 WWDC 新增了不少的框架，这篇博客专注于研究 TipKit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In macOS 14 Beta 4, TipKit projects don’t build in Simulator or for macOS due to macro “could not be found” errors. A workaround for this issue is available in &lt;a href=&quot;https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes#TipKit&quot;&gt;Xcode release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/meet-tipkit/tipviews.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="WWDC 23" scheme="https://liyanan2004.github.io/tags/WWDC-23/"/>
    
    <category term="TipKit" scheme="https://liyanan2004.github.io/tags/TipKit/"/>
    
  </entry>
  
  <entry>
    <title>用 SwiftUI 做个终端</title>
    <link href="https://liyanan2004.github.io/terminal-window-swiftui/"/>
    <id>https://liyanan2004.github.io/terminal-window-swiftui/</id>
    <published>2023-07-23T03:13:03.829Z</published>
    <updated>2023-07-25T04:51:47.425Z</updated>
    
    <content type="html"><![CDATA[<p>最近用 SwiftUI 做了一个 Terminal 终端，挺有意思的，分享下实现思路。</p><p>效果大概是这样：</p><p><img src="/img/terminal-window-swiftui/preview.gif"></p><span id="more"></span><h2 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h2><p>这里可以参考 Developer 网站上的 Figma 资源来查看具体每个元素的宽高和间距等信息。</p><p>这样可以尽最大可能的还原 macOS 的风格。</p><p><img src="/img/terminal-window-swiftui/traffic-light.png" alt="红绿灯每一个直径12"></p><p><img src="/img/terminal-window-swiftui/horizontal-gap.png" alt="横向间距8"></p><p><img src="/img/terminal-window-swiftui/title-bar-font.png" alt="窗口标题 SF Pro 13号字 Semibold(macOS) bold(iOS)"></p><p><img src="/img/terminal-window-swiftui/macos-font-styles.png" alt="对应 macOS 下 body 字体，iOS下 footnote 字体"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>思路是：构建标题栏 -&gt; 文本混排+实现光标闪动 -&gt; 接收输入</p><h3 id="构建标题栏"><a href="#构建标题栏" class="headerlink" title="构建标题栏"></a>构建标题栏</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TrafficLights</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>(spacing: <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> colors: [<span class="type">Color</span>] <span class="operator">=</span> [.red, .yellow, .green]</span><br><span class="line">            <span class="type">ForEach</span>(colors, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">                <span class="type">Circle</span>()</span><br><span class="line">                    .foregroundStyle(<span class="variable">$0</span>)</span><br><span class="line">                    .frame(width: <span class="number">12</span>)</span><br><span class="line">                    .overlay &#123;</span><br><span class="line">                        <span class="type">Circle</span>()</span><br><span class="line">                            .stroke(<span class="type">Color</span>.black.opacity(<span class="number">0.2</span>), lineWidth: <span class="number">0.5</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.colorScheme) <span class="keyword">private</span> <span class="keyword">var</span> colorScheme</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TrafficLights</span>()</span><br><span class="line">    .frame(maxWidth: .infinity, alignment: .leading)</span><br><span class="line">    .overlay &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;username — -zsh — 100x30&quot;</span>)</span><br><span class="line">            .font(.footnote.weight(.bold))</span><br><span class="line">    &#125;</span><br><span class="line">    .padding(<span class="number">8</span>)</span><br><span class="line">    .background(.bar)</span><br><span class="line">    .overlay &#123;</span><br><span class="line">        <span class="type">GeometryReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">            <span class="type">UnevenRoundedRectangle</span>(topLeadingRadius: <span class="number">8</span>, topTrailingRadius: <span class="number">8</span>)</span><br><span class="line">                .stroke(.foreground.opacity(colorScheme <span class="operator">==</span> .dark <span class="operator">?</span> <span class="number">0.15</span> : <span class="number">0.3</span>), lineWidth: <span class="number">0.33</span>)</span><br><span class="line">                .frame(height: proxy.size.height <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .clipped()</span><br></pre></td></tr></table></figure><blockquote><p>这里让<strong>高度+1然后clipped</strong>的原因是：等会儿我们的内容区域也要这么加一个描边，为了防止两个描边重叠导致颜色加深，我们忽略 titlebar 的底部描边，保留内容区域的顶部描边。</p></blockquote><hr><h3 id="2023-7-25-更新"><a href="#2023-7-25-更新" class="headerlink" title="2023.7.25 更新"></a><strong>2023.7.25 更新</strong></h3><p>这里的实现存在问题，当窗口标题文本过长时会和🚥重叠。</p><p>仔细观察macOS原生的实现，可以发现其表现为：</p><ul><li>空间充足时：居中显示标题</li><li>空间不足时：优先靠右显示</li><li>空间过小时：裁切文本显示省略号，仍保持右侧8个像素的间距</li></ul><p>我认为这里的难点在于：要动态的修改标题的对齐方式。</p><p>我的实现如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">WindowTitleBar</span>&lt;<span class="title class_">Title</span>: <span class="title class_">View</span>&gt;: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@ViewBuilder</span> <span class="keyword">var</span> title: () -&gt; <span class="type">Title</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Environment</span>(\.colorScheme) <span class="keyword">private</span> <span class="keyword">var</span> colorScheme</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">TrafficLights</span>().padding(<span class="number">8</span>)</span><br><span class="line">            <span class="type">Spacer</span>(minLength: <span class="number">0</span>)</span><br><span class="line">            title()</span><br><span class="line">                .font(.footnote.bold())</span><br><span class="line">                .layoutPriority(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Spacer</span>(minLength: <span class="number">0</span>)</span><br><span class="line">            <span class="type">Color</span>.clear <span class="comment">// 52 = 12(red) + 8(spacing) + 12(green) + 8 + 12(yellow)</span></span><br><span class="line">                .frame(minWidth: <span class="number">8</span>, maxWidth: <span class="number">52</span> <span class="operator">+</span> <span class="number">8</span> <span class="operator">*</span> <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxWidth: .infinity)</span><br><span class="line">        .frame(height: <span class="number">28</span>)</span><br><span class="line">        .lineLimit(<span class="number">1</span>)</span><br><span class="line">        .font(.footnote.bold())</span><br><span class="line">        .background(.bar)</span><br><span class="line">        .overlay &#123;</span><br><span class="line">            <span class="type">GeometryReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">                <span class="type">UnevenRoundedRectangle</span>(topLeadingRadius: <span class="number">8</span>, topTrailingRadius: <span class="number">8</span>)</span><br><span class="line">                    .stroke(.foreground.opacity(colorScheme <span class="operator">==</span> .dark <span class="operator">?</span> <span class="number">0.15</span> : <span class="number">0.3</span>), lineWidth: <span class="number">0.33</span>)</span><br><span class="line">                    .frame(height: proxy.size.height <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .clipped()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释下原理（从左到右）：</p><ol><li><code>TrafficLights().padding(8)</code> 略。</li><li><code>Spacer(minLength: 0)</code> 两个成对用于居中标题文本。</li><li><code>.layoutPriority(1)</code> 让标题布局优先级更高，在空间不足时把优先布局标题。</li><li><code>Color.clear</code> 右侧边距，与 <code>TrafficLights()</code> 保持一致宽度，确保在空间充足时相对于整个标题栏（包括左侧🚥）居中，若空间不足，也要始终保持宽度为8，留出与左侧相同的间距。</li></ol><h3 id="文本混排-实现光标闪动"><a href="#文本混排-实现光标闪动" class="headerlink" title="文本混排+实现光标闪动"></a>文本混排+实现光标闪动</h3><p>文本混排比较简单，使用多个 <code>Text</code> 串联即可，在结尾加上光标(▉) 。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Group</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Login at: <span class="subst">\(Date.now.formatted())</span>.<span class="subst">\n</span>&quot;</span>)</span><br><span class="line">    <span class="operator">+</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;▉&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">.monospaced() <span class="comment">// Match terminal feel.</span></span><br><span class="line">.padding(<span class="number">4</span>)</span><br><span class="line">.frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .topLeading)</span><br><span class="line">.overlay &#123; </span><br><span class="line">    <span class="type">UnevenRoundedRectangle</span>(bottomLeadingRadius: <span class="number">8</span>, bottomTrailingRadius: <span class="number">8</span>)</span><br><span class="line">        .stroke(.foreground.opacity(colorScheme <span class="operator">==</span> .dark <span class="operator">?</span> <span class="number">0.15</span> : <span class="number">0.3</span>), lineWidth: <span class="number">0.33</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是我们的内容区域，同样需要加上描边，我们使用 SwiftUI 5 新增的 <code>UnevenRoundedRectangle</code> 来控制四周圆角</p><p>光标闪动就是让光标以固定的时间间隔改变样式，在文本混排中，可以使用 <code>.foregroundColor</code>(iOS 17之前） &#x2F; <code>.foregroundStyle</code>（iOS 17+） 来对文本颜色、样式进行调整。</p><p>参考 HIG，可以这么修改：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">CursorStyle</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> transparent, opaque</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">toggle</span>() &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .opaque: <span class="keyword">self</span> <span class="operator">=</span> .transparent</span><br><span class="line">        <span class="keyword">case</span> .transparent: <span class="keyword">self</span> <span class="operator">=</span> .opaque</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> cursorStyle <span class="operator">=</span> <span class="type">CursorStyle</span>.opaque</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Group</span> &#123;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;▉&quot;</span>).foregroundStyle(cursorStyle <span class="operator">==</span> .transparent <span class="operator">?</span> .clear : <span class="type">Color</span>(white: <span class="number">0.45</span>))</span><br><span class="line">&#125;</span><br><span class="line">.task(priority: .background) &#123; changeCursorStyle() &#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">changeCursorStyle</span>() &#123;</span><br><span class="line">    <span class="type">Task</span> &#123;</span><br><span class="line">        <span class="keyword">try?</span> <span class="keyword">await</span> <span class="type">Task</span>.sleep(for: .seconds(<span class="number">0.5</span>))</span><br><span class="line">        cursorStyle.toggle()</span><br><span class="line">        changeCursorStyle()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收输入"><a href="#接收输入" class="headerlink" title="接收输入"></a>接收输入</h3><p>这里使用 <code>TextEditor</code>，但是不能直接让它显示出来覆盖页面，且 Editor 内的文本也不要显示，且要保留点击获得焦点的能力。</p><p>最简单的方式就是 <code>.opacity(0.001)</code>，搞定。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> userInput <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">Group</span> &#123;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">    <span class="type">Text</span>(userInput)</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="operator">...</span></span><br><span class="line">.overlay &#123;</span><br><span class="line">    <span class="type">TextEditor</span>(text: <span class="variable">$userInput</span>).opacity(<span class="number">0.001</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一点要注意的是，我们要：</p><ul><li>禁用系统的自动改正（auto-correction)：<code>.autocorrectionDisabled()</code></li><li>禁用自动首字母大写（auto-capitalization）：<code>.textInputAutocapitalization(.never)</code></li><li>禁用文本预测（text-prediction）：<code>.keyboardType(.asciiCapable)</code></li></ul><p>大功告成，接下来，你只需要根据自己需求来处理命令即可，我这里的方式是在文本变化时 <code>.onChange(of: userInput)</code> 检测最后一个字符是否为换行来决定是否执行，对于不同的命令如何执行这部分大家可以自己发挥想象。</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>由于 <code>TextEditor</code> 隐藏了，用户无法直接看到光标在哪里，这里的光标永远在最后，无法根据 <code>TextEditor</code> 中的光标位置移动，使用外置键盘可以修改光标位置，这时候会比较annoying😡</p><p>可以考虑使用 <a href="/swiftui-selection-range/" title="Selection Range in SwiftUI">Selection Range in SwiftUI</a> 来解决，但是由于是 Hack 方法，可能会导致其他的问题。</p><blockquote><p>吐槽下 SwiftUI 到现在都没支持文本选择的范围。</p><p>也不知道 SwiftUI 5 的 <code>TextEditorStyle</code> 会不会给我们带来什么惊喜？</p><p>发过反馈：FB12340578，坐等。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近用 SwiftUI 做了一个 Terminal 终端，挺有意思的，分享下实现思路。&lt;/p&gt;
&lt;p&gt;效果大概是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/terminal-window-swiftui/preview.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="WWDC 23" scheme="https://liyanan2004.github.io/tags/WWDC-23/"/>
    
  </entry>
  
  <entry>
    <title>在 SwiftUI 中实现页面的方向锁定</title>
    <link href="https://liyanan2004.github.io/lock-orientation-in-swiftui/"/>
    <id>https://liyanan2004.github.io/lock-orientation-in-swiftui/</id>
    <published>2023-06-19T03:59:09.888Z</published>
    <updated>2023-06-19T13:21:03.046Z</updated>
    
    <content type="html"><![CDATA[<p>在许多情况下，我们希望某一个视图能够锁定在一个特定的方向下，例如：相机页面等</p><p>本文将分享一种我自己捣腾出来的一种实现方式以及背后的逻辑。</p><p><strong>本文仅适用于 iOS</strong></p><span id="more"></span><h2 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h2><p>思路是使用 <code>@UIApplicationDelegateAdaptor(AppDelegate.self)</code> 配合 AppDelegate 中的 <code>func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -&gt; UIInterfaceOrientationMask</code> 来实现方向的锁定。</p><p>在需要锁定方向的 View 中，修改 AppDelegate 中的 <code>orientationLock</code> 并重新返回一个全局的 <code>UIInterfaceOrientationMask</code>。</p><p>退出锁定的 View 之后，只需要还原 <code>orientationLock</code> 并重新返回 <code>UIInterfaceOrientationMask</code> 即可。</p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><ul><li><p><code>@UIApplicationDelegateAdaptor</code> 需要创建在程序入口处，即 <code>@main</code> 对应的 App Protocol 下，<strong>否则，AppDelegate 不起作用</strong>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TestApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@UIApplicationDelegateAdaptor</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>) <span class="keyword">var</span> appDelegate</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在 iOS 15 及以下和 iOS 16+ 的旋转策略是不同的，即系统调用 <code>func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -&gt; UIInterfaceOrientationMask</code> 的时机和需要做的事情是不同的。</p><ul><li><p>iOS 15 及以下：在每次转动屏幕的时候都会调用该方法重新评估以决定是否完成 UI 旋转，如果当前的设备方向不在 UIInterfaceOrientationMask 中，也不会自动将屏幕旋转至正确的方向。</p><p>因此，除了要设定好 <code>supportedInterfaceOrientations</code> 之外，还需要判断下当前的屏幕方向，根据具体情况旋转到正确的方向上。</p></li><li><p>iOS 16+：在屏幕旋转的时候并不会再调用 <code>func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -&gt; UIInterfaceOrientationMask</code> 了，因此，旋转设备时系统不会一直刷新 <code>UIInterfaceOrientationMask</code> 。</p><p>在 <a href="https://juejin.cn/post/7146134397375217695">iOS 16 屏幕旋转适配</a> 找到了解决方案：通过在 rootViewController 中调用 <code>setNeedsUpdateOfSupportedInterfaceOrientations()</code> 即可重新调用该方法更新 <code>UIInterfaceOrientationMask</code>。</p><p>实测发现，若当前的设备方向不在 <code>UIInterfaceOrientationMask</code> 中，会自动调整。</p></li><li><p>对于 iOS 15 及以下还有一个 bug，如果设备方向没有发生改变而方向锁发生了改变（例如：设备是 .portrait，方向锁从 .landscapeLeft 变到 .portrait 时），则此时无法自动旋转到正确的方向。</p><p>原因是：虽然程序化执行了方向更新，但是其前后结果一致（设备方向实际不发生变化），系统就不会重新获取 <code>UIInterfaceOrientationMask</code> ，即保持了原来的 Mask 没有更新。</p><p>解决方案是：在最后使用 <code>NotificationCenter.default.post(name: UIDevice.orientationDidChangeNotification, object: nil)</code> 手动发送屏幕旋转的通知，让系统重新获取 <code>UIInterfaceOrientationMask</code>。</p></li></ul></li></ul><h2 id="API-封装"><a href="#API-封装" class="headerlink" title="API 封装"></a>API 封装</h2><p>完成了可行性验证之后决定做成一个可以在任何视图下使用的 View Modifier，其中需要实现以下功能：</p><ol><li>单个页面的方向锁</li><li>能够设定默认方向遮罩，用于恢复 &#x2F; 解锁某个页面设定的方向锁</li><li>由数据驱动，支持程序化改变该页面的方向</li></ol><p>因为要实现数据驱动，因此不能只是简单的使用 <code>onAppear</code> 和  <code>onDisappear</code>，当数据变动的时候也需要响应。</p><p>这里我选择使用 <code>Preference</code> + <code>onPreferenceChange</code> 来实现（这里并不是只能用 Preference，也可以使用 <code>onChange</code> 和  <code>task(id:)</code> ）</p><p>我们将 <code>AppDelegate</code> 和 <code>View + Extension</code> 合并在一起，完整代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppDelegate</span>: <span class="title class_">NSObject</span>, <span class="title class_">UIApplicationDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultOrientation <span class="operator">=</span> <span class="type">UIInterfaceOrientationMask</span>.allButUpsideDown</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> orientationLock <span class="operator">=</span> <span class="type">UIInterfaceOrientationMask</span>.allButUpsideDown</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">supportedInterfaceOrientationsFor</span> <span class="params">window</span>: <span class="type">UIWindow</span>?) -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">        <span class="type">AppDelegate</span>.orientationLock</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Orientation Lock Preferences</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DefaultOrientationMask</span>: <span class="title class_">PreferenceKey</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultValue: <span class="type">UIInterfaceOrientationMask</span> &#123; <span class="type">UIDevice</span>.current.userInterfaceIdiom <span class="operator">==</span> .pad <span class="operator">?</span> .all : .allButUpsideDown &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">reduce</span>(<span class="params">value</span>: <span class="keyword">inout</span> <span class="type">UIInterfaceOrientationMask</span>, <span class="params">nextValue</span>: () -&gt; <span class="type">UIInterfaceOrientationMask</span>) &#123;</span><br><span class="line">        value <span class="operator">=</span> nextValue()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DeviceOrientationMask</span>: <span class="title class_">PreferenceKey</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultValue: <span class="type">UIInterfaceOrientationMask</span> &#123; <span class="type">UIDevice</span>.current.userInterfaceIdiom <span class="operator">==</span> .pad <span class="operator">?</span> .all : .allButUpsideDown &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">reduce</span>(<span class="params">value</span>: <span class="keyword">inout</span> <span class="type">UIInterfaceOrientationMask</span>, <span class="params">nextValue</span>: () -&gt; <span class="type">UIInterfaceOrientationMask</span>) &#123;</span><br><span class="line">        value <span class="operator">=</span> nextValue()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - View + Orientation Lock</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">updateOrientation</span>(<span class="keyword">_</span> <span class="params">orientation</span>: <span class="type">UIInterfaceOrientationMask</span>) &#123;</span><br><span class="line">        <span class="type">UIInterfaceOrientation</span>.updateOrientation(orientation)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deviceOrientation</span>(<span class="keyword">_</span> <span class="params">orientation</span>: <span class="type">UIInterfaceOrientationMask</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        preference(</span><br><span class="line">            key: <span class="type">DeviceOrientationMask</span>.<span class="keyword">self</span>,</span><br><span class="line">            value: orientation</span><br><span class="line">        )</span><br><span class="line">        .onPreferenceChange(<span class="type">DeviceOrientationMask</span>.<span class="keyword">self</span>, perform: updateOrientation(<span class="keyword">_</span>:))</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            updateOrientation(orientation)</span><br><span class="line">        &#125;</span><br><span class="line">        .onDisappear &#123;</span><br><span class="line">            updateOrientation(<span class="type">AppDelegate</span>.defaultOrientation)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">defaultOrientationMask</span>(<span class="keyword">_</span> <span class="params">orientation</span>: <span class="type">UIInterfaceOrientationMask</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        preference(</span><br><span class="line">            key: <span class="type">DefaultOrientationMask</span>.<span class="keyword">self</span>,</span><br><span class="line">            value: orientation</span><br><span class="line">        )</span><br><span class="line">        .onPreferenceChange(<span class="type">DefaultOrientationMask</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="type">AppDelegate</span>.defaultOrientation <span class="operator">=</span> <span class="variable">$0</span></span><br><span class="line">            <span class="comment">/// `defaultOrientation` == `orientationLock` means</span></span><br><span class="line">            <span class="comment">/// there is no other orientation lockers been activated. In this case,</span></span><br><span class="line">            <span class="comment">/// if the default orientation changes, we need to update current orientation.</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="type">AppDelegate</span>.defaultOrientation <span class="operator">==</span> <span class="type">AppDelegate</span>.orientationLock <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            updateOrientation(<span class="variable">$0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            updateOrientation(orientation)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - UIInterfaceOrientation + Update</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">deviceOrientation</span>: <span class="type">UIDeviceOrientation</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> orientation: <span class="type">UIInterfaceOrientation</span> <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> deviceOrientation &#123;</span><br><span class="line">            <span class="keyword">case</span> .portraitUpsideDown: <span class="type">UIInterfaceOrientation</span>.portraitUpsideDown</span><br><span class="line">            <span class="keyword">case</span> .landscapeLeft: <span class="type">UIInterfaceOrientation</span>.landscapeLeft</span><br><span class="line">            <span class="keyword">case</span> .landscapeRight: <span class="type">UIInterfaceOrientation</span>.landscapeRight</span><br><span class="line">            <span class="keyword">default</span>: <span class="type">UIInterfaceOrientation</span>.portrait</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(rawValue: orientation.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">updateOrientation</span>(<span class="keyword">_</span> <span class="params">orientation</span>: <span class="type">UIInterfaceOrientationMask</span>) &#123;</span><br><span class="line">        <span class="type">AppDelegate</span>.orientationLock <span class="operator">=</span> orientation</span><br><span class="line">        <span class="comment">// Tells System to re-call</span></span><br><span class="line">        <span class="comment">// `application(_:supportedInterfaceOrientationsFor)` method</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> scenes <span class="operator">=</span> <span class="type">UIApplication</span>.shared.connectedScenes</span><br><span class="line">            <span class="keyword">let</span> windowScene <span class="operator">=</span> scenes.first <span class="keyword">as?</span> <span class="type">UIWindowScene</span></span><br><span class="line">            <span class="keyword">let</span> window <span class="operator">=</span> windowScene<span class="operator">?</span>.windows.first</span><br><span class="line">            window<span class="operator">?</span>.rootViewController<span class="operator">?</span>.setNeedsUpdateOfSupportedInterfaceOrientations()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Manually rotate your screen and refresh InterfaceMask.</span></span><br><span class="line">            <span class="keyword">let</span> newOrientation: <span class="type">UIInterfaceOrientation</span> <span class="operator">=</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> orientation &#123;</span><br><span class="line">                <span class="keyword">case</span> .portrait: <span class="keyword">return</span> .portrait</span><br><span class="line">                <span class="keyword">case</span> .landscapeLeft: <span class="keyword">return</span> .landscapeLeft</span><br><span class="line">                <span class="keyword">case</span> .landscapeRight: <span class="keyword">return</span> .landscapeRight</span><br><span class="line">                <span class="keyword">case</span> .portraitUpsideDown: <span class="keyword">return</span> .portraitUpsideDown</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">let</span> current <span class="operator">=</span> <span class="type">UIInterfaceOrientation</span>(deviceOrientation: <span class="type">UIDevice</span>.current.orientation)<span class="operator">!</span></span><br><span class="line">                    <span class="keyword">guard</span> orientation <span class="operator">!=</span> .all <span class="keyword">else</span> &#123; <span class="keyword">return</span> current &#125;</span><br><span class="line">                    <span class="keyword">if</span> orientation <span class="operator">==</span> .allButUpsideDown  &#123;</span><br><span class="line">                        <span class="keyword">return</span> current <span class="operator">==</span> .portraitUpsideDown <span class="operator">?</span> .portrait : current</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> current <span class="operator">!=</span> .landscapeLeft <span class="operator">&amp;&amp;</span> current <span class="operator">!=</span> .landscapeRight &#123;</span><br><span class="line">                        <span class="keyword">return</span> .landscapeLeft</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> current</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;()</span><br><span class="line">            <span class="type">UIDevice</span>.current.setValue(newOrientation.rawValue, forKey: <span class="string">&quot;orientation&quot;</span>)</span><br><span class="line">            <span class="comment">// Always send a notification in case the device orientation doesn&#x27;t change</span></span><br><span class="line">            <span class="type">NotificationCenter</span>.default.post(name: <span class="type">UIDevice</span>.orientationDidChangeNotification, object: <span class="literal">nil</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在许多情况下，我们希望某一个视图能够锁定在一个特定的方向下，例如：相机页面等&lt;/p&gt;
&lt;p&gt;本文将分享一种我自己捣腾出来的一种实现方式以及背后的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文仅适用于 iOS&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Swift Data 的初步探索</title>
    <link href="https://liyanan2004.github.io/meet-swift-data/"/>
    <id>https://liyanan2004.github.io/meet-swift-data/</id>
    <published>2023-06-17T14:55:16.000Z</published>
    <updated>2023-06-17T15:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>朋友们好，一周的考试结束了，我回来继续更新了，感觉考的不错，暑假里争取多更新一些。</p><p>今天的主题是 Swift Data – Core Data 的 Swift 化封装。</p><p>本文为 <a href="https://developer.apple.com/wwdc23/10187">Meet Swift Data</a> 的学习笔记。</p><span id="more"></span><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>借助 Swift 5.9 的 Macro，开发者可以很容易地创建一个数据模型，并可以将之以 <code>@Observable</code> 的方式注入 SwiftUI View 成为 Source Of Truth，并且与 <code>@Observable</code> 获得了一致的<strong>只刷新变化的值</strong>的特性。</p><p>在 Model 中，我们可以更加容易地使用自定义的 struct、enum 等之前在 Model Editor 中不好引入的自定义类型。</p><p>@Model 也支持模型与模型之前的关系和属性：</p><ul><li><code>@Attribute</code>：设置 <code>unique</code>、<code>externalStorage</code>、<code>spotlight</code> 等属性。</li><li><code>@Relationship</code>：自定义模型间的关系，从而确定诸如删除等操作的行为。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trip</span> &#123;</span><br><span class="line">    <span class="meta">@Attribute</span>(.unique) <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> destination: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> endDate: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">var</span> startDate: <span class="type">Date</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Relationship</span>(.cascade) <span class="keyword">var</span> bucketList: [<span class="type">BucketListItem</span>]<span class="operator">?</span> <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">var</span> livingAccommodation: <span class="type">LivingAccommodation</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中：</p><ul><li>确保了 <code>name</code> 字段的唯一性。</li><li>指定了 Trip 与 BucketListItem 之间的关系，即一旦 Trip 被删除，所有的 BucketListItem 也会被一并删除。</li></ul><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>在 SwiftUI 中，在最简单的情况下，只需要在 ContentView 后加一句 <code>.modelContainer(for: )</code> 即可。</p><p>但是在业务复杂的情况下，例如需要做数据库迁移或更新这类操作时，或者在其他环境下使用 Swift Data，你可能就需要一个 Container 容器来操作了。</p><p>创建的方法也很简单：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> container <span class="operator">=</span> <span class="keyword">try</span> <span class="type">ModelContainer</span>([<span class="type">Trip</span>.<span class="keyword">self</span>, <span class="type">LivingAccommodation</span>.<span class="keyword">self</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> container <span class="operator">=</span> <span class="keyword">try</span> <span class="type">ModelContainer</span>(</span><br><span class="line">    for: [<span class="type">Trip</span>.<span class="keyword">self</span>, <span class="type">LivingAccommodation</span>.<span class="keyword">self</span>],</span><br><span class="line">    configurations: <span class="type">ModelConfiguration</span>(url: <span class="type">URL</span>(<span class="string">&quot;path&quot;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>获取 Container Context：</p><ul><li>在 SwiftUI 下访问 Model Container：<code>@Environment(\.modelContext) private var context</code></li><li>如果不在 View 层级，例如在 ViewModel 中，可以使用 <code>container.mainContext</code> 来获得共享的<strong>主线程上下文</strong></li></ul><h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p><code>Predicate</code>、<code>SortDescriptor</code> 等之前晦涩难懂且不安全的 API 也更新了，可以更加 Swift 化地使用他们了。</p><p>获取数据变成了这样，更加直观了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> today <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"><span class="keyword">let</span> tripPredicate <span class="operator">=</span> #<span class="type">Predicate</span>&lt;<span class="type">Trip</span>&gt; &#123; </span><br><span class="line">    <span class="variable">$0</span>.destination <span class="operator">==</span> <span class="string">&quot;New York&quot;</span> <span class="operator">&amp;&amp;</span></span><br><span class="line">    <span class="variable">$0</span>.name.contains(<span class="string">&quot;birthday&quot;</span>) <span class="operator">&amp;&amp;</span></span><br><span class="line">    <span class="variable">$0</span>.startDate <span class="operator">&gt;</span> today</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> descriptor <span class="operator">=</span> <span class="type">FetchDescriptor</span>&lt;<span class="type">Trip</span>&gt;(predicate: tripPredicate)</span><br><span class="line"><span class="keyword">let</span> trips <span class="operator">=</span> <span class="keyword">try</span> context.fetch(descriptor)</span><br></pre></td></tr></table></figure><h2 id="增、删、存"><a href="#增、删、存" class="headerlink" title="增、删、存"></a>增、删、存</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myTrip <span class="operator">=</span> <span class="type">Trip</span>(name: <span class="string">&quot;Birthday Trip&quot;</span>, destination: <span class="string">&quot;New York&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert a new trip</span></span><br><span class="line">context.insert(myTrip)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete an existing trip</span></span><br><span class="line">context.delete(myTrip)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Manually save changes to the context</span></span><br><span class="line"><span class="keyword">try</span> context.save()</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实<strong>我是非常愿意使用新的 Swift Data 的</strong>，苹果应该也会在接下来的几个 Beta 中不断完善这个框架。</p><p>正如肘子老师在 WWDC.playground 中所说的，<strong>Swift Data 对于有一定 Core Data 基础的人来说使用起来非常简单</strong>，但是 Swift Data 目前也存在不少问题，而其中最致命的莫过于没有办法做向后兼容了，其次包括 iCloud 同步在内的很多功能都没法使用（这里的信息来自肘子老师的推文，我没有尝试 iCloud 的部分）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;朋友们好，一周的考试结束了，我回来继续更新了，感觉考的不错，暑假里争取多更新一些。&lt;/p&gt;
&lt;p&gt;今天的主题是 Swift Data – Core Data 的 Swift 化封装。&lt;/p&gt;
&lt;p&gt;本文为 &lt;a href=&quot;https://developer.apple.com/wwdc23/10187&quot;&gt;Meet Swift Data&lt;/a&gt; 的学习笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="WWDC 23" scheme="https://liyanan2004.github.io/tags/WWDC-23/"/>
    
    <category term="Swift Data" scheme="https://liyanan2004.github.io/tags/Swift-Data/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 新功能</title>
    <link href="https://liyanan2004.github.io/wwdc-23-whats-new-in-swiftui/"/>
    <id>https://liyanan2004.github.io/wwdc-23-whats-new-in-swiftui/</id>
    <published>2023-06-07T02:44:08.000Z</published>
    <updated>2023-06-08T06:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为 <a href="https://developer.apple.com/wwdc23/10148">What’s new in SwiftUI</a> 的学习笔记</p><span id="more"></span><h2 id="SwiftUI-的更多应用场景"><a href="#SwiftUI-的更多应用场景" class="headerlink" title="SwiftUI 的更多应用场景"></a>SwiftUI 的更多应用场景</h2><h3 id="适用于-visionOS-的-Scenes"><a href="#适用于-visionOS-的-Scenes" class="headerlink" title="适用于 visionOS 的 Scenes"></a>适用于 visionOS 的 Scenes</h3><ul><li>WindowGroup：SwiftUI 可以直接应用于 visionOS 中，不需要任何设置，以平面的方式显示。</li><li>要想增加「深度」上的支持，可以使用 <code>.windowStyle(.volumetric)</code>。<ul><li><code>Model3D</code>：载入静态模型</li><li><code>RealityView</code>：载入动态模型，包括光线追踪、交互等</li></ul></li><li>ImmersiveSpace：构建完全「沉浸式」的体验。</li></ul><p><img src="/img/wwdc-23-whats-new-in-swiftui/scenes-for-spacial-computing.jpeg"></p><p><img src="/img/wwdc-23-whats-new-in-swiftui/swiftui-in-visionos.jpeg" alt="visionOS 上的 SwiftUI"></p><h3 id="watchOS-10"><a href="#watchOS-10" class="headerlink" title="watchOS 10"></a>watchOS 10</h3><p>watchOS 10 经过重新设计。</p><p><code>NavigationSplitView</code>、<code>TabView</code>、<code>NavigationStack</code> 在 watchOS 中也得到的重大更新，并有了新的动画效果</p><p><img src="/img/wwdc-23-whats-new-in-swiftui/watchos-10-updated-views.jpeg"></p><p>部分 API 得到改进：</p><ul><li><code>.containerBackground(for: .navigation) &#123; ... &#125;</code>：设置容器背景，在不同容器中切换时能够顺滑切换</li><li><code>ToolbarItem</code> 新增 <code>topBarLeading</code> 和 <code>topBarTrailing</code>（均包含跨平台支持）<br><img src="/img/wwdc-23-whats-new-in-swiftui/toolbar-placement.jpeg"></li><li>支持 <code>DatePicker</code> 和 <code>List</code> selection</li></ul><h3 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h3><p>所有平台的 Widgets 均由 SwiftUI 构建。</p><p><img src="/img/wwdc-23-whats-new-in-swiftui/widgets.jpeg"></p><p>🎉 Widget 支持「交互和动画」</p><ul><li>Widget 按钮点击后触发的是 Bundle 里的 App Intents 相关代码</li><li>用 <code>.animation</code> 和 <code>.transition</code> 为元素增加动画</li></ul><h3 id="Previews"><a href="#Previews" class="headerlink" title="Previews"></a>Previews</h3><ul><li>基于 SwiftUI 5.9，你可以用宏来构建 Preview</li><li>macOS app 支持 Live Preview<br><img src="/img/wwdc-23-whats-new-in-swiftui/macos-live-preview.jpeg"></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#<span class="type">Preview</span>(<span class="string">&quot;Preview Name&quot;</span>) &#123;</span><br><span class="line">   <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预览 Widget 动画：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#<span class="type">Preview</span>(as: .systemSmall) &#123;</span><br><span class="line">    <span class="type">CaffeineTrackerWidget</span>()</span><br><span class="line">&#125; timeline: &#123;</span><br><span class="line">    <span class="type">CaffeineLogEntry</span>.log1</span><br><span class="line">    <span class="type">CaffeineLogEntry</span>.log2</span><br><span class="line">    <span class="type">CaffeineLogEntry</span>.log3</span><br><span class="line">    <span class="type">CaffeineLogEntry</span>.log4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/wwdc-23-whats-new-in-swiftui/preview-macro.jpeg"></p><p>更多更新：</p><ul><li>MapKit for SwiftUI：更全面地控制、自定义</li><li>Swift Charts：支持滚动、选择、饼&#x2F;环状图</li><li>StoreKit for SwiftUI：更简单地构建内购页面</li><li>…</li></ul><h2 id="简化的数据流"><a href="#简化的数据流" class="headerlink" title="简化的数据流"></a>简化的数据流</h2><h3 id="Observable"><a href="#Observable" class="headerlink" title="@Observable"></a><code>@Observable</code></h3><p><img src="/img/wwdc-23-whats-new-in-swiftui/observable.jpeg"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Observable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> breed <span class="operator">=</span> <span class="type">DogBreed</span>.mutt</span><br><span class="line">    <span class="keyword">var</span> owner: <span class="type">Person</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DogCard</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dog: <span class="type">Dog</span> <span class="comment">// 之前的写法：@ObservedObject var dog: Dog</span></span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SwiftUI 中的数据流被简化成 <code>@State</code> 和 <code>@Environment</code></p><ul><li><code>@State</code> 处理可更改的变量</li><li><code>@Environment</code> 融合了原先的 <code>@EnvironmentObject</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WhatsNew2023</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> currentUser: <span class="type">User</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ProfileView</span>()</span><br><span class="line">                .environment(currentUser)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ProfileView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">        <span class="meta">@Environment</span>(<span class="type">User</span>.<span class="keyword">self</span>) <span class="keyword">private</span> <span class="keyword">var</span> currentUser: <span class="type">User</span>?</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> currentUser &#123;</span><br><span class="line">                <span class="type">UserDetails</span>(user: currentUser)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Log In&quot;</span>) &#123; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Observable</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">        <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SwiftData"><a href="#SwiftData" class="headerlink" title="SwiftData"></a>SwiftData</h3><p>隆重介绍，SwiftData。</p><p>SwiftData 提供了 Swift 式的 Core Data 实现，支持 Swift 5.9 的宏。</p><p>只需要把 <code>@Observable</code> 改为 <code>@Model</code> 就可以了，不用担心，<code>@Observable</code> 的能力也会完全保留。</p><p>在 SwiftUI 中，使用 <code>@Query</code> 来查询数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> SwiftData</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RecentDogsView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Query</span>(sort: \.dateSpotted) <span class="keyword">private</span> <span class="keyword">var</span> dogs: [<span class="type">Dog</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span>(.vertical) &#123;</span><br><span class="line">            <span class="type">LazyVStack</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(dogs) &#123; dog <span class="keyword">in</span></span><br><span class="line">                    <span class="type">DogCard</span>(dog: dog)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DogCard</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dog: <span class="type">Dog</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">DogImage</span>(dog: dog)</span><br><span class="line">                .overlay(alignment: .bottom) &#123;</span><br><span class="line">                    <span class="type">HStack</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(dog.name)</span><br><span class="line">                        <span class="type">Spacer</span>()</span><br><span class="line">                        <span class="type">Image</span>(systemName: <span class="string">&quot;heart&quot;</span>)</span><br><span class="line">                            .symbolVariant(dog.isFavorite <span class="operator">?</span> .fill : .none)</span><br><span class="line">                    &#125;</span><br><span class="line">                    .font(.headline)</span><br><span class="line">                    .padding(.horizontal, <span class="number">22</span>)</span><br><span class="line">                    .padding(.vertical, <span class="number">12</span>)</span><br><span class="line">                    .background(.thinMaterial)</span><br><span class="line">                &#125;</span><br><span class="line">                .clipShape(.rect(cornerRadius: <span class="number">16</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DogImage</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dog: <span class="type">Dog</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.green)</span><br><span class="line">                .frame(width: <span class="number">400</span>, height: <span class="number">400</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Model</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> isFavorite <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> dateSpotted <span class="operator">=</span> <span class="type">Date</span>.now</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="type">Preview</span> &#123;</span><br><span class="line">    <span class="type">RecentDogsView</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Document-Based-App"><a href="#Document-Based-App" class="headerlink" title="Document-Based App"></a>Document-Based App</h3><ul><li>增加了一个全新的 API 用以快速构建 model container：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> SwiftData</span><br><span class="line"><span class="keyword">import</span> UniformTypeIdentifiers</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">struct</span> <span class="title class_">WhatsNew2023</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">DocumentGroup</span>(editing: <span class="type">DogTag</span>.<span class="keyword">self</span>, contentType: .dogTag) &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">Color</span>.clear</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Model</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DogTag</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> text <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UTType</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> dogTag: <span class="type">UTType</span> &#123;</span><br><span class="line">        <span class="type">UTType</span>(exportedAs: <span class="string">&quot;com.apple.SwiftUI.dogTag&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文档编辑器现自动支持分享和重命名</li><li>文档编辑器的 toolbar 中默认加入 Undo &amp; Redo</li><li>新的 Inspector View：用于修改选中内容的属性，并能自适应不同尺寸的设备</li><li><code>.fileMover</code>，<code>.fileImporter</code>，<code>.fileExporter</code> 支持自定义 Label</li><li><code>.confirmationDialog</code> 支持「不再询问」、「严重等级」</li><li><code>HelpLink</code>：「帮助」按钮</li></ul><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><ul><li>持久化自定义列</li><li>大纲视图</li><li>程序化控制 <code>Section</code> 展开与否</li><li><code>backgroundProminence</code> 使得 UI 更加灵活、易读</li><li>更多表格自定义选项，例如：可隐藏表头，可关闭隔行背景等</li></ul><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>对于大数据集，SwiftUI 的性能有很大提升。</p><p>具体的这里没说，到时候关注下 Demystify SwiftUI performance</p><h2 id="精美的动画"><a href="#精美的动画" class="headerlink" title="精美的动画"></a>精美的动画</h2><p><img src="/img/wwdc-23-whats-new-in-swiftui/advanced-animation-swiftui.jpeg"></p><p><img src="/img/wwdc-23-whats-new-in-swiftui/advanced-animation.gif"></p><h3 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h3><p>可以分别对多个属性添加多个关键帧，并指定每一段的动画曲线</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">KeyframeAnimator_Snippet</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Logo</span>(color: .blue)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Tap the shape&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logo</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">Color</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> runPlan <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="type">KeyframeAnimator</span>(</span><br><span class="line">                initialValue: <span class="type">AnimationValues</span>(), trigger: runPlan</span><br><span class="line">            ) &#123; values <span class="keyword">in</span></span><br><span class="line">                <span class="type">LogoField</span>(color: color)</span><br><span class="line">                    .scaleEffect(values.scale)</span><br><span class="line">                    .rotationEffect(values.rotation, anchor: .bottom)</span><br><span class="line">                    .offset(y: values.verticalTranslation)</span><br><span class="line">                    .frame(width: <span class="number">240</span>, height: <span class="number">240</span>)</span><br><span class="line">            &#125; keyframes: &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="type">KeyframeTrack</span>(\.verticalTranslation) &#123;</span><br><span class="line">                    <span class="type">SpringKeyframe</span>(<span class="number">30</span>, duration: <span class="number">0.25</span>, spring: .smooth)</span><br><span class="line">                    <span class="type">CubicKeyframe</span>(<span class="operator">-</span><span class="number">120</span>, duration: <span class="number">0.3</span>)</span><br><span class="line">                    <span class="type">CubicKeyframe</span>(<span class="operator">-</span><span class="number">120</span>, duration: <span class="number">0.5</span>)</span><br><span class="line">                    <span class="type">CubicKeyframe</span>(<span class="number">10</span>, duration: <span class="number">0.3</span>)</span><br><span class="line">                    <span class="type">SpringKeyframe</span>(<span class="number">0</span>, spring: .bouncy)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">KeyframeTrack</span>(\.scale) &#123;</span><br><span class="line">                    <span class="type">SpringKeyframe</span>(<span class="number">0.98</span>, duration: <span class="number">0.25</span>, spring: .smooth)</span><br><span class="line">                    <span class="type">SpringKeyframe</span>(<span class="number">1.2</span>, duration: <span class="number">0.5</span>, spring: .smooth)</span><br><span class="line">                    <span class="type">SpringKeyframe</span>(<span class="number">1.0</span>, spring: .bouncy)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">KeyframeTrack</span>(\.rotation) &#123;</span><br><span class="line">                    <span class="type">LinearKeyframe</span>(<span class="type">Angle</span>(degrees:<span class="number">0</span>), duration: <span class="number">0.45</span>)</span><br><span class="line">                    <span class="type">CubicKeyframe</span>(<span class="type">Angle</span>(degrees: <span class="number">0</span>), duration: <span class="number">0.1</span>)</span><br><span class="line">                    <span class="type">CubicKeyframe</span>(<span class="type">Angle</span>(degrees: <span class="operator">-</span><span class="number">15</span>), duration: <span class="number">0.1</span>)</span><br><span class="line">                    <span class="type">CubicKeyframe</span>(<span class="type">Angle</span>(degrees: <span class="number">15</span>), duration: <span class="number">0.1</span>)</span><br><span class="line">                    <span class="type">CubicKeyframe</span>(<span class="type">Angle</span>(degrees: <span class="operator">-</span><span class="number">15</span>), duration: <span class="number">0.1</span>)</span><br><span class="line">                    <span class="type">SpringKeyframe</span>(<span class="type">Angle</span>(degrees: <span class="number">0</span>), spring: .bouncy)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                runPlan <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">AnimationValues</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> scale <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">var</span> verticalTranslation <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">var</span> rotation <span class="operator">=</span> <span class="type">Angle</span>(degrees: <span class="number">0.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LogoField</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> color: <span class="type">Color</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">ZStack</span>(alignment: .bottom) &#123;</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">48</span>)</span><br><span class="line">                    .fill(.shadow(.drop(radius: <span class="number">5</span>)))</span><br><span class="line">                    .fill(color.gradient)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="type">Preview</span> &#123;</span><br><span class="line">    <span class="type">KeyframeAnimator_Snippet</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多阶段动画"><a href="#多阶段动画" class="headerlink" title="多阶段动画"></a>多阶段动画</h3><p>对于可拆分为多个阶段的动画，相较于关键帧动画，多阶段动画显得更加简单，在这里可以设置每个阶段对应的动画方案。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PhaseAnimator_Snippet</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> sightingCount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">HappyDog</span>()</span><br><span class="line">                .phaseAnimator(</span><br><span class="line">                    <span class="type">SightingPhases</span>.allCases, trigger: sightingCount</span><br><span class="line">                ) &#123; content, phase <span class="keyword">in</span></span><br><span class="line">                    content</span><br><span class="line">                        .rotationEffect(phase.rotation)</span><br><span class="line">                        .scaleEffect(phase.scale)</span><br><span class="line">                &#125; animation: &#123; phase <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">switch</span> phase &#123;</span><br><span class="line">                    <span class="keyword">case</span> .shrink: .snappy(duration: <span class="number">0.1</span>)</span><br><span class="line">                    <span class="keyword">case</span> .spin: .bouncy</span><br><span class="line">                    <span class="keyword">case</span> .grow: .spring(</span><br><span class="line">                        duration: <span class="number">0.2</span>, bounce: <span class="number">0.1</span>, blendDuration: <span class="number">0.1</span>)</span><br><span class="line">                    <span class="keyword">case</span> .reset: .linear(duration: <span class="number">0.0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                .sensoryFeedback(.increase, trigger: sightingCount)</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;There’s One!&quot;</span>, action: recordSighting)</span><br><span class="line">                .zIndex(<span class="operator">-</span><span class="number">1.0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">recordSighting</span>() &#123;</span><br><span class="line">        sightingCount <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">SightingPhases</span>: <span class="title class_">CaseIterable</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> reset</span><br><span class="line">        <span class="keyword">case</span> shrink</span><br><span class="line">        <span class="keyword">case</span> spin</span><br><span class="line">        <span class="keyword">case</span> grow</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> rotation: <span class="type">Angle</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .spin, .grow: <span class="type">Angle</span>(degrees: <span class="number">360</span>)</span><br><span class="line">            <span class="keyword">default</span>: <span class="type">Angle</span>(degrees: <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> scale: <span class="type">Double</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .reset: <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">case</span> .shrink: <span class="number">0.75</span></span><br><span class="line">            <span class="keyword">case</span> .spin: <span class="number">0.85</span></span><br><span class="line">            <span class="keyword">case</span> .grow: <span class="number">1.0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HappyDog</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>(alignment: .center) &#123;</span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(.blue.gradient)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;🐶&quot;</span>)</span><br><span class="line">                .font(.system(size: <span class="number">58</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        .clipShape(.rect(cornerRadius: <span class="number">12</span>))</span><br><span class="line">        .frame(width: <span class="number">96</span>, height: <span class="number">96</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="type">Preview</span> &#123;</span><br><span class="line">    <span class="type">PhaseAnimator_Snippet</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="触觉反馈"><a href="#触觉反馈" class="headerlink" title="触觉反馈"></a>触觉反馈</h3><p><code>.sensoryFeedback(.increase, trigger: sightingCount)</code></p><p>根据不同平台会有不同的效果，你看需要参考 HIG</p><p>该 modifier 是由数据驱动的，当数据变化时才会触发，我之前也做过类似的库：<a href="https://github.com/LiYanan2004/SwiftUI-Haptics">SwiftUI-Haptics</a></p><h3 id="视觉效果"><a href="#视觉效果" class="headerlink" title="视觉效果"></a>视觉效果</h3><p>基于位置的动画效果，之前需要用到 <code>GeometryReader</code>，但由于其会占据尽可能大的空间，可能会导致很多问题。</p><p>之前的解决方案可能是把 <code>GeometryReader</code> 放在 <code>.overlay</code> 中保持和元素大小位置一致。</p><p>在 SwiftUI 5 中，可以直接使用 <code>.visualEffect</code> 即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DogCircle</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dog: <span class="type">Dog</span></span><br><span class="line">    <span class="keyword">var</span> focalPoint: <span class="type">CGPoint</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">DogImage</span>(dog: dog)</span><br><span class="line">                .visualEffect &#123; content, geometry <span class="keyword">in</span></span><br><span class="line">                    content</span><br><span class="line">                        .scaleEffect(contentScale(in: geometry))</span><br><span class="line">                        .saturation(contentSaturation(in: geometry))</span><br><span class="line">                        .opacity(contentOpacity(in: geometry))</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>话说，这个思路貌似就是之前的 <code>.overlay</code> + <code>GeometryReader</code>，这个 API 应该是可以做向后兼容的，我简单写了一个作为参考。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">macOS</span> <span class="number">11.0</span>, <span class="keyword">iOS</span> <span class="number">14.0</span>, <span class="keyword">watchOS</span> <span class="number">7.0</span>, <span class="keyword">tvOS</span> <span class="number">14.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="meta">@backDeployed</span>(before: macOS <span class="number">14.0</span>, iOS <span class="number">17.0</span>, watchOS <span class="number">10.0</span>, tvOS <span class="number">17.0</span>)</span><br><span class="line">    <span class="meta">@ViewBuilder</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">visualEffect</span>&lt;<span class="type">VisualEffect</span>&gt;(<span class="meta">@ViewBuilder</span> <span class="keyword">_</span> <span class="params">effect</span>: <span class="keyword">@escaping</span> (<span class="keyword">Self</span>, <span class="type">GeometryProxy</span>) -&gt; <span class="type">VisualEffect</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">VisualEffect</span> : <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.hidden().overlay &#123;</span><br><span class="line">            <span class="type">GeometryReader</span> &#123; currentProxy <span class="keyword">in</span></span><br><span class="line">                effect(<span class="keyword">self</span>, currentProxy)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本格式化增强"><a href="#文本格式化增强" class="headerlink" title="文本格式化增强"></a>文本格式化增强</h3><p>在之前的版本中，可以在 <code>Text</code> 中嵌套 <code>Text</code> 或 <code>Image</code>，类似 <code>Text(&quot;\(Text(&quot;Hello&quot;)) SwiftUI&quot;)</code></p><p>在 SwiftUI 5.0 中，可以使用 <code>Shader</code> 来格式化文本，其中，<code>Shader</code> 使用 Metal API 构建</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ShaderUse_Snippet</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            <span class="subst">\(</span></span></span><br><span class="line"><span class="subst"><span class="string">                Text(<span class="string">&quot;Furdinand&quot;</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">                    .foregroundStyle(stripes)</span></span></span><br><span class="line"><span class="subst"><span class="string">                    .fontWidth(.expanded)</span></span></span><br><span class="line"><span class="subst"><span class="string">            )</span> <span class="subst">\</span></span></span><br><span class="line"><span class="subst"><span class="string"></span>            is a good dog!</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stripes: <span class="type">Shader</span> &#123;</span><br><span class="line">        <span class="type">ShaderLibrary</span>.angledFill(</span><br><span class="line">            .float(stripeSpacing),</span><br><span class="line">            .float(stripeAngle),</span><br><span class="line">            .color(.blue)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>滑块组件增加左右图标到底回弹效果（由新版本 SF Symbols 支持）</li><li>SF Symbol 新增动画效果，例如：回弹、缩放，脉冲等<br><img src="/img/wwdc-23-whats-new-in-swiftui/sf-symbols-animation.gif"></li><li><code>.textScale</code> 简化了 Small Caps 的实现方式，对于没有 Small Caps 排版的语言来说，也能正常显示为小文本</li><li>对于高文本（例如泰语中的一些字符），使用 <code>.typesettingLanguage</code> 来自动优化行间距</li></ul><blockquote><p>Curt: I’ve only scratched the surface here. There’s even more to discover, from animation completion handlers to building entirely custom animations. I hope you enjoy these APIs as much as I do. </p></blockquote><h2 id="交互增强"><a href="#交互增强" class="headerlink" title="交互增强"></a>交互增强</h2><p><img src="/img/wwdc-23-whats-new-in-swiftui/enhanced-interaction.jpeg"></p><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><ul><li><code>.scrollTransition</code>：构建滚动时的元素动画</li><li><code>.containerRelativeFrame</code>：基于容器尺寸给出元素的相对大小<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">YourView</span>()</span><br><span class="line">   .containerRelativeFrame(.horizontal, count: <span class="number">5</span>, span: <span class="number">2</span>, spacing: <span class="number">8</span>)</span><br></pre></td></tr></table></figure>指定元素相对容器的大小，将容器在横向分为 5 块，每一个元素占据 2 块的位置，元素与元素间间距为 8px</li><li><code>.scrollTargetLayout()</code> 将容器中的元素作为一个个目标，允许一个个滚动。</li><li><code>.scrollTargetBehavior</code> 提供了对高级滚动行为的控制，包括 <code>.paging</code> 和 <code>.viewAligned</code></li><li><code>.scrollPosition</code> 可以实时获取到可见区域内<strong>最上面</strong>的的元素的 ID</li></ul><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><ul><li><code>.allowsDynamicRange(.high)</code>：HDR 渲染图片</li><li>更好的辅助功能支持，例如：缩放等</li></ul><h3 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h3><ul><li>以枚举的形式使用自定义颜色，不用再担心 typo-errors 了</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Color</span>(.deeeepPurple)</span><br></pre></td></tr></table></figure><p><img src="/img/wwdc-23-whats-new-in-swiftui/bundle-color.jpeg"></p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ul><li><code>ControlGroup</code> 新增 <code>CompactMenu</code> 样式</li><li><code>Picker</code> 新增 <code>Palette</code> 样式</li><li><code>.paletteSelectionEffect</code> 简化了 Picker 中的 “选中&#x2F;未选中” 状态显示</li><li>新增 <code>ButtonBorderShape.circle</code></li><li>新增 <code>.springLoadingBehavior</code>，允许在 Drag &amp; Drop 时触发操作</li><li>tvOS 支持 <code>BorderlessButtonStyle</code></li><li>新增 <code>.onKeyPress</code> 用以响应键盘输入 &#x2F; 快捷键</li></ul><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>今年 SwiftUI 的改进还是很大的，总结一下：</p><ul><li>新的适用平台</li><li>与现有框架的更好融合</li><li>新的数据流结构，@Observable，@Model，SwiftData</li><li>可控、个性化动画</li><li>大量全新 modifiers</li><li>ScrollView 增强</li><li>…</li></ul><p>这篇还属于是一些皮毛，后面还有很多更加深入的 Session 来讨论各个板块的内容。</p><p>我们下期再会。🤭</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文为 &lt;a href=&quot;https://developer.apple.com/wwdc23/10148&quot;&gt;What’s new in SwiftUI&lt;/a&gt; 的学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="WWDC 23" scheme="https://liyanan2004.github.io/tags/WWDC-23/"/>
    
  </entry>
  
  <entry>
    <title>用 Apple Script 打开任务栏菜单</title>
    <link href="https://liyanan2004.github.io/open-menu-bar-extra-with-apple-script/"/>
    <id>https://liyanan2004.github.io/open-menu-bar-extra-with-apple-script/</id>
    <published>2023-05-01T13:50:45.000Z</published>
    <updated>2023-05-01T14:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>（本文大部分为 ChatGPT 生成）</p><p>如果你是一个苹果电脑的用户，你可能已经习惯了使用任务栏菜单来快速地打开应用程序和执行其他的任务。但是，有时候你可能会感到很繁琐，因为每次打开任务栏菜单都需要通过鼠标点击来完成。但是，你可能不知道的是，你可以使用Apple Script来打开任务栏菜单，并以更快的方式访问它。</p><p>Apple Script 是一种编程语言，它可以用来自动化和控制Mac电脑中的各种操作。使用Apple Script，你可以编写脚本来执行各种任务，包括打开应用程序、发送电子邮件、自动化工作流程等等。</p><span id="more"></span><h2 id="系统级菜单"><a href="#系统级菜单" class="headerlink" title="系统级菜单"></a>系统级菜单</h2><p>打开任务栏菜单是Apple Script的一项基本操作。下面是一个简单的示例脚本，用于打开任务栏菜单：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;System Events&quot;</span></span><br><span class="line">    <span class="keyword">tell</span> process <span class="string">&quot;SystemUIServer&quot;</span></span><br><span class="line">        click (menu bar <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure><p>在这个脚本中，我们使用了Apple Script的 tell 语句，它允许我们控制不同的应用程序和进程。我们首先使用 tell 语句告诉Apple Script要控制的应用程序是“System Events”。然后，我们再次使用 tell 语句告诉Apple Script要控制的进程是“SystemUIServer”，这是负责任务栏菜单的进程。</p><p>在最后一行中，我们使用了 click 命令来模拟点击任务栏菜单。具体来说，我们使用了 menu bar item 1 of menu bar 1 这个命令来定位任务栏菜单的位置，并将其作为 click 命令的参数。</p><p>要运行这个脚本，你可以将其保存到脚本编辑器中，并点击运行按钮。当脚本运行时，它会自动打开任务栏菜单，让你快速访问你需要的应用程序和功能。</p><p>总的来说，使用Apple Script来打开任务栏菜单是一个简单而有效的方法，可以大大提高你的工作效率。如果你是一个苹果电脑的用户，不妨尝试使用这个脚本来自动化你的日常操作。</p><p>（以上是 AI 生成，接下来，我来补充）</p><h2 id="第三方-App"><a href="#第三方-App" class="headerlink" title="第三方 App"></a>第三方 App</h2><p>如果你的系统是 macOS Ventura（其他系统的你可以尝试一下），那么 <code>tell process &quot;SystemUIServer&quot;</code> 只能获取到类似 Siri 这种的系统进程，</p><p>但是，我们的目标远不止如此。</p><p>想要控制第三方app，可以参考以下代码（代码由 ChatGPT 生成，并且实测可以实现我们的目标）：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;System Events&quot;</span></span><br><span class="line">    <span class="keyword">tell</span> process <span class="string">&quot;APP名称&quot;</span></span><br><span class="line">        click menu bar <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="number">2</span></span><br><span class="line">        <span class="comment">-- 点击第一个菜单项</span></span><br><span class="line">        click menu <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="built_in">item</span> <span class="number">1</span> <span class="keyword">of</span> menu bar <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure><blockquote><p>这里记得吧 “APP名称” 改下即可</p><p>这一部分我确实是不太会，问的 ChatGPT，它真的能给我正确的答案😱</p></blockquote><p>理论上如果 App 是原生实现的（AppKit，SwiftUI，Catalyst 这种），都能用 Apple Script 控制，</p><p>可以用 <code>entire contents</code> 来打印出所有的内容，然后逐一查找，</p><p>网页套壳的（基于 Electron 框架，例如：新版QQ，抖音，B站这种）就算了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;（本文大部分为 ChatGPT 生成）&lt;/p&gt;
&lt;p&gt;如果你是一个苹果电脑的用户，你可能已经习惯了使用任务栏菜单来快速地打开应用程序和执行其他的任务。但是，有时候你可能会感到很繁琐，因为每次打开任务栏菜单都需要通过鼠标点击来完成。但是，你可能不知道的是，你可以使用Apple Script来打开任务栏菜单，并以更快的方式访问它。&lt;/p&gt;
&lt;p&gt;Apple Script 是一种编程语言，它可以用来自动化和控制Mac电脑中的各种操作。使用Apple Script，你可以编写脚本来执行各种任务，包括打开应用程序、发送电子邮件、自动化工作流程等等。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Apple Script" scheme="https://liyanan2004.github.io/tags/Apple-Script/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 23 Swift Student Challenge</title>
    <link href="https://liyanan2004.github.io/wwdc-23-swift-student-challenge/"/>
    <id>https://liyanan2004.github.io/wwdc-23-swift-student-challenge/</id>
    <published>2023-04-15T14:14:29.000Z</published>
    <updated>2023-04-23T04:28:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>有幸在高中就参与过 WWDC 20 的 SSC，可惜当时课余时间并不充裕导致作品的质量并不理想，</p><p>如今，再战 WWDC 23 SSC 😋</p><span id="more"></span><p>话又说回来，要不是官网宣布 WWDC 23 的时间并发布了 SSC 活动，我都差点忘记了😂</p><p>但是，我已不是三年前的我，这次的制作周期非常紧凑，也比较顺利，同时，相对来说也比较满意。</p><h2 id="时光倒流（3月30日）"><a href="#时光倒流（3月30日）" class="headerlink" title="时光倒流（3月30日）"></a>时光倒流（3月30日）</h2><p>早晨起来，瞄了一眼手表，我去…WWDC 23 定档了！！</p><p>非常激动，也很开心（完全不记得有 SSC），点开官网，习惯性地翻了翻，</p><p>诶，SSC！！！还没准备怎么办？（我顿时愣住了，立马开始找灵感）</p><p>很快啊，有灵感了！！🤭</p><blockquote><p>以上都是废话，你可以不看（好像说的有点晚了😂）</p></blockquote><h2 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h2><p>SSC 是让学生爱好者们使用极具创新的方法来展现自己的 ideas，</p><p>使用 Playgrounds 提交作品，支持较新的 SDK，因此使用新的框架也能体现出对开发团队的支持（油管上听来的）</p><p>首先想到的就是 <code>Swift Charts</code>。</p><p>图表可以用在数据可视化，但是哪来那么多的数据呢？并且所有的核心要点要在三分钟之内被展现出来。</p><p>我突然想起了高数中的「泰勒展开式」，无限趋近的概念可以非常轻松的通过图表的可视化来展现。</p><p>又想起了上学期 C 语言课程中让我们实现 π 的计算。</p><p>因此，本次 SSC 的主题就定为了「使用 Swift Charts 来展现 π 的计算过程」，利用图表可视化展现出无限趋近的概念。</p><h2 id="Playground-设计"><a href="#Playground-设计" class="headerlink" title="Playground 设计"></a>Playground 设计</h2><p>我希望向各位评委展现出我“高超”的 SwiftUI 本领，从布局到神奇移动，再到创新的交互，最后到动画设计与控制。</p><p>我不仅希望我的内容能够吸引评委，也希望我制作的动画能够让评委们感受到我对 SwiftUI 的热爱。</p><p>因此，我设计了6个分页。</p><ol><li>欢迎页：展示 Playground 的主题、动态图标</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/welcome-page.jpeg"></p><ol start="2"><li>目录页：展示神奇移动效果（有点为了神奇移动而神奇移动的感觉🤔）</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/toc-page.jpeg"></p><ol start="3"><li>简单思考页：展示创新点：刮刮卡</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/ques-page.jpeg"></p><ol start="4"><li>原理展示页：展示核心要点，Swift Charts、动画控制</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/demestify-page.jpeg"></p><ol start="5"><li>回顾页：启发来源于之前获奖作品，为了和结束页动画配合。</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/quiz-page.jpeg"></p><ol start="6"><li>结束页：展示动态图标和五彩纸屑效果（没错，就是 iMessage 中的五彩纸屑，用 Canvas 完美复刻了一个）</li></ol><p><img src="/img/wwdc-23-swift-student-challenge/end-page.jpeg"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果最终获奖了，Playground 中所有的源码我会开源在 GitHub：<a href="https://github.com/LiYanan2004/wwdc-23-ssc">WWDC 23 SSC</a></p><blockquote><p>5月10号之后链接还显示 404，就是很遗憾没获奖，再接再厉 🥹</p></blockquote><p>五彩纸屑效果我在过年那会儿就已经写好并放在 <a href="https://github.com/LiYanan2004/ColorfulPaper/">GitHub</a> 开源了，如果你有兴趣可以去研究下实现原理。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有幸在高中就参与过 WWDC 20 的 SSC，可惜当时课余时间并不充裕导致作品的质量并不理想，&lt;/p&gt;
&lt;p&gt;如今，再战 WWDC 23 SSC 😋&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="WWDC 23" scheme="https://liyanan2004.github.io/tags/WWDC-23/"/>
    
    <category term="Swift Charts" scheme="https://liyanan2004.github.io/tags/Swift-Charts/"/>
    
    <category term="Swift Student Challenge" scheme="https://liyanan2004.github.io/tags/Swift-Student-Challenge/"/>
    
  </entry>
  
  <entry>
    <title>Swift Charts 入门 —— 认识各种标记</title>
    <link href="https://liyanan2004.github.io/swift-charts-intro-marks/"/>
    <id>https://liyanan2004.github.io/swift-charts-intro-marks/</id>
    <published>2023-04-06T08:51:31.000Z</published>
    <updated>2023-04-06T12:19:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习和使用 WWDC 22 上全新的 Swift Charts，</p><p>Swift Charts 使用 SwiftUI 的声明式语法，用于在 SwiftUI 中构建可视化图表，便于数据的可视化分析。</p><p>本期博客将专注于 Swift Charts 的标记和符号。</p><p><img src="/img/swift-charts/animated-charts.gif"></p><span id="more"></span><h2 id="开始创建图表"><a href="#开始创建图表" class="headerlink" title="开始创建图表"></a>开始创建图表</h2><p>在正式开始创建图表之前，需要先建立一个图表区域。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ChartView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span> &#123;</span><br><span class="line">            <span class="comment">// ... </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Marks 需要被放置在 Charts 内作为元素。</p><p>当有多个 Marks 重叠时，其表现形式类似于 <code>ZStack</code>。</p><p>你可以在创建 Chart 时直接导入数据，也可以在 Chart 内使用 <code>ForEach</code> 来导入数据。</p><h2 id="标记（Mark）"><a href="#标记（Mark）" class="headerlink" title="标记（Mark）"></a>标记（Mark）</h2><h3 id="LineMark"><a href="#LineMark" class="headerlink" title="LineMark"></a>LineMark</h3><p>多个点连成一条线，简单直接。</p><p><img src="/img/swift-charts/line-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SunshineChart</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">            <span class="type">LineMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">                y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MonthlyHoursOfSunshine</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> date: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">var</span> hoursOfSunshine: <span class="type">Double</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">month</span>: <span class="type">Int</span>, <span class="params">hoursOfSunshine</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.autoupdatingCurrent</span><br><span class="line">        <span class="keyword">self</span>.date <span class="operator">=</span> calendar.date(from: <span class="type">DateComponents</span>(year: <span class="number">2023</span>, month: month))<span class="operator">!</span></span><br><span class="line">        <span class="keyword">self</span>.hoursOfSunshine <span class="operator">=</span> hoursOfSunshine</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data: [<span class="type">MonthlyHoursOfSunshine</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">1</span>, hoursOfSunshine: <span class="number">74</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">2</span>, hoursOfSunshine: <span class="number">99</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">3</span>, hoursOfSunshine: <span class="number">100</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">4</span>, hoursOfSunshine: <span class="number">110</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">5</span>, hoursOfSunshine: <span class="number">112</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">6</span>, hoursOfSunshine: <span class="number">125</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">7</span>, hoursOfSunshine: <span class="number">117</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">8</span>, hoursOfSunshine: <span class="number">112</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">9</span>, hoursOfSunshine: <span class="number">106</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">10</span>, hoursOfSunshine: <span class="number">102</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">11</span>, hoursOfSunshine: <span class="number">93</span>),</span><br><span class="line">    <span class="type">MonthlyHoursOfSunshine</span>(month: <span class="number">12</span>, hoursOfSunshine: <span class="number">78</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="BarMark"><a href="#BarMark" class="headerlink" title="BarMark"></a>BarMark</h3><p>条状图，可以很清晰的展现出各个项目的数量多少。</p><p><img src="/img/swift-charts/bar-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="type">BarMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Department&quot;</span>, <span class="variable">$0</span>.department),</span><br><span class="line">                y: .value(<span class="string">&quot;Profit&quot;</span>, <span class="variable">$0</span>.profit)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Profit</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> department: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> profit: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data: [<span class="type">Profit</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Profit</span>(department: <span class="string">&quot;Production&quot;</span>, profit: <span class="number">15000</span>),</span><br><span class="line">    <span class="type">Profit</span>(department: <span class="string">&quot;Marketing&quot;</span>, profit: <span class="number">8000</span>),</span><br><span class="line">    <span class="type">Profit</span>(department: <span class="string">&quot;Finance&quot;</span>, profit: <span class="number">10000</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="PointMark"><a href="#PointMark" class="headerlink" title="PointMark"></a>PointMark</h3><p>点标记，用于标定图标上的某一个或一系列点。</p><p><img src="/img/swift-charts/point-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SunshineChart</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">            <span class="type">LineMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">                y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            <span class="type">PointMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">                y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MonthlyHoursOfSunshine &amp; data 和 LineMark 中的一致，就不再重复了</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// struct MonthlyHoursOfSunshine &#123; ... &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// let data = [ ... ]</span></span><br></pre></td></tr></table></figure><h3 id="RuleMark"><a href="#RuleMark" class="headerlink" title="RuleMark"></a>RuleMark</h3><p>基准标记，就是一条线，可以直观的展现出例如平均值、波动情况等数据。</p><p><img src="/img/swift-charts/rule-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="type">BarMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Department&quot;</span>, <span class="variable">$0</span>.department),</span><br><span class="line">                y: .value(<span class="string">&quot;Profit&quot;</span>, <span class="variable">$0</span>.profit)</span><br><span class="line">            )</span><br><span class="line">            .opacity(<span class="number">0.3</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">RuleMark</span>(y: .value(<span class="string">&quot;Average&quot;</span>, <span class="number">11000</span>))</span><br><span class="line">                .lineStyle(<span class="type">StrokeStyle</span>(lineWidth: <span class="number">3</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Profit &amp; data 和 BarMark 中的一致，就不再重复了</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// struct Profit &#123; ... &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// let data = [ ... ]</span></span><br></pre></td></tr></table></figure><h3 id="RectangleMark"><a href="#RectangleMark" class="headerlink" title="RectangleMark"></a>RectangleMark</h3><p>与 PointMark 类似，只是形状变成了矩形。</p><p>当然，他也可以被用来展示一个区域。</p><p><img src="/img/swift-charts/rectangle-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="type">RectangleMark</span>(</span><br><span class="line">                xStart: .value(<span class="string">&quot;Rect Start Width&quot;</span>, <span class="variable">$0</span>.x <span class="operator">-</span> <span class="number">0.25</span>),</span><br><span class="line">                xEnd: .value(<span class="string">&quot;Rect End Width&quot;</span>, <span class="variable">$0</span>.x <span class="operator">+</span> <span class="number">0.25</span>),</span><br><span class="line">                yStart: .value(<span class="string">&quot;Rect Start Height&quot;</span>, <span class="variable">$0</span>.y <span class="operator">-</span> <span class="number">0.25</span>),</span><br><span class="line">                yEnd: .value(<span class="string">&quot;Rect End Height&quot;</span>, <span class="variable">$0</span>.y <span class="operator">+</span> <span class="number">0.25</span>)</span><br><span class="line">            )</span><br><span class="line">            .opacity(<span class="number">0.2</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">PointMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;X&quot;</span>, <span class="variable">$0</span>.x),</span><br><span class="line">                y: .value(<span class="string">&quot;Y&quot;</span>, <span class="variable">$0</span>.y)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Coord</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data: [<span class="type">Coord</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Coord</span>(x: <span class="number">5</span>, y: <span class="number">5</span>),</span><br><span class="line">    <span class="type">Coord</span>(x: <span class="number">2.5</span>, y: <span class="number">2.5</span>),</span><br><span class="line">    <span class="type">Coord</span>(x: <span class="number">3</span>, y: <span class="number">3</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="AreaMark"><a href="#AreaMark" class="headerlink" title="AreaMark"></a>AreaMark</h3><p>通过多个点组成线，并对其包裹的区域做填充，用来展示某一个区域。</p><p>如果是简单的矩形区域，也可以直接使用 RectangleMark。</p><blockquote><p>例如：天气app中，每天的最高温、最低温区间。</p></blockquote><p><img src="/img/swift-charts/area-mark.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Charts</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WeatherChart</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Chart</span>(data) &#123; day <span class="keyword">in</span></span><br><span class="line">            <span class="type">AreaMark</span>(</span><br><span class="line">                x: .value(<span class="string">&quot;Date&quot;</span>, day.date),</span><br><span class="line">                yStart: .value(<span class="string">&quot;Minimum Temperature&quot;</span>, day.minimumTemperature),</span><br><span class="line">                yEnd: .value(<span class="string">&quot;Maximum Temperature&quot;</span>, day.maximumTemperature)</span><br><span class="line">            )</span><br><span class="line">            .interpolationMethod(.catmullRom)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Weather</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">let</span> maximumTemperature: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> minimumTemperature: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Weather</span>(date: .now, maximumTemperature: <span class="number">20</span>, minimumTemperature: <span class="number">10</span>, id: <span class="number">1</span>),</span><br><span class="line">    <span class="type">Weather</span>(date: .now.addingTimeInterval(<span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span>), maximumTemperature: <span class="number">25</span>, minimumTemperature: <span class="number">13</span>, id: <span class="number">2</span>),</span><br><span class="line">    <span class="type">Weather</span>(date: .now.addingTimeInterval(<span class="number">2</span> <span class="operator">*</span> <span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span>), maximumTemperature: <span class="number">23</span>, minimumTemperature: <span class="number">12</span>, id: <span class="number">3</span>),</span><br><span class="line">    <span class="type">Weather</span>(date: .now.addingTimeInterval(<span class="number">3</span> <span class="operator">*</span> <span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span>), maximumTemperature: <span class="number">24</span>, minimumTemperature: <span class="number">13</span>, id: <span class="number">4</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="符号（Symbol）"><a href="#符号（Symbol）" class="headerlink" title="符号（Symbol）"></a>符号（Symbol）</h2><p>如果涉及到多样本处理，例如：比较多个城市的气温曲线，</p><p>为了让图表看起来更加直观，通常会使用一些符号或者颜色来做区分。</p><p>有以下几种方式：</p><h3 id="以颜色区分：foregroundStyle"><a href="#以颜色区分：foregroundStyle" class="headerlink" title="以颜色区分：foregroundStyle"></a>以颜色区分：foregroundStyle</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">    <span class="type">LineMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">    )</span><br><span class="line">    .foregroundStyle(.value(<span class="string">&quot;City&quot;</span>, <span class="variable">$0</span>.city))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以形状区分：symbol"><a href="#以形状区分：symbol" class="headerlink" title="以形状区分：symbol"></a>以形状区分：symbol</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Chart</span>(data, id: \.date) &#123;</span><br><span class="line">    <span class="type">LineMark</span>(</span><br><span class="line">        x: .value(<span class="string">&quot;Month&quot;</span>, <span class="variable">$0</span>.date),</span><br><span class="line">        y: .value(<span class="string">&quot;Hours of Sunshine&quot;</span>, <span class="variable">$0</span>.hoursOfSunshine)</span><br><span class="line">    )</span><br><span class="line">    .symbol(.value(<span class="string">&quot;City&quot;</span>, <span class="variable">$0</span>.city))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建之后在图表左下角会出现 Legend，</p><p><img src="/img/swift-charts/legend.png"></p><p>通过上述的两个 modifiers 也可以自定义颜色和形状，都会展示在 Legend 中。</p><p>如果想隐藏 Legend，可以使用 <code>.chartLegend(.hidden)</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学习和使用 WWDC 22 上全新的 Swift Charts，&lt;/p&gt;
&lt;p&gt;Swift Charts 使用 SwiftUI 的声明式语法，用于在 SwiftUI 中构建可视化图表，便于数据的可视化分析。&lt;/p&gt;
&lt;p&gt;本期博客将专注于 Swift Charts 的标记和符号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/swift-charts/animated-charts.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="SwiftUI" scheme="https://liyanan2004.github.io/tags/SwiftUI/"/>
    
    <category term="Swift Charts" scheme="https://liyanan2004.github.io/tags/Swift-Charts/"/>
    
    <category term="WWDC 22" scheme="https://liyanan2004.github.io/tags/WWDC-22/"/>
    
  </entry>
  
  <entry>
    <title>Magic Keyboard 使用体验</title>
    <link href="https://liyanan2004.github.io/magic-keyboard-with-touchid-unbox/"/>
    <id>https://liyanan2004.github.io/magic-keyboard-with-touchid-unbox/</id>
    <published>2023-04-04T06:36:31.000Z</published>
    <updated>2023-04-04T11:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>买了 Apple Magic Keyboard 已经一周多了，体验了苹果的「线上买，线下提」，</p><p>经过一番折腾，又体验了「14天无理由退货」，</p><p>来分享下我的使用感受和折腾过程。</p><span id="more"></span><h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><h3 id="为什么会买？"><a href="#为什么会买？" class="headerlink" title="为什么会买？"></a>为什么会买？</h3><p>主要是因为我宿舍的桌子上放了电脑之后，没足够空间写作业了，一张 A4 纸都放不平，</p><p>于是，</p><p>就买了个增高架，电脑被抬高了，键盘触控板用起来就不顺手了，</p><p>所以，就要配一把键盘。</p><h3 id="为什么是-Magic-Keyboard-呢？"><a href="#为什么是-Magic-Keyboard-呢？" class="headerlink" title="为什么是 Magic Keyboard 呢？"></a>为什么是 Magic Keyboard 呢？</h3><p>市面上的键盘普遍要 200+ 左右，质量参差不齐，</p><p>同时，我也不是很习惯机械键盘的手感，</p><p>考虑到以后也可能会使用 Mac mini，</p><p>于是，就决定一步到位，买了这把 Magic Keyboard，感受下剪刀脚键盘。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/keyboard.jpeg"></p><h3 id="体验「线下提货」"><a href="#体验「线下提货」" class="headerlink" title="体验「线下提货」"></a>体验「线下提货」</h3><p>这是 Apple 去年开始的一个新的购物选择，让你更快地拿到产品。</p><p>Apple Store 下单，等待邮件提醒可取货，去线下取货就行。</p><p>因为当下不是新品发售，而键盘也是属于配件一类，所以不存在缺货的情况。</p><p>从我到店，到拿到 Magic Keyboard，整个过程不超过 3 分钟，还是非常迅速的。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/order-pickup.jpeg"></p><p>迅速地完成了配对，测试了下按键功能正常就高高兴兴地走了。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/quick-unbox.jpeg"></p><h2 id="按键手感"><a href="#按键手感" class="headerlink" title="按键手感"></a>按键手感</h2><p>我个人是更加习惯键程短的薄膜键盘的，打字时有肌肉记忆，出错概率相对较低。</p><p>剪刀脚键盘的键程相较于蝶式键盘更长一些些，按键手感更软一些，整体还是比较舒服的。</p><p>Touch ID 按钮是那种开关的按钮的感觉，按下需要比其他按键更大的力气，不容易误触锁定。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/touchid-sensor.jpeg" alt="Touch ID Sensor"></p><h2 id="连接性能"><a href="#连接性能" class="headerlink" title="连接性能"></a>连接性能</h2><ul><li>MacBook Pro 开盖自动休眠后，依然可以通过键盘唤醒电脑</li><li>MacBook Pro 开机时第一次输入密码时键盘自动连接，无需等待</li><li>MacBook Pro 开盖自动唤醒后，键盘保持连接</li></ul><p>但是有时会出现打字没反应的情况，电脑显示键盘已连接，重新连接后恢复正常。</p><p>偶尔的，也能理解，正常。</p><h2 id="功能按键"><a href="#功能按键" class="headerlink" title="功能按键"></a>功能按键</h2><p>刚拿到 Magic Keyboard 的时候是需要使用 <code>fn + 功能按键</code> 才能触发对应功能，且有些功能（勿扰、语音输入）无法使用。</p><p>后来在 macOS 设置中找到 “将F1、F2等键用作标准功能键”，关闭后按键全部可用，并且也不需要搭配 fn 了。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/func-button-activate.png"></p><h2 id="电池续航"><a href="#电池续航" class="headerlink" title="电池续航"></a>电池续航</h2><p>第一把键盘的续航完全尿崩，最夸张的是关闭键盘电源后一晚上耗电70%，不具备任何参考价值。</p><p>第二把键盘正常，高强度敲了两天半的代码，键盘保持开启，只耗电3%。</p><p>能够达到宣称的「一次充电，续航一个月」</p><blockquote><p>我又把新的键盘充满了电，测测能用多久。</p></blockquote><h2 id="退换货经历"><a href="#退换货经历" class="headerlink" title="退换货经历"></a>退换货经历</h2><h3 id="轻微磕碰"><a href="#轻微磕碰" class="headerlink" title="轻微磕碰"></a>轻微磕碰</h3><p>仅在测试按键功能，和第一次充电时揭开了外包膜，也基本没有使用过键盘。</p><p>到学校后无意间用指甲感受到 Option 键下方不平，才发现凹进去一块。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/cosmetic-problem.jpeg"></p><p>几乎可以排除认为造成，但是，这不是换货的主要原因。</p><h3 id="续航问题、质量问题"><a href="#续航问题、质量问题" class="headerlink" title="续航问题、质量问题"></a>续航问题、质量问题</h3><p>我认为第一把键盘的电池是有问题的。</p><p>第一次连接时，电池显示 0%，我以为就是正常的没电了。</p><p>没电了充呗。</p><p>当晚充满电，第二天早上就带去学校了，还剩 <strong>27%</strong> 😱</p><p>不到 12 小时啊，而且，键盘的开关是「关闭」的状态。</p><p>接下来的几天，我又针对性的进行了一些记录：</p><p><img src="/img/magic-keyboard-with-touchid-unbox/battery-report.jpeg"></p><p>可以看出，无论是打开还是关闭键盘电源，都是有问题的，这就排除了我电脑连接、兼容性的问题了。</p><p>跟 400 客服沟通后，建议我无理由退货，再买一把新的（线下不能直接换货，好奇怪…）。</p><p>不过整个换货过程还是非常轻松愉快的，店员还跟我说，希望这把键盘没问题😂</p><h2 id="经验与总结"><a href="#经验与总结" class="headerlink" title="经验与总结"></a>经验与总结</h2><p>收到第二把键盘后，我仔细检查了外观，初始电池剩余容量（95%）。</p><p><img src="/img/magic-keyboard-with-touchid-unbox/new-keyboard.png"></p><p>回想起来，2023 年生产的键盘（盒子上写的），初始电量为 0% 确实不正常，下次也要注意检查这一部分。</p><p><strong>对于 铝金属 且 有棱角的外壳，用指甲来检查是否平整，避免初始磕碰（这种问题很难证明不是后期人为造成）</strong></p><p>总的来说，我仍然喜欢这把键盘，喜欢在 Apple 购物的体验，</p><p>没有什么废话，不跟你扯皮，该换就换，很喜欢这样的风格。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;买了 Apple Magic Keyboard 已经一周多了，体验了苹果的「线上买，线下提」，&lt;/p&gt;
&lt;p&gt;经过一番折腾，又体验了「14天无理由退货」，&lt;/p&gt;
&lt;p&gt;来分享下我的使用感受和折腾过程。&lt;/p&gt;</summary>
    
    
    
    <category term="新玩具" scheme="https://liyanan2004.github.io/categories/%E6%96%B0%E7%8E%A9%E5%85%B7/"/>
    
    
    <category term="Magic Keyboard" scheme="https://liyanan2004.github.io/tags/Magic-Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>搞笑体育 之 跑步是不可能跑步的</title>
    <link href="https://liyanan2004.github.io/hack-college-sport/"/>
    <id>https://liyanan2004.github.io/hack-college-sport/</id>
    <published>2023-03-13T12:42:25.000Z</published>
    <updated>2023-03-13T14:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，高校体育就是一坨…</p><p>且不说功能如何，</p><p>你一个给大学生用的“运动”软件，</p><p>开屏一大堆广告，手机动一下就乱跳app，</p><p>跑个步还不忘给我打广告，从头打到尾，真牛…</p><p>傻*软件，吃像太难看！</p><p><img src="/img/hack-college-sport/full-ads.jpeg"></p><p>跑个步还要打卡点位，真的恶心，但是，跑步是肯定不会跑的啦～</p><span id="more"></span><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><p>对 APP 的网络请求进行一番抓包，整个流程比较简单：</p><ol><li>手机点击开始体育锻炼跑，APP 发送一个请求</li><li>服务器返回当前跑步的 RunPageID 和需要经过的点位信息</li><li>开跑，记得要满足跑步要求（2公里 + 3个点）</li><li>完成跑步之后，将途径的一个个采样点进行处理，一并发给服务器，完成跑步记录上报保存。</li></ol><h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><ul><li>所有请求均以 POST 方式发送</li><li>所有请求的 body 中的均含有 sign 用于校验，使用的是 MD5 生成哈希值</li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>在每一个请求的 body 中的数据结构长这样：<code>data=[JSON Data]&amp;sign=[MD5 Hash]</code></p><h2 id="开始跑步"><a href="#开始跑步" class="headerlink" title="开始跑步"></a>开始跑步</h2><p>URL： <code>https://www.sportcampus.cn/api/run/runPage</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&quot;initLocation&quot;</span> : <span class="string">&quot;121.00000,30.00000”,   // 起始位置的经纬度</span></span><br><span class="line"><span class="string">          &quot;</span>type<span class="string">&quot; : &quot;</span><span class="number">1</span><span class="string">&quot;,                    // 不知道什么含义</span></span><br><span class="line"><span class="string">        &quot;</span>userid<span class="string">&quot; : &quot;</span><span class="number">1234567</span><span class="string">&quot;               // 当前用户的 ID</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><p>服务器返回的 JSON 中，<code>ibeacon</code> 和 <code>gpsinfo</code>分别对应 必经点🔴 和 途径点🟢</p><p>ibeacon 中关键信息是 major、minor和uuid，后续保存跑步记录是会用到。</p><p>gpsinfo 就是简单的字典，包含 <code>latitude</code> 和 <code>longitude</code>。</p><h2 id="结束跑步"><a href="#结束跑步" class="headerlink" title="结束跑步"></a>结束跑步</h2><p>URL：<code>https://www.sportcampus.cn/api/run/saveRunV2</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">      <span class="string">&quot;endTime&quot;</span> : <span class="string">&quot;2023-3-13 14:50:39&quot;</span>,</span><br><span class="line">    <span class="string">&quot;startTime&quot;</span> : <span class="string">&quot;2023-3-13 14:38:15&quot;</span>,</span><br><span class="line">       <span class="string">&quot;userid&quot;</span> : <span class="string">&quot;1234567&quot;</span>, </span><br><span class="line">         <span class="string">&quot;goal&quot;</span> : <span class="string">&quot;2.00&quot;</span>,</span><br><span class="line">         <span class="string">&quot;type&quot;</span> : <span class="number">1</span>,</span><br><span class="line">       <span class="string">&quot;frombp&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;runPageId&quot;</span> : pageID,</span><br><span class="line">        <span class="string">&quot;buPin&quot;</span> : <span class="string">&quot;100&quot;</span>,</span><br><span class="line">        <span class="string">&quot;speed&quot;</span> : <span class="string">&quot;6&#x27;13<span class="subst">\&quot;</span>&quot;</span>,</span><br><span class="line">         <span class="string">&quot;real&quot;</span> : <span class="string">&quot;300&quot;</span>,                      <span class="comment">// 距离，单位（米）</span></span><br><span class="line">     <span class="string">&quot;duration&quot;</span> : <span class="string">&quot;658&quot;</span>,                      <span class="comment">// 时常，单位（秒）</span></span><br><span class="line">        <span class="string">&quot;track&quot;</span> : [],                         <span class="comment">// 跑步过程中 GPS 采样点</span></span><br><span class="line">        <span class="string">&quot;bNode&quot;</span> : bNode,                      <span class="comment">// 必经点数据🔴</span></span><br><span class="line">        <span class="string">&quot;tNode&quot;</span> : tNode,                      <span class="comment">// 途径点数据🟢</span></span><br><span class="line">     <span class="string">&quot;totalNum&quot;</span> : <span class="string">&quot;1024&quot;</span>,                     <span class="comment">// 步数</span></span><br><span class="line">        <span class="string">&quot;trend&quot;</span> : [[<span class="string">&quot;x&quot;</span> : <span class="string">&quot;0&quot;</span>, <span class="string">&quot;y&quot;</span> : <span class="string">&quot;0&quot;</span>]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里只要给速度生成一个随机数，其他基本都能算出来。</p><p>途径点、必经点打卡实际上就是 bNode 和 tNode，把“想经过的”点给进去就好啦。</p><p>bNode 是一个字典数组，字典的结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     <span class="string">&quot;major&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;minor&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;uuid&quot;</span>  : <span class="type">UUID</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>tNode 相对简单，也是一个字典数组，结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">&quot;longitude&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;latitude&quot;</span> : <span class="type">String</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>track 是间隔一段时间的 GPS 采样点，也是字典数组，结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">        <span class="string">&quot;speed&quot;</span> : <span class="type">String</span>,   <span class="comment">// 应该是记录采样时的速度，具体单位不清楚，一般跑步在 2.0 - 3.0 左右</span></span><br><span class="line">    <span class="string">&quot;longitude&quot;</span> : <span class="type">String</span>,</span><br><span class="line">     <span class="string">&quot;latitude&quot;</span> : <span class="type">String</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Sign-的获取"><a href="#Sign-的获取" class="headerlink" title="Sign 的获取"></a>Sign 的获取</h1><p>在 GitHub 上找到了 Python 的版本，直接拿到了 key，</p><p>借助 <a href="https://github.com/LiYanan2004/ChatBot">ChatBot</a> 得到了 Swift 版本的 MD5 哈希生成函数，</p><p>把 data 构建好之后，转为 String 传进去就好啦。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoKit</span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getMD5Code</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> key <span class="operator">=</span> <span class="string">&quot;lpKK*TJE8WaIg%93O0pfn0#xS0i3xE$z&quot;</span></span><br><span class="line">    <span class="keyword">let</span> message <span class="operator">=</span> key <span class="operator">+</span> <span class="string">&quot;data&quot;</span> <span class="operator">+</span> s</span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Data</span>(message.utf8)</span><br><span class="line">    <span class="keyword">var</span> hasher <span class="operator">=</span> <span class="type">Insecure</span>.<span class="type">MD5</span>()</span><br><span class="line">    hasher.update(data: data)</span><br><span class="line">    <span class="keyword">return</span> hasher.finalize().map &#123; <span class="type">String</span>(format: <span class="string">&quot;%02hhx&quot;</span>, <span class="variable">$0</span>) &#125;.joined()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何规划路径"><a href="#如何规划路径" class="headerlink" title="如何规划路径"></a>如何规划路径</h1><p>答：得到必经点和途径点后，手动规划。</p><p>用 SwiftUI + MapKit 做了一个 UI，在地图上标注出关键点，</p><p>接下来就是鼠标点点点！</p><p>相邻的两个点中间会补齐来实现 “GPS 间隔采样”，</p><p>当然，跑步一定不会是笔笔直的，也适当的对每一个中间点做了横纵向的随机偏移。</p><p>仍需注意的是：在过河以及转弯时要小心一些😂</p><p><img src="/img/hack-college-sport/route.png"></p><h1 id="跑步流程"><a href="#跑步流程" class="headerlink" title="跑步流程"></a>跑步流程</h1><ol><li>点击跑步按钮</li><li>规划路线</li><li>点击结束跑步</li><li>等待提交…</li></ol><p>舒服！耶！跑步是不可能跑步的啦～</p><p><img src="/img/hack-college-sport/submit.png"></p><p><em>项目不开源，涉及多方利益与合作，仅在我自己电脑上运行使用。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知，高校体育就是一坨…&lt;/p&gt;
&lt;p&gt;且不说功能如何，&lt;/p&gt;
&lt;p&gt;你一个给大学生用的“运动”软件，&lt;/p&gt;
&lt;p&gt;开屏一大堆广告，手机动一下就乱跳app，&lt;/p&gt;
&lt;p&gt;跑个步还不忘给我打广告，从头打到尾，真牛…&lt;/p&gt;
&lt;p&gt;傻*软件，吃像太难看！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/hack-college-sport/full-ads.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;跑个步还要打卡点位，真的恶心，但是，跑步是肯定不会跑的啦～&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="hack" scheme="https://liyanan2004.github.io/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>Selection Range in SwiftUI</title>
    <link href="https://liyanan2004.github.io/swiftui-selection-range/"/>
    <id>https://liyanan2004.github.io/swiftui-selection-range/</id>
    <published>2023-02-12T11:33:00.000Z</published>
    <updated>2023-03-01T10:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 SwiftUI 中，没有提供默认的 modifier 来监听 <code>TextView</code> 的 <code>selectionRange</code>，</p><p>这对于文本编辑类 app 来说是很致命的，因为无法控制光标的位置，</p><p>但是可以从其他的文章中找到一些思路：</p><ul><li><a href="https://swiftui-lab.com/a-powerful-combo/">The Power of the Hosting+Representable Combo</a></li><li><a href="https://github.com/siteline/SwiftUI-Introspect">siteline&#x2F;SwiftUI-Introspect</a></li></ul><p>寻找 NSView &#x2F; UIView 的方法来源于：<a href="https://github.com/siteline/SwiftUI-Introspect">siteline&#x2F;SwiftUI-Introspect</a></p><p>本文来介绍一种解决方案，可以实现出以下的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Example</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectionRange <span class="operator">=</span> <span class="type">NSRange</span>()</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> text <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TextEditor</span>(text: <span class="variable">$text</span>)</span><br><span class="line">            .selectionRange(<span class="variable">$selectionRange</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先从 SwiftUI 的底层入手，</p><p>SwiftUI 在构建 View 时会使用到 NSView(Controller) &#x2F; UIVIew(Controller)，</p><p>在他们的上层还会包一层 <code>ViewHost</code>，</p><p>类似这样：</p><p><img src="/img/swiftui-selection-range/view-hierachy.jpeg" alt="macOS View Hierachy"></p><p>只要我们顺着 ViewHost 找到了对应的 NSView(Controller) &#x2F; UIVIew(Controller)，</p><p>就能实现对控件的自定义更改。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="STEP-1-寻找-NSTextView-x2F-UITextView"><a href="#STEP-1-寻找-NSTextView-x2F-UITextView" class="headerlink" title="STEP 1: 寻找 NSTextView &#x2F; UITextView"></a>STEP 1: 寻找 <code>NSTextView</code> &#x2F; <code>UITextView</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">class</span> <span class="title class_">_TextViewFinder</span>: <span class="title class_">PlatformView</span> &#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: .zero)</span><br><span class="line">        isHidden <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">hitTest</span>(<span class="keyword">_</span> <span class="params">point</span>: <span class="type">NSPoint</span>) -&gt; <span class="type">PlatformView</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@available</span>(<span class="operator">*</span>, unavailable)</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">findTextView</span>(<span class="params">view</span>: <span class="type">PlatformView</span>?) -&gt; <span class="type">TextView</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> superview <span class="operator">=</span> view</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> s <span class="operator">=</span> superview &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="type">NSStringFromClass</span>(<span class="built_in">type</span>(of: s)).contains(<span class="string">&quot;ViewHost&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> viewHost <span class="operator">=</span> s</span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> superview <span class="operator">=</span> viewHost.superview,</span><br><span class="line">                    <span class="keyword">let</span> entryIndex <span class="operator">=</span> superview.subviews.firstIndex(of: viewHost),</span><br><span class="line">                    entryIndex <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> subview <span class="keyword">in</span> superview.subviews[<span class="number">0</span><span class="operator">..&lt;</span>entryIndex].reversed() &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> typed <span class="operator">=</span> findChild(in: subview) &#123;</span><br><span class="line">                        <span class="keyword">return</span> typed</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            superview <span class="operator">=</span> s.superview</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">findChild</span>(<span class="params">in</span> <span class="params">root</span>: <span class="type">PlatformView</span>) -&gt; <span class="type">TextView</span>? &#123;</span><br><span class="line">        <span class="keyword">for</span> subview <span class="keyword">in</span> root.subviews &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> typed <span class="operator">=</span> subview <span class="keyword">as?</span> <span class="type">TextView</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> typed</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> typed <span class="operator">=</span> findChild(in: subview) &#123;</span><br><span class="line">                <span class="keyword">return</span> typed</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">TextView</span> <span class="operator">=</span> <span class="type">NSTextView</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">PlatformView</span> <span class="operator">=</span> <span class="type">NSView</span></span><br><span class="line"><span class="keyword">#elseif</span> <span class="operator">!</span>os(watchOS)</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">TextView</span> <span class="operator">=</span> <span class="type">UITextView</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">PlatformView</span> <span class="operator">=</span> <span class="type">NSView</span></span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure><h3 id="STEP-2-把-PlatformView-包装成-SwiftUI-View"><a href="#STEP-2-把-PlatformView-包装成-SwiftUI-View" class="headerlink" title="STEP 2: 把 PlatformView 包装成 SwiftUI View"></a>STEP 2: 把 <code>PlatformView</code> 包装成 <code>SwiftUI View</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">struct</span> <span class="title class_">_TextViewFinderWrapper</span>: <span class="title class_">ViewRepresentable</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> textView: <span class="type">TextView</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">typealias</span> _Finder <span class="operator">=</span> _TextViewFinder</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; _Finder &#123;</span><br><span class="line">        _TextViewFinder()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateView</span>(<span class="keyword">_</span> <span class="params">finder</span>: _Finder, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> textView <span class="operator">=</span> finder.findTextView(view: finder.superview) &#123;</span><br><span class="line">                <span class="keyword">self</span>.textView <span class="operator">=</span> textView</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> os(macOS)</span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">ViewRepresentable</span>: <span class="title class_">NSViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">NSViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">NSViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateView</span>(<span class="keyword">_</span> <span class="params">nsView</span>: <span class="type">NSViewType</span>, <span class="params">context</span>: <span class="type">Context</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">ViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeNSView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">NSViewType</span> &#123;</span><br><span class="line">        makeView(context: context)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateNSView</span>(<span class="keyword">_</span> <span class="params">nsView</span>: <span class="type">NSViewType</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        updateView(nsView, context: context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">ViewRepresentable</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">UIViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">UIViewType</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UIViewType</span>, <span class="params">context</span>: <span class="type">Context</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">ViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">UIViewType</span> &#123;</span><br><span class="line">        makeView(context: context)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UIViewType</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        updateView(uiView, context: context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure><p>利用 <code>finder.findTextView </code> 寻找 <code>TextView</code> 并且将其保存到 <code>textView</code>，</p><p>使用 <code>@Binding</code> 可以使其生命周期与视图保持同并与上层视图同步信息。</p><h3 id="STEP-3-用-TextViewFinderWrapper-来寻找对应的-NSView-x2F-UIView"><a href="#STEP-3-用-TextViewFinderWrapper-来寻找对应的-NSView-x2F-UIView" class="headerlink" title="STEP 3: 用 _TextViewFinderWrapper 来寻找对应的 NSView &#x2F; UIView"></a>STEP 3: 用 <code>_TextViewFinderWrapper</code> 来寻找对应的 NSView &#x2F; UIView</h3><p><code>overlay</code> 相当于 AppKit 和 UIKit 中的 <code>addSubview</code>，</p><p>使用 <code>superview</code> 即可找到上层的 ViewRepresentation 也就是 SwiftUI View，</p><p>可以写一个 <code>ViewModifier</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">struct</span> <span class="title class_">_SelectionRangeModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .overlay(_TextViewFinderWrapper(textView: <span class="variable">$textView</span>).frame(width: <span class="number">0</span>, height: <span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STEP-4-实现-selectionRange-的双向绑定"><a href="#STEP-4-实现-selectionRange-的双向绑定" class="headerlink" title="STEP 4: 实现 selectionRange 的双向绑定"></a>STEP 4: 实现 <code>selectionRange</code> 的双向绑定</h3><p>向上绑定：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.onReceive(</span><br><span class="line">    <span class="type">NotificationCenter</span>.default.publisher(for: <span class="type">TextView</span>.didChangeSelectionNotification, object: textView)</span><br><span class="line">) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">   <span class="comment">// Selection Range did change.</span></span><br><span class="line">   <span class="comment">// Update selection range using `textView` instance.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向下绑定：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.task(id: range) &#123;</span><br><span class="line">   <span class="comment">// Selection range changed by SwiftUI State.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装起来大致是这样的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">struct</span> <span class="title class_">_SelectionRangeModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> range: <span class="type">NSRange</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> textView: <span class="type">TextView</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .overlay(_TextViewFinderWrapper(textView: <span class="variable">$textView</span>).frame(width: <span class="number">0</span>, height: <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">#if</span> os(macOS)</span><br><span class="line">            .onReceive(</span><br><span class="line">                <span class="type">NotificationCenter</span>.default.publisher(for: <span class="type">TextView</span>.didChangeSelectionNotification, object: textView)</span><br><span class="line">            ) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> textView <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                range <span class="operator">=</span> textView.selectedRange()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">#endif</span></span><br><span class="line">            .task(id: range) &#123;</span><br><span class="line">                <span class="keyword">let</span> newRange <span class="operator">=</span> range</span><br><span class="line">                <span class="keyword">#if</span> os(macOS)</span><br><span class="line">                textView<span class="operator">?</span>.setSelectedRange(newRange)</span><br><span class="line">                <span class="keyword">#else</span></span><br><span class="line">                textView<span class="operator">?</span>.selectedRange <span class="operator">=</span> newRange</span><br><span class="line">                <span class="keyword">#endif</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STEP-5-扩展一下-View"><a href="#STEP-5-扩展一下-View" class="headerlink" title="STEP 5: 扩展一下 View"></a>STEP 5: 扩展一下 View</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">watchOS</span>, unavailable)</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">13.0</span>, <span class="keyword">macOS</span> <span class="number">10.15</span>, <span class="keyword">tvOS</span> <span class="number">13.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">selectionRange</span>(<span class="keyword">_</span> <span class="params">range</span>: <span class="type">Binding</span>&lt;<span class="type">NSRange</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        modifier(_SelectionRangeModifier(range: range))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，搞定！</p><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><ul><li><p>本方法属于 Hack，很有可能在未来的 SwiftUI 大版本中失效（如果 SwiftUI 修改了 View Hierarchy）</p></li><li><p>文本框还是可能会出现闪烁的问题，我已经尽可能地规避了，但是可能还是会出现…目前无解。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 SwiftUI 中，没有提供默认的 modifier 来监听 &lt;code&gt;TextView&lt;/code&gt; 的 &lt;code&gt;selectionRange&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;这对于文本编辑类 app 来说是很致命的，因为无法控制光标的位置，&lt;/p&gt;
&lt;p&gt;但是可以从其他的文章中找到一些思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://swiftui-lab.com/a-powerful-combo/&quot;&gt;The Power of the Hosting+Representable Combo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/siteline/SwiftUI-Introspect&quot;&gt;siteline&amp;#x2F;SwiftUI-Introspect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寻找 NSView &amp;#x2F; UIView 的方法来源于：&lt;a href=&quot;https://github.com/siteline/SwiftUI-Introspect&quot;&gt;siteline&amp;#x2F;SwiftUI-Introspect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文来介绍一种解决方案，可以实现出以下的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SwiftUI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Example&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; selectionRange &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSRange&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body: &lt;span class=&quot;keyword&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;TextEditor&lt;/span&gt;(text: &lt;span class=&quot;variable&quot;&gt;$text&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .selectionRange(&lt;span class=&quot;variable&quot;&gt;$selectionRange&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="swift" scheme="https://liyanan2004.github.io/tags/swift/"/>
    
    <category term="swiftui" scheme="https://liyanan2004.github.io/tags/swiftui/"/>
    
  </entry>
  
  <entry>
    <title>MarkdownView 从 0 到 1 —— 回顾整条时间线</title>
    <link href="https://liyanan2004.github.io/the-road-of-markdown-view/"/>
    <id>https://liyanan2004.github.io/the-road-of-markdown-view/</id>
    <published>2023-02-02T11:45:04.000Z</published>
    <updated>2023-02-19T05:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>熟悉我的朋友应该知道，我一直在开发一个框架，</p><p>用于在 SwiftUI 中以原生的方式来渲染 Markdown 文本。</p><p>P.S. 这篇文章也是在我做的编辑器中完成的。</p><p>早晨发布了 <a href="https://github.com/LiYanan2004/MarkdownView/releases">MarkdownView</a> 的 <code>1.0.0-rc</code>，也就是正式版的候选版本，</p><p>写这篇文章主要是想回顾和总结一路过来的技术点和一些解决方案。</p><span id="more"></span><h2 id="为什么要做这个项目"><a href="#为什么要做这个项目" class="headerlink" title="为什么要做这个项目"></a>为什么要做这个项目</h2><h3 id="无奈和机遇"><a href="#无奈和机遇" class="headerlink" title="无奈和机遇"></a>无奈和机遇</h3><p>其实，很早之前，我就想做一款笔记应用，</p><p>写字功能用 PencilKit 能实现，但是总不能只支持手写吧…</p><p>但是找了一圈开源社区都找不到很好的用于渲染 Markdown 文本的组件，</p><p>恰好在我高考完之后，发现苹果开源了自己的 <code>swift-markdown</code> 用于处理 Markdown 文本的解析。</p><h3 id="Typora-结束公测，开始收费"><a href="#Typora-结束公测，开始收费" class="headerlink" title="Typora 结束公测，开始收费"></a>Typora 结束公测，开始收费</h3><p>其实是有替代的 <code>Notion</code>，但是 Web 套壳的 app 多少还有点不喜欢，而且访问也不是很稳定。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>先来说说 <code>swift-markdown</code> 解析好的数据是如何变成最终的 <code>View</code> 的：</p><ol><li>原始文本由 <code>swift-markdown</code> 解析生成文档树</li><li>对应每一个节点，返回一个原生的 <code>SwiftUI View</code></li><li>用合适的方法将所有节点的 <code>View</code> 合并在一起打包</li><li>由 SwiftUI 计算和显示</li></ol><p>在第二步中返回的每一个子 <code>View</code> 都需要是相同类型的，不过好在 SwiftUI 给我们提供了 <code>AnyView</code> 来擦除类型。</p><p><img src="/img/the-road-of-markdown-view/markdown-view-workflow.jpeg" alt="原理图示"></p><h2 id="布局问题"><a href="#布局问题" class="headerlink" title="布局问题"></a>布局问题</h2><p>由于文档树中的每一个节点都是一个 <code>AnyView</code>，面临两个问题：</p><ol><li>如何控制每一个视图的大小</li><li>如何动态的使用 <code>HStack</code> 和 <code>VStack</code> 来放置横竖两个方向</li></ol><p>幸运的是，在 WWDC 22 上，我们可以自定义一个 <code>Layout</code>，</p><p>但不幸的是，<code>Layout Protocol</code> 只支持最新的系统，无法向后兼容。</p><h3 id="拆分文本，再结合"><a href="#拆分文本，再结合" class="headerlink" title="拆分文本，再结合"></a>拆分文本，再结合</h3><p>除了图片之外的内容，归根结底都是文本，</p><p>因此将文本拆分成尽可能小的部分（一个单词或者一个词组）</p><p>配合自定义的灵活布局（<code>FlowLayout</code>）来实现布局。</p><p>但是这样的方案属于在运行时拆分（文本）又合并（视图），非常消耗系统资源。</p><p>之前的 <a href="/markdownview-performance-optimization/" title="记录下 MarkdownView 的性能优化">记录下 MarkdownView 的性能优化</a> 中提到的解决方案只能解决启动时的卡顿和连续输入时的卡顿，</p><p>而对于内容的加载速度没有帮助，同时多个异步操作也需要等待 CPU 空闲时才能被派发上去。</p><p>最关键的是，按照这样的模式继续下去，文本始终无法选择和复制。</p><hr><h3 id="将视图暂存，合并相同的类型"><a href="#将视图暂存，合并相同的类型" class="headerlink" title="将视图暂存，合并相同的类型"></a>将视图暂存，合并相同的类型</h3><p>主要想要解决的问题是 <em>加载时间长</em> 和 <em>无法复制</em> 这两个问题。</p><p>加载时间长主要是因为频繁地文本拆分和大量的子视图的位置大小计算导致的，</p><p>解决方案是使用 SwiftUI 中的 <code>Text</code> 做拼接，同时解决了无法复制的问题，顺便可以向后兼容了一个大版本。</p><p>这一块的灵感是受到 <a href="https://www.fatbobman.com/posts/mixing_text_and_graphics_with_Text_in_SwiftUI">在 SwiftUI 中用 Text 实现图文混排</a> 的启发。</p><p>创建了一个 <code>ViewContent</code> 用来暂存由节点生成的视图：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ViewContent</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text: <span class="type">Text</span></span><br><span class="line">    <span class="keyword">var</span> view: <span class="type">AnyView</span></span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">ContentType</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">ContentType</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> text, view</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入多个 <code>ViewContent</code> 的时候，会检查并合并相邻的、同类型的 <code>ViewContent</code>，</p><p>后面再用 <code>VStack</code> 把一个个的 paragraph 串起来即可得到完整的视图，</p><p>测试了下，<em>同一文档的加载速度提升了约 5x</em></p><h2 id="图片和自定义块的支持"><a href="#图片和自定义块的支持" class="headerlink" title="图片和自定义块的支持"></a>图片和自定义块的支持</h2><p>通过 <code>ImageDisplayable</code> 和 <code>BlockDirectiveDisplayable</code>，允许开发者自己定义如何显示相关内容，</p><p><strong>学习了<a href="../tags/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">类型擦除</a>的实现方案</strong>。</p><h2 id="AdaptiveGrid"><a href="#AdaptiveGrid" class="headerlink" title="AdaptiveGrid"></a>AdaptiveGrid</h2><p>由于向后兼容了一个大版本导致无法直接使用新的 Grid 组件，</p><p>因此，还需对老版本系统提供一个类似的视图，</p><p>于是写了一个 <code>AdaptiveGrid</code>，其表现行为与 <code>Grid</code> 几乎一致。</p><p>后面我应该会再写一篇博客来说说其背后的实现原理。</p><p><img src="/img/the-road-of-markdown-view/AdaptiveGrid-tweet.jpeg"></p><p><strong>学习了 <code>@resultBuilder</code> 的构建</strong>，在这里再次感谢肘子哥的两篇博客：</p><ol><li><a href="https://www.fatbobman.com/posts/viewBuilder1/">ViewBuilder 研究（上）—— 掌握 Result builders</a></li><li><a href="https://www.fatbobman.com/posts/viewBuilder2/">ViewBuilder 研究（下） —— 从模仿中学习</a></li></ol><h2 id="SVG-增强"><a href="#SVG-增强" class="headerlink" title="SVG 增强"></a>SVG 增强</h2><p>一直以来，SVG 的渲染都是由 <code>SVGKit</code> 来处理的，</p><p>但是问题是，有编译警告、 Package 过于臃肿 且 部分SVG无法正确渲染。</p><p>最近改用了原生的 <code>WKWebView</code> 来渲染 SVG（相当于一个网页）</p><p><img src="/img/the-road-of-markdown-view/SVG-tweet.jpeg"></p><p><strong>学习了如何使用 JS 来获取网页元素的大小</strong>，以此来作为最终整个 SVG 的大小，</p><p>并且能够根据可用宽度来自动判断是否启用滚动条等等…</p><p>具体的实现可以在代码中找到，我不在做过多的赘述。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>道路不是一帆风顺的，总要在跌跌撞撞中成长，</p><p>但庆幸的是，这个自主项目，<em>我做出了自己满意的样子</em>，耶～</p><p>项目地址：<a href="https://github.com/LiYanan2004/MarkdownView">Github</a> OR <a href="https://swiftpackageindex.com/LiYanan2004/MarkdownView">Swift Package Index</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;熟悉我的朋友应该知道，我一直在开发一个框架，&lt;/p&gt;
&lt;p&gt;用于在 SwiftUI 中以原生的方式来渲染 Markdown 文本。&lt;/p&gt;
&lt;p&gt;P.S. 这篇文章也是在我做的编辑器中完成的。&lt;/p&gt;
&lt;p&gt;早晨发布了 &lt;a href=&quot;https://github.com/LiYanan2004/MarkdownView/releases&quot;&gt;MarkdownView&lt;/a&gt; 的 &lt;code&gt;1.0.0-rc&lt;/code&gt;，也就是正式版的候选版本，&lt;/p&gt;
&lt;p&gt;写这篇文章主要是想回顾和总结一路过来的技术点和一些解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="MarkdownView" scheme="https://liyanan2004.github.io/tags/MarkdownView/"/>
    
    <category term="swift" scheme="https://liyanan2004.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 上更安全地使用 EasyConnect</title>
    <link href="https://liyanan2004.github.io/use-easy-connect-safely-on-your-mac/"/>
    <id>https://liyanan2004.github.io/use-easy-connect-safely-on-your-mac/</id>
    <published>2023-01-17T10:16:52.000Z</published>
    <updated>2023-01-17T12:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>起因还是偶然在 B 站刷到这么一个视频：</p><iframe src="//player.bilibili.com/player.html?aid=435357348&bvid=BV163411Z7BD&cid=967016106&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>哟，原来是个流氓软件啊，草！！！！！！</p><span id="more"></span><p>安装它，主要是因为学校内网要用 VPN 才能登陆，</p><p>起初安装完我就发现有后台权限的开关，</p><p>我也尝试关掉了，但是没法连接了（表现为一直在初始化）</p><p><img src="/img/use-easy-connect-safely-on-your-mac/initializing.jpeg"></p><h2 id="为什么说他流氓"><a href="#为什么说他流氓" class="headerlink" title="为什么说他流氓"></a>为什么说他流氓</h2><h3 id="后台持续活动"><a href="#后台持续活动" class="headerlink" title="后台持续活动"></a>后台持续活动</h3><p>打开“活动监视器”（Windows 上是 “任务管理器”），</p><p>就能找到名为 <code>EasyMonitor</code> 和 <code>ECAgent</code> 的两个进程，关键是以 <code>root</code> 权限运行，</p><p><img src="/img/use-easy-connect-safely-on-your-mac/easy-monitor.jpeg"><br><img src="/img/use-easy-connect-safely-on-your-mac/ecagent.jpeg"></p><p>意味着，他想干嘛就干嘛，不需要我任何授权，我也浑然不知。</p><p>观察了一会儿，CPU 一直都有 0.3 - 0.5 的占用，</p><p>意味着，有少量代码在持续运行，在干嘛，不知道。</p><p>尝试关掉它？呵呵，太小看它了。<strong>关了又自动启动了。</strong></p><h3 id="安装了系统根证书"><a href="#安装了系统根证书" class="headerlink" title="安装了系统根证书"></a>安装了系统根证书</h3><p>打开 <code>钥匙串访问 - 系统钥匙串 - 系统 - 证书</code>，搜索 <code>Sangfor</code>，</p><p>就能看到一个 <code>自己颁给自己</code> 的一个证书，到 2117 年过期…</p><p><img src="/img/use-easy-connect-safely-on-your-mac/self-given-cert.png"></p><p>理论上这样可以劫持 HTTPS 活动。</p><blockquote><p>引用 <a href="https://soulike.tech/article/64">在 macOS 上安全使用 EasyConnect</a> 的说法：</p><p>以 root 权限常驻进程，意味着这些进程可以读取和写入任何东西；</p><p>安装根证书，意味着可以直接进行中间人攻击。因此我们需要解决这些问题。</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>具体方法可以参考 <a href="https://soulike.tech/article/64">在 macOS 上安全使用 EasyConnect</a></p><h3 id="关闭自启动-和-后台驻留"><a href="#关闭自启动-和-后台驻留" class="headerlink" title="关闭自启动 和 后台驻留"></a>关闭自启动 和 后台驻留</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">rm</span> -r -f /Library/LaunchDaemons/com.sangfor.EasyMonitor.plist</span><br><span class="line"><span class="built_in">rm</span> -r -f /Library/LaunchAgents/com.sangfor.ECAgentProxy.plist</span><br></pre></td></tr></table></figure><blockquote><p>以上代码适用于 Mac</p></blockquote><h3 id="重启电脑"><a href="#重启电脑" class="headerlink" title="重启电脑"></a>重启电脑</h3><p>一定要重启‼️因为现在它还有后台驻留的权限‼️</p><h3 id="删除根证书"><a href="#删除根证书" class="headerlink" title="删除根证书"></a>删除根证书</h3><p>在 <code>钥匙串访问 - 系统钥匙串 - 系统 - 证书</code> 下搜索 <code>Sangfor</code>，删除对应的所有证书。</p><hr><p>到此，<strong>开机自启动</strong> 和 <strong>后台驻留</strong> 的问题解决了，但是 EasyConnect 也彻底用不了了，</p><p>可能会出现 “一直初始化中…” 的问题。</p><h3 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h3><p>上面那个参考链接里面给出了具体脚本，有打开和关闭两个，</p><p>我将他们统一了，<a href="/assets/easyconnect">点这里下载</a></p><p>这是一个没有扩展名的文件，用文本编辑器打开就能看到 bash 命令。</p><h4 id="为脚本添加运行权限"><a href="#为脚本添加运行权限" class="headerlink" title="为脚本添加运行权限"></a>为脚本添加运行权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x &lt;easyconnect 文件路径&gt;</span><br></pre></td></tr></table></figure><blockquote><p>图标变成一个黑色的框框，里面写着 <code>exec</code> 就对了。</p></blockquote><h4 id="导入我的脚本"><a href="#导入我的脚本" class="headerlink" title="导入我的脚本"></a>导入我的脚本</h4><p>把 <code>easyconnect</code> 放到 <code>/usr/local/bin</code> 文件夹下。</p><blockquote><p>这个目录可能需要在访达中按 <kbd>Command</kdb> + <kbd>Shift</kdb> + <kbd>G</kdb> 后输入。<br><img src="/img/use-easy-connect-safely-on-your-mac/go-to-bash-path.jpeg"></p></blockquote><h3 id="一切就绪"><a href="#一切就绪" class="headerlink" title="一切就绪"></a>一切就绪</h3><h4 id="安全地启动"><a href="#安全地启动" class="headerlink" title="安全地启动"></a>安全地启动</h4><ul><li>使用 EasyConnect 的时候，只需在终端输入这行命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easyconnnect open</span><br></pre></td></tr></table></figure><article class="message is-danger">                <div class="message-body">            <p>在使用过程中不要关闭终端窗口‼️</p>        </div>    </article><p>虽然但是，</p><p>你可能会发现，<code>EasyMonitor</code> 和 <code>ECAgent</code> 仍然是以 root 权限运行的，</p><p>因此还需要手动关闭他们。</p><h4 id="彻底地关闭"><a href="#彻底地关闭" class="headerlink" title="彻底地关闭"></a>彻底地关闭</h4><ul><li>断开 VPN 后，除了退出 <code>EasyConnect</code> 本身，需要执行这行命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easyconnect <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><p>这样一来，刚才启动的 <code>EasyMonitor</code> 和 <code>ECAgent</code> 就会被关闭，</p><p>由于没有后台驻留的权限，也就不会重新启动了。</p><p>整个方案是<em>按需使用</em>的策略，因为 <code>EasyMonitor</code> 和 <code>ECAgent</code> 是初始化时必要的进程。</p><h4 id="快捷指令"><a href="#快捷指令" class="headerlink" title="快捷指令"></a>快捷指令</h4><p>如果你觉得整个过程比较复杂，</p><p>也可以使用我制作的快捷指令：<a href="https://www.icloud.com/shortcuts/085b7d286bfe4c3b839b1deda8f3756c">Toggle Easy Connect</a> 来让这一切变得自动化。</p><p>快捷指令会自动检测 <code>EasyMonitor</code> 的运行情况来作为 <code>EasyConnect</code> 是否正在运行的标志，</p><p>进而自动选择合适的命令。</p><h3 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h3><ul><li>登陆之后闪退</li></ul><p>重启电脑即可。这是由于某些组建启动了多次后产生了冲突。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因还是偶然在 B 站刷到这么一个视频：&lt;/p&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=435357348&amp;bvid=BV163411Z7BD&amp;cid=967016106&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;哟，原来是个流氓软件啊，草！！！！！！&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://liyanan2004.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="网络安全" scheme="https://liyanan2004.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="macOS" scheme="https://liyanan2004.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>理解函数中的泛型 &amp; 泛型约束 —— 究竟谁才是入口？</title>
    <link href="https://liyanan2004.github.io/generic-type-function-entry-point/"/>
    <id>https://liyanan2004.github.io/generic-type-function-entry-point/</id>
    <published>2023-01-16T14:04:04.000Z</published>
    <updated>2023-01-16T15:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>继续接上篇，做完 <code>AnyMyCollection</code> 之后，</p><p>我又添加了一个扩展来修改 <code>CustomCollection</code> 在特定类型下的行为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">CustomCollection</span> <span class="title class_">where</span> <span class="title class_">Element</span> == <span class="title class_">Int</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>Element</code> 是 <code>Int</code> 时，不管三七二十一，直接返回 <code>[4, 5, 6]</code></p><p>但是，运行是发现了这样的现象：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection <span class="operator">=</span> <span class="type">CustomCollection</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(collection.allValues()) <span class="comment">// [4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">any</span> <span class="operator">=</span> <span class="type">AnyMyCollection</span>(collection)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">any</span>.allValues()) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>同一个东西，擦除类型之后就不受 <code>Element == Int</code> 约束了嘛？<del>不是</del></p><p>写了一个最小可复现问题的代码，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection <span class="operator">=</span> <span class="type">CustomCollection</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">genericFuntion</span>&lt;<span class="type">C</span>: <span class="type">MyCollection</span>&gt;(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">C</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(base.allValues()) <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">genericFuntion(collection)</span><br></pre></td></tr></table></figure><p>重新来看这个函数，</p><p><code>base</code> 是一个符合 <code>MyCollection</code> 协议的类型，</p><p>从程序的角度看，调用函数的时候，它会去找一个入口，</p><p>在这里，入口就应该是让 <code>CustomCollection</code> 符合协议的那个 <code>allValues()</code>，</p><p>而 <code>Element == Int</code> 约束则可以理解为，当符合条件时，对 <code>allValues()</code> 进行重写，</p><p>这里真正让 <code>CustomCollection</code> 符合 <code>MyCollection</code> 的是不受约束的那个扩展中的方法。</p><blockquote><p>仔细一想，貌似实际操作中貌似不会这样“重写”函数，</p><p>而是会对一些特定的类型增加一个特殊的函数，</p><p>比如：对于类型是 <code>Int</code> 的 <code>Array</code> 增加求平均值的函数等等。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;继续接上篇，做完 &lt;code&gt;AnyMyCollection&lt;/code&gt; 之后，&lt;/p&gt;
&lt;p&gt;我又添加了一个扩展来修改 &lt;code&gt;CustomCollection&lt;/code&gt; 在特定类型下的行为：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CustomCollection&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Element&lt;/span&gt; == &lt;span class=&quot;title class_&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;allValues&lt;/span&gt;() -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Element&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当 &lt;code&gt;Element&lt;/code&gt; 是 &lt;code&gt;Int&lt;/code&gt; 时，不管三七二十一，直接返回 &lt;code&gt;[4, 5, 6]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是，运行是发现了这样的现象：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; collection &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CustomCollection&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(collection.allValues()) &lt;span class=&quot;comment&quot;&gt;// [4, 5, 6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;AnyMyCollection&lt;/span&gt;(collection)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;any&lt;/span&gt;.allValues()) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="泛型" scheme="https://liyanan2004.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的类型擦除（下）—— 从模仿中学习</title>
    <link href="https://liyanan2004.github.io/type-erasure-in-swift-2/"/>
    <id>https://liyanan2004.github.io/type-erasure-in-swift-2/</id>
    <published>2023-01-16T03:57:30.000Z</published>
    <updated>2023-01-16T07:31:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇博客中，我们初步了解了为什么需要一个 Type Eraser ，</p><p>也分享了一个简单实现 Type Erasure 的方案。</p><p>为了更加深入了解类型擦除，我们还是得来看看 Swift 自带的一些 Type Eraser 是如何实现的。</p><p>目标是：理解一下其基本思路，并且仿制一个出来。</p><span id="more"></span><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>为了方便理解，我们聚焦于一个 Type Eraser：<code>AnyIterator</code></p><p>为什么是它呢？</p><p>因为它出现在<a href="https://github.com/apple/swift/blob/main/stdlib/public/core/ExistentialCollection.swift">源码</a>的最上面😂，而且下面的 <code>AnySequence</code> 和 <code>AnyCollection</code> 都得回到 <code>AnyIterator</code>。</p><p>先看源码（我这里去除了注释和一些不太重要的代码，方便大家阅读）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@inline</span>(never)</span><br><span class="line"><span class="keyword">@usableFromInline</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">func</span> <span class="title function_">_abstract</span>(</span><br><span class="line">  <span class="params">file</span>: <span class="type">StaticString</span> <span class="operator">=</span> <span class="keyword">#file</span>,</span><br><span class="line">  <span class="params">line</span>: <span class="type">UInt</span> <span class="operator">=</span> <span class="keyword">#line</span></span><br><span class="line">) -&gt; <span class="type">Never</span> &#123;</span><br><span class="line">  <span class="built_in">fatalError</span>(<span class="string">&quot;Method must be overridden&quot;</span>, file: file, line: line)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">AnyIterator</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">@usableFromInline</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> _box: _AnyIteratorBoxBase<span class="operator">&lt;</span><span class="type">Element</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">I</span>: <span class="type">IteratorProtocol</span>&gt;(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">I</span>) <span class="keyword">where</span> <span class="type">I</span>.<span class="type">Element</span> <span class="operator">==</span> <span class="type">Element</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>._box <span class="operator">=</span> _IteratorBox(base)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyIterator</span>: <span class="title class_">IteratorProtocol</span> &#123;</span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">next</span>() -&gt; <span class="type">Element</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> _box.next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@_fixed_layout</span></span><br><span class="line"><span class="keyword">@usableFromInline</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">_AnyIteratorBoxBase</span>&lt;<span class="title class_">Element</span>&gt;: <span class="title class_">IteratorProtocol</span> &#123;</span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">deinit</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">func</span> <span class="title function_">next</span>() -&gt; <span class="type">Element</span>? &#123; _abstract() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@_fixed_layout</span></span><br><span class="line"><span class="keyword">@usableFromInline</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_IteratorBox</span>&lt;<span class="title class_">Base</span>: <span class="title class_">IteratorProtocol</span>&gt;</span><br><span class="line">  : <span class="title class_">_AnyIteratorBoxBase</span>&lt;<span class="title class_">Base</span>.<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">Base</span>) &#123; <span class="keyword">self</span>._base <span class="operator">=</span> base &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@inlinable</span> <span class="comment">// FIXME(sil-serialize-all)</span></span><br><span class="line">  <span class="keyword">deinit</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@inlinable</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">next</span>() -&gt; <span class="type">Base</span>.<span class="type">Element</span>? &#123; <span class="keyword">return</span> _base.next() &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@usableFromInline</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理一下，一共用到两个类，<code>_AnyIteratorBoxBase</code>（基类） 和 <code>_IteratorBox</code>（中转类）</p><p>基类符合协议，并且用一些占位符做好填充（需要在中转类中重写这些方法）</p><p>中转类继承自基类，并从外部接收一个符合协议的实例，用来重写（覆盖）基类中的方法和属性。</p><p>最后，用一个对外的 Type Eraser 再做一次中转。</p><h2 id="仿制过程中的一些坑"><a href="#仿制过程中的一些坑" class="headerlink" title="仿制过程中的一些坑"></a>仿制过程中的一些坑</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: - Protocol and Type Eraser</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyMyCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyMyCollection</span>: <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="operator">…</span></span><br><span class="line"><span class="comment">// MARK: - Custom Types</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Animals</span>: <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Digits</span>: <span class="title class_">MyCollection</span> &#123; <span class="operator">…</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Type Erasure</span></span><br><span class="line"><span class="comment">// ❌ Heterogeneous collection literal could only be inferred to &#x27;[Any]&#x27;; add explicit type annotation if this is intentional</span></span><br><span class="line"><span class="keyword">var</span> collections <span class="operator">=</span> [<span class="type">AnyMyCollection</span>(<span class="type">Animals</span>()), <span class="type">AnyMyCollection</span>(<span class="type">Digits</span>())] </span><br></pre></td></tr></table></figure><p>首先，我注意到的是类型推断的问题，</p><p>可以尝试下 <code>AnyCollection</code>，<code>AnyIterator</code> 这些，发现 <code>collections</code> 中的 Element 变成了 <code>Any</code>，</p><p>也就引出了第一个问题。</p><h3 id="Swift-的特性之一：类型推断"><a href="#Swift-的特性之一：类型推断" class="headerlink" title="Swift 的特性之一：类型推断"></a>Swift 的特性之一：类型推断</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type: AnyIterator&lt;Int&gt;</span></span><br><span class="line"><span class="type">AnyIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].makeIterator())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type: AnyIterator&lt;String&gt;</span></span><br><span class="line"><span class="type">AnyIterator</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].makeIterator())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type: [AnyIterator&lt;Any&gt;]</span></span><br><span class="line">[<span class="type">AnyIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].makeIterator()), <span class="type">AnyIterator</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].makeIterator())]</span><br></pre></td></tr></table></figure><p>这俩东西的 Element 类型不一致，为什么放在一起还能编译并且 Element 变成 <code>Any</code> 了呢？</p><p>实际上，是 Swift 的类型推断在干活</p><p>而如果换一种写法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intIterator <span class="operator">=</span> <span class="type">AnyIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].makeIterator())</span><br><span class="line"><span class="keyword">let</span> stringIterator <span class="operator">=</span> <span class="type">AnyIterator</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].makeIterator())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> together <span class="operator">=</span> [intIterator, stringIterator] <span class="comment">// ❌ Heterogeneous collection literal could only be inferred to &#x27;[Any]&#x27;; add explicit type annotation if this is intentional</span></span><br></pre></td></tr></table></figure><p>就会报错，原因就在于这两个东西的类型不一致，不能放在一个 Array 里，</p><blockquote><p>提前声明的话，编译器会固化类型，是什么就是什么</p><p><code>AnyIterator&lt;String&gt;</code> 和 <code>AnyIterator&lt;Int&gt;</code> 是两种不同的类型，它们的 Element 不同</p></blockquote><p>更加详细的可以看我问的这个帖子：<a href="https://forums.swift.org/t/anycollection-with-different-generic-types/62558">AnyCollection with different generic types</a> </p><hr><p>对 <code>Array</code> 再做一个扩展，让任何数组都符合协议。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Array</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123; <span class="keyword">self</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrayCollection <span class="operator">=</span> [<span class="type">AnyMyCollection</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])] <span class="comment">// ✅ AnyMyCollection&lt;Any&gt;</span></span><br></pre></td></tr></table></figure><p>这里的两个类型分别是：<code>AnyMyCollection&lt;Int&gt;</code> 和 <code>AnyMyCollection&lt;String&gt;</code></p><p>但是再加上 <code>Digits</code> 却报错了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Heterogeneous collection literal could only be inferred to &#x27;[Any]&#x27;; add explicit type annotation if this is intentional</span></span><br><span class="line"><span class="keyword">let</span> collection <span class="operator">=</span> [<span class="type">AnyMyCollection</span>(<span class="type">Digits</span>()), <span class="type">AnyMyCollection</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])]</span><br></pre></td></tr></table></figure><p>这就是第二个问题。</p><h3 id="编译时推断-和-运行时推断"><a href="#编译时推断-和-运行时推断" class="headerlink" title="编译时推断 和 运行时推断"></a>编译时推断 和 运行时推断</h3><p>分析一下每一个 <code>AnyMyCollection </code> 的类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnyMyCollection&lt;Digits.Element&gt;</span></span><br><span class="line"><span class="type">AnyMyCollection</span>(<span class="type">Digits</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnyMyCollection&lt;Int&gt;</span></span><br><span class="line"><span class="type">AnyMyCollection</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnyMyCollection&lt;String&gt;</span></span><br><span class="line"><span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])</span><br></pre></td></tr></table></figure><p>按照之前说的，应该统一成 <code>AnyMyCollection&lt;Any&gt;</code> 才对，</p><p>但是，仔细观察能够发现，传入 <code>AnyMyCollection</code> 的类型分别是 <code>Digits</code>, <code>Array&lt;Int&gt;</code> 和 <code>Array&lt;String&gt;</code>，</p><p>第一个不带泛型，而其他的均带泛型，</p><p>对于 <code>Array&lt;Element&gt;</code> 来说，编译时是可以确定 Element 的具体类型的,</p><p>且 <code>Array</code> 中的 <code>Element</code> 和 <code>MyCollection</code> 中的 <code>Element</code> 是一致的，</p><p>因此，编译时可以确定出 <code>AnyMyCollection</code> 中的 <code>Element</code>（即 <code>Array</code> 中的 <code>Element</code>）的类型。</p><p>但对于 <code>Digits</code> 来说，由于其本身没有泛型，所以 <code>Element</code> 事实上是被“隐藏”起来的，</p><p>编译器无法推断其类型，因此不能自动变成 <code>Any</code>。</p><p><img src="/img/type-erasure-in-swift/non-generic-compiletime-infer.jpeg"></p><blockquote><p>直到运行时才能确定出 <code>Digits.Element</code> 的具体类型是 <code>Int</code></p><p><img src="/img/type-erasure-in-swift/non-generic-runtime-infer.jpeg"></p></blockquote><p>有解决办法嘛？有。</p><p>就是给 <code>Digits</code> 加上 Element 的泛型。</p><blockquote><p>但是加上泛型再去限定只能是 <code>Int</code> 就有点脱裤子放屁的感觉了😂</p></blockquote><p>最终我把它变成了一个 <code>CustomCollection</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> content: [<span class="type">Element</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">content</span>: <span class="type">Element</span>...) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content.append(contentsOf: content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">CustomCollection</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AnyMyCollection"><a href="#AnyMyCollection" class="headerlink" title="AnyMyCollection"></a>AnyMyCollection</h2><p>上面两个问题研究透彻之后，从 Protocol 到 Type Eraser 的仿制也就完成了。</p><p>最终代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">MyCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>]</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// MARK: - AnyMyCollection</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyMyCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _box: _AnyMyCollectionBase<span class="operator">&lt;</span><span class="type">Element</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>&lt;<span class="type">C</span>: <span class="type">MyCollection</span>&gt;(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">C</span>) <span class="keyword">where</span> <span class="type">Element</span> <span class="operator">==</span> <span class="type">C</span>.<span class="type">Element</span> &#123;</span><br><span class="line">        _box <span class="operator">=</span> _MyCollectionBox(base)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyMyCollection</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        _box.allValues()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_MyCollectionBox</span>&lt;<span class="title class_">Base</span>: <span class="title class_">MyCollection</span>&gt;: <span class="title class_">_AnyMyCollectionBase</span>&lt;<span class="title class_">Base</span>.<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">Base</span>) &#123;</span><br><span class="line">        _base <span class="operator">=</span> base</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Base</span>.<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> _base.allValues()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_AnyMyCollectionBase</span>&lt;<span class="title class_">Element</span>&gt;: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;This method should be overwritten. Line 35.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Array</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123; <span class="keyword">self</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// - MARK: Custom Collection</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomCollection</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> content: [<span class="type">Element</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">content</span>: <span class="type">Element</span>...) &#123; <span class="keyword">self</span>.content.append(contentsOf: content) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">CustomCollection</span>: <span class="title class_">MyCollection</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">allValues</span>() -&gt; [<span class="type">Element</span>] &#123; content &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> collections <span class="operator">=</span> [<span class="type">AnyMyCollection</span>(<span class="type">CustomCollection</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)), <span class="type">AnyMyCollection</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个过程耗费了差不过两天的时间，最重要的是要理解这一种 Type Eraser 的基本原理和实现，</p><p>踩踩坑，更能加深印象🥲</p><p>不过 Swift 5.7 有了 <code>any</code> 关键字，不知道能不能取代掉 Type Eraser，期待一下 Swift 6。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上篇博客中，我们初步了解了为什么需要一个 Type Eraser ，&lt;/p&gt;
&lt;p&gt;也分享了一个简单实现 Type Erasure 的方案。&lt;/p&gt;
&lt;p&gt;为了更加深入了解类型擦除，我们还是得来看看 Swift 自带的一些 Type Eraser 是如何实现的。&lt;/p&gt;
&lt;p&gt;目标是：理解一下其基本思路，并且仿制一个出来。&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="泛型" scheme="https://liyanan2004.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
    <category term="类型擦除" scheme="https://liyanan2004.github.io/tags/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的类型擦除（上）—— 为什么 &amp; 怎么做</title>
    <link href="https://liyanan2004.github.io/type-erasure-in-swift/"/>
    <id>https://liyanan2004.github.io/type-erasure-in-swift/</id>
    <published>2023-01-13T14:04:01.000Z</published>
    <updated>2023-01-16T07:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>探索类型擦除的原理和实现，常见的类型橡皮擦有：AnyView、AnyShape、AnyCollection…</p><span id="more"></span><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">S</span>: <span class="type">StringProtocol</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="type">S</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个协议（或者叫接口）可以创建一个 Tool </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Pen</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line">        <span class="string">&quot;Pen&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pencil</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line">        <span class="string">&quot;Pencil&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ruler</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line">        <span class="string">&quot;Ruler&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我要创建一个 <code>ToolController</code> 来管理我的“工具们”，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ToolController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来获取所有工具，但是遇到一个问题，</p><p>这里虽然只有三个工具，可以一个个写，</p><p>但是这只是个例子，在实际应用中这里的数量是未知的，</p><p>应该如何获取所有的工具呢？大致思路是这样的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tools: [<span class="type">Tool</span>] <span class="operator">=</span> [<span class="type">Pen</span>(), <span class="type">Pencil</span>(), <span class="type">Ruler</span>()]</span><br></pre></td></tr></table></figure><p>但是，<code>Tool</code> 中有 <code>associatedtype</code>，因此 <strong><code>Tool</code> 不能当作类型来使用</strong>，</p><p>好消息是，在 Swift 5.7 或更新版本中，可以使用 <code>any Tool</code> 来作为类型，</p><p>但是之后的所有结果都带有 <code>any</code>，可能不会是你预期的结果。</p><blockquote><p>比如 <code>any View</code> 不符合 <code>View</code> 协议…</p></blockquote><p>除了这样的数组创建和使用上可能会受阻，在多分支返回是也会出问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ToolController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> currentTool <span class="operator">=</span> <span class="string">&quot;pen&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ❌ Function declares an opaque return type &#x27;some Tool&#x27;, but the return statements in its body do not have matching underlying types.</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getCurrentTool</span>() -&gt; <span class="keyword">some</span> <span class="type">Tool</span> &#123; </span><br><span class="line">        <span class="keyword">switch</span> currentTool &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;pen&quot;</span>: <span class="keyword">return</span> <span class="type">Pen</span>()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ruler&quot;</span>: <span class="keyword">return</span> <span class="type">Ruler</span>()</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="type">Pencil</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>some</code> 关键字表示不透明的类型（opaque type），</p><p>我们只需要知道他是一个符合 <code>Tool</code> 协议的东西，</p><p>但是具体是什么不知道，也不关心是什么，交给编译器去推断。</p></blockquote><p>因为在三个 case 中返回的结果类型不一致，编译时无法推断 <code>Tool</code> 的类型，</p><p>而三个分支中使用的 Tool 是完全不同的东西，不能直接替换。</p><p>如果还有更多分支的话情况会更加复杂，</p><p>因此，若想统一类型，不妨创建一个类型橡皮擦来擦除原本的类型，</p><p>这时候每一个分支返回的类型都是“橡皮擦”的类型，也就没问题了。</p><h2 id="类型擦除的原理以及实现"><a href="#类型擦除的原理以及实现" class="headerlink" title="类型擦除的原理以及实现"></a>类型擦除的原理以及实现</h2><ul><li>创建橡皮擦（以下称之为 Eraser），Eraser 要符合你的 <code>Protocol</code></li></ul><blockquote><p>橡皮擦的名称一般是 <code>Any</code> + 协议名</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyTool</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="keyword">some</span> <span class="type">StringProtocol</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化中传入一个<strong>要被擦除类型的 Tool</strong> （下面称之为Type）</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">Tool</span>&gt;(<span class="params">erasing</span> <span class="params">tool</span>: <span class="type">T</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建中间变量来传递 Type 中的必要的方法和属性</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">let</span> _name: <span class="type">S</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">Tool</span>&gt;(<span class="params">erasing</span> <span class="params">tool</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    _name <span class="operator">=</span> (tool.name() <span class="keyword">as?</span> <span class="type">S</span>) <span class="operator">??</span> <span class="string">&quot;IDK.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后，用 <code>name</code> 来填补 Eraser 中需要的方法</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AnyTool</span>: <span class="title class_">Tool</span> &#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">S</span> <span class="operator">=</span> <span class="type">String</span> <span class="comment">// This must be a type that conforms to StringProtocol.</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">let</span> _name: <span class="type">S</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">Tool</span>&gt;(<span class="params">erasing</span> <span class="params">tool</span>: <span class="type">T</span>) &#123;</span><br><span class="line">        _name <span class="operator">=</span> (tool.name() <span class="keyword">as?</span> <span class="type">S</span>) <span class="operator">??</span> <span class="string">&quot;IDK.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">name</span>() -&gt; <span class="type">S</span> &#123;</span><br><span class="line">        _name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们将类型从 <code>some StringProtocol</code> 变成了 <code>String</code></p><blockquote><p>如果是 <code>View</code>，一般会把他替换成 <code>AnyView</code> </p><p>这里如果不能将 <code>tool.name()</code> 转换成 <code>String</code> 的话就返回 <code>IDK.</code></p></blockquote><p>这样一来，我们就可以将 <code>Pen</code>、<code>Pencil</code>、<code>Ruler</code> 都变成 <code>AnyTool</code>，解决了以上两个问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ToolController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> allTools: [<span class="type">AnyTool</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">var</span> currentTool <span class="operator">=</span> <span class="string">&quot;pen&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getAllTools</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> tools <span class="operator">=</span> [<span class="type">AnyTool</span>(erasing: <span class="type">Pen</span>()), <span class="type">AnyTool</span>(erasing: <span class="type">Pencil</span>()), <span class="type">AnyTool</span>(erasing: <span class="type">Ruler</span>())]</span><br><span class="line">        allTools <span class="operator">=</span> tools</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getCurrentTool</span>() -&gt; <span class="keyword">some</span> <span class="type">Tool</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> currentTool &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;pen&quot;</span>: <span class="keyword">return</span> <span class="type">AnyTool</span>(erasing: <span class="type">Pen</span>())</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ruler&quot;</span>: <span class="keyword">return</span> <span class="type">AnyTool</span>(erasing: <span class="type">Ruler</span>())</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="type">AnyTool</span>(erasing: <span class="type">Pencil</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现原理参考 <a href="https://fabernovel.github.io/2020-06-03/approaches-to-type-erasure-in-swift">Approaches to Type Erasure in Swift</a> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;探索类型擦除的原理和实现，常见的类型橡皮擦有：AnyView、AnyShape、AnyCollection…&lt;/p&gt;</summary>
    
    
    
    <category term="撸代码" scheme="https://liyanan2004.github.io/categories/%E6%92%B8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Swift" scheme="https://liyanan2004.github.io/tags/Swift/"/>
    
    <category term="类型擦除" scheme="https://liyanan2004.github.io/tags/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
    
  </entry>
  
</feed>
